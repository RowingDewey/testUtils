public class PortalEngine
{
    public String register(String msisdn, String userAgent, String portalType, String sLoginType, String channelCode,
        String clientVersion)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"userAgent", userAgent}};
            logger.debug("Enter PortalEngine.register()", appInfos);
        }
        
        try
        {
            // 构造注册对象
            UserInfo userProfile = new UserInfo();
            userProfile.setMobile(msisdn);
            userProfile.setUserAgent(userAgent);
            
            UserRegisterRequest request = new UserRegisterRequest();
            request.setUserInfo(userProfile);
            request.setPortalType(portalType);
            request.setLoginType(sLoginType);
            
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 begin
            request.setChannelCode(channelCode);
            request.setClientVersion(clientVersion);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 end
            
            UserRegisterResponse response =
                (UserRegisterResponse)PortalServer.getInstance().sendPostRequest("userRegister", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"userAgent", userAgent}};
                logger.debug("Exit PortalEngine.register()", appInfos);
            }
            
            return response.getUserId();
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"userAgent", userAgent}};
            logger.error("user register failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 
     * 用户注册migu账号
     * 
     * @author cWX238473
     * @param sessionId sessionid
     * @param validType 验证码类型
     * @param validCode 验证码
     * @param accountName 帐号名
     * @param password 密码
     * @param clientHash clienthash
     * @param clientVersion clientversion
     * @param sourceIp 来源ip
     * @param remoteIp 远程ip
     * @return MiguRegisterResp 注册后的响应
     * @throws PortalException 客户端异常
     */
    public MiguRegisterResp registerMigu(String sessionId, String validType, String validCode, String accountName,
        String password, String clientHash, String clientVersion, String sourceIp, String remoteIp)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.registerMigu() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.registerMigu(), params = ",
                new String[][] {{"sessionId", sessionId}, {"validType", validType}, {"validCode", validCode},
                    {"accountName", accountName}, {"password", password}, {"clientHash", clientHash},
                    {"clientVersion", clientVersion}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        
        MiguRegisterReq request = new MiguRegisterReq();
        request.setSessionid(sessionId);
        request.setValidcode(validCode);
        request.setValidtype(validType);
        request.setAccountName(accountName);
        request.setPassword(password);
        request.setClientHash(clientHash);
        request.setClientVersion(clientVersion);
        request.setIsCheckHash(SystemConstants.ISCHECKCHASH_YES);
        MiguRegisterResp response = null;
        try
        {
            // 发送http请求
            response = (MiguRegisterResp)PortalServer.getInstance().sendPostRequest("miguRegister", request);
        }
        catch (PortalException e)
        {
            logger.error("miguRegister error;", e);
            throw e;
        }
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.registerMigu() ******");
        }
        return response;
    }
    
    /**
     * 
     * migu认证平台重置密码
     * 
     * @author cWX238473
     * @param sessionId sessionid
     * @param accountName 帐号名
     * @param password 密码
     * @param verifyCode 验证码
     * @param verifyCodeType 验证码类型
     * @throws PortalException 客户端异常
     */
    public void miguResetPassword(String sessionId, String accountName, String password, String verifyCode,
        String verifyCodeType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"accountName", accountName}};
            logger.debug("Enter PortalEngine.miguResetPassword()", appInfos);
        }
        
        MiguResetPasswordRequest request = new MiguResetPasswordRequest();
        request.setAccountName(accountName);
        request.setNewPassword(password);
        request.setSessionId(sessionId);
        request.setValidCode(verifyCode);
        request.setValidType(verifyCodeType);
        request.setPortalType(CLIENT);
        try
        {
            // 发送http请求
            PortalServer.getInstance().sendPostRequest("miguResetPassword", request);
        }
        catch (PortalException e)
        {
            logger.error("migu reset password error;", e);
            throw e;
        }
    }
    
    /**
     * 
     * migu帐号登陆鉴权
     * 
     * @author cWX238473
     * @param accountName 账号
     * @param password 密码
     * @return MiguAuthenticateResponse 登陆后响应
     * @throws PortalException 客户端异常
     */
    public MiguAuthenticateResponse miguAuthenticate(String accountName, String password)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"accountName", accountName}};
            logger.debug("Enter PortalEngine.miguAuthenticate()", appInfos);
        }
        
        MiguAuthenticateRequest request = new MiguAuthenticateRequest();
        request.setAccountName(accountName);
        request.setPassword(password);
        MiguAuthenticateResponse response = null;
        try
        {
            // 发送http请求
            response =
                (MiguAuthenticateResponse)PortalServer.getInstance().sendPostRequest("miguAuthenticate", request);
        }
        catch (PortalException e)
        {
            logger.error("migu authenticate error;", e);
            throw e;
        }
        return response;
    }
    
    /**
     * 
     * 与 miguAuthenticate 功能相同，但返回用户信息。 add by chengbo for req-3559
     * 
     * @author chengbo
     * @param accountName 账号
     * @param password 密码
     * @param isReturnUserInfo 是否需要返回用户信息，true为返回
     * @return MiguAuthenticateResponse 登陆后响应
     * @throws PortalException 客户端异常
     */
    public MiguAuthenticateResponse miguAuthenticate2(String accountName, String password, boolean isReturnUserInfo,
        String sourceIp, String remoteIp)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"accountName", accountName}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}};
            logger.debug("Enter PortalEngine.miguAuthenticate2()", appInfos);
        }
        
        MiguAuthenticateRequest request = new MiguAuthenticateRequest();
        request.setAccountName(accountName);
        request.setPassword(password);
        if (isReturnUserInfo)
        {
            request.setIsReturnUserInfo("1");
        }
        MiguAuthenticateResponse response = null;
        try
        {
            // 发送http请求
            response =
                (MiguAuthenticateResponse)PortalServer.getInstance().sendPostRequest("miguAuthenticate", request);
        }
        catch (PortalException e)
        {
            logger.error("migu authenticate error;", e);
            throw e;
        }
        return response;
    }
    
    /**
     * 
     * migu帐号升级
     * 
     * @author cWX238473
     * @param identifyId 身份id
     * @param accountName 账号
     * @param password 密码
     * @return MiguAuthenticateResponse 登陆后响应
     * @throws PortalException 客户端异常
     */
    public ServicePassportUpgradeResp servicePassportUpgrade(String identifyId, String accountName, String password,
        String sourceIp, String remoteIp)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"identifyId", identifyId}, {"accountName", accountName}, {"sourceIp", sourceIp},
                {"remoteIp", remoteIp}};
            logger.debug("Enter PortalEngine.servicePassportUpgrade()", appInfos);
        }
        ServicePassportUpgradeReq request = new ServicePassportUpgradeReq();
        request.setIdentityid(identifyId);
        request.setAccountName(accountName);
        request.setPassword(password);
        ServicePassportUpgradeResp response = null;
        try
        {
            // 发送http请求
            response = (ServicePassportUpgradeResp)PortalServer.getInstance().sendPostRequest("servicePassPortUpgrade",
                request);
        }
        catch (PortalException e)
        {
            logger.error("account upgrade error;", e);
            throw e;
        }
        return response;
    }
    
    /**
     * 获取会员资费信息
     * 
     * 
     * @return 会员资费信息
     * @exception PortalException
     */
    public AssociatorFeeInfo getMemberProductInfo()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMemberProductInfo()");
        }
        
        try
        {
            // 发送http请求
            GetMemberProductInfoRespose response =
                (GetMemberProductInfoRespose)PortalServer.getInstance().sendPostRequest("getMemberProductInfo", null);
            
            AssociatorFeeInfo associatorFeeInfo = response.getAssociatorFeeInfo();
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getMemberProductInfo()");
            }
            
            return associatorFeeInfo;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 用户鉴权接口 修改：2012.2.29 REQ-867 完善秒杀活动适配规则，增加channelCode参数传入
     * 
     * @author mWX177641
     * @param msisdn 用户手机号码
     * @param wapIP wap网关IP地址
     * @param sLoginType 登录类型
     * @param clientVersion 客户端版本
     * @param channelCode 渠道编码
     * @param userAgent 用户终端类型
     * @return 用户信息
     * @throws PortalException
     */
    public UserInfo authenticate(String msisdn, String wapIP, String sLoginType, String clientVersion,
        String channelCode, String userAgent)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"wapIP", wapIP}};
            logger.debug("Enter PortalEngine.authenticate()", appInfos);
        }
        
        try
        {
            // 1.构造xml报文
            UserAuthenticateRequest request = new UserAuthenticateRequest();
            request.setMobile(msisdn);
            request.setWapIp(wapIP);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setLoginType(sLoginType);
            
            // modify by hKF48608 at Nov 1, 2011 for IRD-20511 begin
            request.setClientVersion(clientVersion);
            // modify by hKF48608 at Nov 1, 2011 for IRD-20511 end
            
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 begin
            request.setChannelCode(channelCode);
            request.setUserAgent(userAgent);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 end
            
            UserAuthenticateResponse response =
                (UserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("userAuthenticate", request);
            
            UserInfo usrProfile = response.getUserInfo();
            
            // 去掉响应用户信息中手机号码的前缀
            usrProfile = removePrefix(usrProfile);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"wapIP", wapIP}};
                logger.debug("Exit PortalEngine.authenticate()", appInfos);
            }
            
            return usrProfile;
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"wapIP", wapIP}};
            logger.error("user authenticate failed", appInfos, e);
            
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 查询用户信息接口
     * 
     * @param msisdn 用户手机号码
     * @return 用户信息
     * @throws PortalException
     */
    public UserInfo getUserInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getUserInfo()", appInfos);
        }
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询用户信息
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            GetUserInfoRequest request = new GetUserInfoRequest();
            request.setMobile(msisdn);
            
            // GetUserInfoResponse response = (GetUserInfoResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getUserInfo", request);
            
            // 调用aserver的getUserInfo接口
            GetUserInfoResponse response =
                (GetUserInfoResponse)PortalServer.getInstance().sendPostRequest("getUserInfo", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getUserInfo() GetUserInfoResponse " + response);
            }
            
            UserInfo userInfo = response.getUserInfo();
            
            // 去掉响应用户信息中手机号码的前缀
            userInfo = removePrefix(userInfo);
            
            /** 解决主库突刺问题，该字符客户端非必要字段，赋默认值
            // 调用iserver的getUserOtherInfo
            GetUserOtherInfoResponse getUserOtherInfoResponse = UserService.getUserOtherInfo(userInfo.getMobile(),
                "",
                userInfo.getNickName(),
                userInfo.getAccountType());
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getUserInfo() GetUserOtherInfoResponse " + getUserOtherInfoResponse);
            }
            
            String scheduleUpdate = getUserOtherInfoResponse.getScheduleUpdate();
            userInfo.setScheduleUpdate(scheduleUpdate);
            */
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.getUserInfo()", appInfos);
            }
            
            return userInfo;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 
     * BR002224 查询用户信息接口 新增isNeedPaymsisdn字段标识是否需要server返回Paymsisdn字段
     *
     * @author hlf
     * @param msisdn 用户手机号
     * @param isNeedPaymsisdn 标识是否需要server返回Paymsisdn字段
     * @return
     * @throws PortalException
     */
    public UserInfo getUserInfo(String msisdn, String isNeedPaymsisdn)
        throws PortalException
    {
        LogTools.debugLog(logger,
            "Enter PortalEngine.getUserInfo()",
            new String[][] {{"msisdn", msisdn}, {"isNeedPaymsisdn", isNeedPaymsisdn}});
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询用户信息
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            GetUserInfoRequest request = new GetUserInfoRequest();
            request.setMobile(msisdn);
            request.setIsNeedPaymsisdn(isNeedPaymsisdn);
            
            // GetUserInfoResponse response = (GetUserInfoResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getUserInfo", request);
            
            // 调用aserver的getUserInfo接口
            GetUserInfoResponse response =
                (GetUserInfoResponse)PortalServer.getInstance().sendPostRequest("getUserInfo", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getUserInfo() GetUserInfoResponse " + response);
            }
            
            UserInfo userInfo = response.getUserInfo();
            
            // 去掉响应用户信息中手机号码的前缀
            userInfo = removePrefix(userInfo);
            
            /**   解决主库突刺问题，该字符客户端非必要字段，赋默认值
            // 调用iserver的getUserOtherInfo
            GetUserOtherInfoResponse getUserOtherInfoResponse = UserService.getUserOtherInfo(userInfo.getMobile(),
                "",
                userInfo.getNickName(),
                userInfo.getAccountType());
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getUserInfo() GetUserOtherInfoResponse " + getUserOtherInfoResponse);
            }
            
            String scheduleUpdate = getUserOtherInfoResponse.getScheduleUpdate();
            userInfo.setScheduleUpdate(scheduleUpdate);
            */
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.getUserInfo()", appInfos);
            }
            
            return userInfo;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 判断用户是否为会员
     * 
     * @author c00126000
     * @param msisdn 用户手机号
     * @return 1. 会员 0.非会员
     */
    public String checkUserIsMember(String msisdn)
    {
        String isMember = Types.FALSE;
        try
        {
            // msisdn=uid
            UserInfo userInfo = getUserInfo(msisdn);
            if (userInfo != null && Types.TRUE.equals(userInfo.getIsMemberExt()))
            {
                isMember = Types.TRUE;
            }
        }
        catch (PortalException e)
        {
            if (logger.isDebugEnable())
            {
                logger.debug("call getUserInfo failed", e);
            }
        }
        return isMember;
    }
    
    /**
     * 查询内容类型适配信息接口
     * 
     * @param msisdn 用户手机号码
     * @return 内容类型
     * @throws PortalException
     */
    public String getContentType(String version)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"version", version}};
            logger.debug("Enter PortalEngine.getContentType()", appInfos);
        }
        try
        {
            GetContentTypeRequest request = new GetContentTypeRequest();
            request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
            request.setVersion(version);
            GetContentTypeResponse response =
                (GetContentTypeResponse)PortalServer.getInstance().sendPostRequest("getContentType", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"version", version}};
                logger.debug("Enter PortalEngine.getUserInfo()", appInfos);
            }
            return response.getContentTypes();
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 查询版本组信息接口
     * 
     * @param version 客户端版本
     * @return 查询版本组信息
     * @throws PortalException
     */
    public String[] getClientVersionInfo(String version)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"version", version}};
            logger.debug("Enter PortalEngine.getClientVersionInfo()", appInfos);
        }
        try
        {
            GetVersionTeamRequest request = new GetVersionTeamRequest();
            request.setVersion(version);
            GetVersionTeamResponse response =
                (GetVersionTeamResponse)PortalServer.getInstance().sendPostRequest("getVersionTeam", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"version", version}};
                logger.debug("Enter PortalEngine.getClientVersionInfo()", appInfos);
            }
            List<String> list = response.getList();
            String[] groups = null;
            if (list != null && list.size() > 0)
            {
                groups = new String[list.size()];
                for (int i = 0; i < list.size(); i++)
                {
                    groups[i] = list.get(i);
                }
            }
            return groups;
        }
        catch (PortalException e)
        {
            logger.warn(e.toString() + " version:" + version);
            throw e;
        }
    }
    
    /**
     * 修改密码接口
     * 
     * @param msisdn 用户手机号码
     * @param oldPasswd 原密码
     * @param newPasswd 新密码
     * @throws PortalException
     */
    public void updatePassword(String msisdn, String oldPasswd, String newPasswd)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.updatePassword()", appInfos);
        }
        
        try
        {
            ChangePasswordRequest request = new ChangePasswordRequest();
            request.setMobile(msisdn);
            request.setNewPassword(newPasswd);
            request.setOldPassword(oldPasswd);
            
            PortalServer.getInstance().sendPostRequest("changePassword", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.updatePassword()", appInfos);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 修改用户信息接口
     * 
     * @author mWX177641
     * @param userInfo 用户信息
     * @throws PortalException
     */
    public void updateUserInfo(UserInfo userInfo)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", userInfo.getMobile()}, {"birthday", userInfo.getBirthday()},
                {"constellId", userInfo.getConstellation()}, {"constellName", userInfo.getConstellationName()},
                {"job", userInfo.getJob()}, {"jobName", userInfo.getJobName()},
                {"ProvinceId", userInfo.getPerProvinceId()}, {"ProvinceName", userInfo.getPerProvinceName()},
                {"CityId", userInfo.getPerCityId()}, {"CityName", userInfo.getPerCityName()},
                {"signature", userInfo.getSignature()}};
            logger.debug("Enter PortalEngine.updateUserInfo()", appInfos);
        }
        
        try
        {
            ModifyUserInfoRequest request = new ModifyUserInfoRequest();
            request.setUserInfo(userInfo);
            PortalServer.getInstance().sendPostRequest("modifyUserInfo", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", userInfo.getMobile()}};
                logger.debug("Exit PortalEngine.updateUserInfo()", appInfos);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 内容鉴权接口
     * 
     * @param msisdn 用户手机号码
     * @param nodeID 栏目ID
     * @param bookID 图书ID
     * @param chapterID 内容项ID
     * @param contentType 内容类型 1 图书；2 专区；3 章节
     * @param fasciculeID 分册id
     * @param sLoginType 登录类型
     * @param sourceType 资源类型
     * @param forbidFirstVisitCdr 忽略计费话单
     * @param isUseEquity 是否使用权益
     * @param authType 鉴权类型
     * @param isDownload 是否下载
     * @return 内容鉴权返回消息
     * @throws PortalException
     */
    public ContentAuthenticateResponse contentAuthenticate(String msisdn, String nodeID, String bookID,
        String chapterID, String contentType, String fasciculeID, String sLoginType, String sourceType,
        String forbidFirstVisitCdr, String isUseEquity, String authType, String isOnlineRead, String isDownload)
        throws PortalException
    {
        try
        {
            // 构造请求报文xml
            ContentAuthenticateRequest request = new ContentAuthenticateRequest();
            request.setMobile(msisdn);
            request.setCatalogId(nodeID);
            request.setBookId(bookID);
            request.setChapterId(chapterID);
            request.setContentType(contentType);
            
            // modify by ckf24529 2010-11-18 加入门户类型
            request.setAccessType(String.valueOf(Types.PORTAL_TERMINAL));
            request.setLoginType(sLoginType);
            request.setSourceType(sourceType);
            
            request.setForbidFirstVisitCdr(forbidFirstVisitCdr);
            request.setIsRecommend("0");
            request.setIsOnline(isOnlineRead);
            request.setIsUseEquity(isUseEquity);
            request.setIsDownload(isDownload);
            request.setChannelCode(ThreadLocalContext.getChannelCodeIntoContext());
            
            ContentAuthenticateResponse contentAuthenticateResponse =
                (ContentAuthenticateResponse)PortalServer.getInstance().sendPostRequest("contentAuthenticate", request);
            if (contentAuthenticateResponse != null)
            {
                // 由于图书下架后server没有返回预期的24550结果码，这里根据鉴权的24500结果码和图书状态转换结果码
                BookItem bookItem = PortalCacheManager.getBookInfo(bookID);
                if (bookItem != null && TerminalConstants.BOOK_STAT_OFF_LOADING.equals(bookItem.getStatus()))
                {
                    ContentAuthenticateResponse authenticateFail = null;
                    if (contentAuthenticateResponse.getResultCode() == ResultCode.CONTENT_AUTHENTICATE_FAIL)
                    {
                        String[] bookchapters = bookItem.getChapterIDs();
                        ArrayList<String> bookchapterlist = new ArrayList<String>();
                        if (bookchapters != null && bookchapters.length > 0)
                        {
                            Collections.addAll(bookchapterlist, bookchapters);
                            // 获取第一个收费章节的位置
                            int StartChargeCidIndex = bookchapterlist.indexOf(bookItem.getStartChargeCid());
                            // 获取所有免费章节
                            List<String> subChapterList = bookchapterlist.subList(0, StartChargeCidIndex);
                            // 转换成可超作类型
                            ArrayList<String> subChapterArrayList = new ArrayList<String>();
                            subChapterArrayList.addAll(subChapterList);
                            // 获取到未订购的章节列表
                            List<String> unPrechapterlist = contentAuthenticateResponse.getUnPurChapterIdList();
                            // 从书籍列表中移除未订购列表，剩下即为已订购列表,和免费章节
                            if (!Util.isEmpty(unPrechapterlist))
                            {
                                bookchapterlist.removeAll(unPrechapterlist);
                            }
                            // 从书籍列表中移除免费章节，剩下即为已订购列表
                            bookchapterlist.removeAll(subChapterArrayList);
                        }
                        // 如果存在已订购的章节，则调用接口再次对已经订购的章节进行鉴权
                        if (bookchapterlist.size() > 0)
                        {
                            request.setChapterId(bookchapterlist.get(0));
                            authenticateFail = (ContentAuthenticateResponse)PortalServer.getInstance()
                                .sendPostRequest("contentAuthenticate", request);
                            if (authenticateFail != null
                                && authenticateFail.getResultCode() == ResultCode.CONTENT_AUTHENTICATE_FAIL)
                            {
                                throw new PortalException(StrUtil.valueOf(ResultCode.NODE_AND_CONTENT_IS_NULL),
                                    "content is null or in auditing");
                            }
                        }
                        else
                        {
                            throw new PortalException(StrUtil.valueOf(ResultCode.NODE_AND_CONTENT_IS_NULL),
                                "content is null or in auditing");
                        }
                    }
                    authenticateFail = authenticateFail == null ? contentAuthenticateResponse : authenticateFail;
                    if (authenticateFail.getResultCode() == ResultCode.SUCCESS)
                    {
                        String[] listType = {"1", "2", "7", "16", "17", "19", "20"};
                        boolean bool = StrUtil.containSubStr(authenticateFail.getAuthenticatePtype(), listType);
                        if (!bool)
                        {
                            throw new PortalException(StrUtil.valueOf(ResultCode.NODE_AND_CONTENT_IS_NULL),
                                "content is null or in auditing");
                        }
                    }
                }
            }
            return contentAuthenticateResponse;
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 内容鉴权接口
     * 
     * @author mWX177641
     * @param msisdn 用户手机号码
     * @param nodeID 栏目ID
     * @param bookID 图书ID
     * @param chapterID 内容项ID
     * @param contentType 内容类型 1 图书；2 专区；3 章节
     * @param fasciculeID 分册id
     * @param sLoginType 登录类型
     * @param sourceType 资源类型
     * @param forbidFirstVisitCdr 忽略计费话单
     * @param isDownload 是的下载
     * @return 内容鉴权消息
     * @throws PortalException
     */
    public ContentAuthenticateResponse contentAuthenticate(String msisdn, String nodeID, String bookID,
        String chapterID, String contentType, String fasciculeID, String sLoginType, String sourceType,
        String forbidFirstVisitCdr, String isDownload)
        throws PortalException
    {
        return this.contentAuthenticate(msisdn,
            nodeID,
            bookID,
            chapterID,
            contentType,
            fasciculeID,
            sLoginType,
            sourceType,
            forbidFirstVisitCdr,
            "",
            null,
            "",
            isDownload);
    }
    
    /**
     * 内容批量鉴权
     * 
     * @param msisdn 用户手机号
     * @param bookId 图书id
     * @param chapterIdList 章节id列表
     * @return 返回消息
     * @throws PortalException
     */
    public BatchContentAuthenticateResponse batchContentAuthenticate(String msisdn, String bookId,
        List<String> chapterIdList, String sLoginType, String sourceType, String calculatePriceType,
        String downloadMode, String isDownload)
        throws PortalException
    {
        // 如果列表为空，不查询批量章节资费信息
        if (Util.isEmpty(chapterIdList))
        {
            logger.error("chapterIdList is null");
            
            return null;
        }
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"bookId", bookId}, {"chapterIdList", chapterIdList.toString()}};
                logger.debug("Enter PortalEngine.batchContentAuthenticate()", appInfos);
            }
            
            BatchContentAuthenticateRequest req = new BatchContentAuthenticateRequest();
            req.setMobile(msisdn);
            req.setBookId(bookId);
            req.setChapterIdList(chapterIdList);
            req.setAccessType(SystemConstants.PORTAL_TYPE);
            req.setLoginType(sLoginType);
            req.setSourceType(sourceType);
            req.setCalculatePriceType(calculatePriceType);
            req.setIsBatchDownload(downloadMode);
            req.setIsDownload(isDownload);
            req.setChannelCode(ThreadLocalContext.getChannelCodeIntoContext());
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.batchContentAuthenticate() BatchContentAuthenticateRequest:" + req);
            }
            
            BatchContentAuthenticateResponse rsp = (BatchContentAuthenticateResponse)PortalServer.getInstance()
                .sendPostRequest("batchContentAuthenticate", req);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"bookId", bookId}, {"chapterIdList", chapterIdList.toString()}};
                logger.debug("Enter PortalEngine.batchContentAuthenticate()", appInfos);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 获得用户书评列表
     * 
     * @param msisdn 用户手机号码
     * @param start 查询列表开始位置
     * @param count 查询列表显示格式
     * @param contentId 内容Id
     * @param contentType 内容类型
     * @param prime 是否是精华书评，1：是，0 ：不是
     * @return [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetUserBookreviewListResponse getUserBookreviewList(String msisdn, int start, int count, String contentType,
        String contentId, String portalType, String prime)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"contentType", contentType}, {"contentId", contentId}};
                logger.debug("Enter PortalEngine.getUserBookreviewList()", appInfo);
            }
            
            GetUserBookreviewListRequest request = new GetUserBookreviewListRequest();
            request.setMsisdn(msisdn);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            request.setContentId(contentId);
            request.setContentType(contentType);
            request.setPortalType(portalType);
            request.setPrime(prime);
            GetUserBookreviewListResponse response = (GetUserBookreviewListResponse)PortalServer.getInstance()
                .sendPostRequest("getUserBookreviewList", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"contentType", contentType}, {"contentId", contentId}};
                logger.debug("Exit PortalEngine.getUserBookreviewList()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获得支持或反对的用户书评
     * 
     * @param msisdn 用户手机号码
     * @param bookReviewId 书评标识
     * @return [参数说明]
     * 
     * @return GetAbeOrOppBookreviewResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetAbeOrOppBookreviewResponse getAbeOrOppBookreview(String msisdn, String bookReviewId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookReviewId", bookReviewId}};
                logger.debug("Enter PortalEngine.getAbeOrOppBookriview()", appInfo);
            }
            GetAbeOrOppBookreviewRequest request = new GetAbeOrOppBookreviewRequest();
            request.setBookreviewID(bookReviewId);
            
            GetAbeOrOppBookreviewResponse response = (GetAbeOrOppBookreviewResponse)PortalServer.getInstance()
                .sendPostRequest("getAbeOrOppBookreview", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookReviewId", bookReviewId}};
                logger.debug("Exit PortalEngine.getAbeOrOppBookriview()", appInfo);
            }
            return response;
            
        }
        catch (PortalException e)
        {
            logger.debug(e.toString());
            throw e;
        }
    }
    
    // modify by c00126000 at 2011-12-13 for REQ-826 begin
    /**
     * 发表评论
     * 
     * @param msisdn 图书ID
     * @param commentary 评论内容
     * @param contentType 被评论的内容类型
     * @param contentId 被评论的内容ID
     * @param portalType 门户类型
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void addUserBookreview(String msisdn, String commentary, String contentType, String contentId,
        String commentType, String srcCommentID, String commentFrom, String weiboTypeList, String channelcode,
        String sourceType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"commentary", commentary}, {"contentId", contentId},
                {"contentType", contentType}};
            logger.debug("Enter PortalEngine.addUserBookreview()", appInfo);
        }
        
        AddUserBookreviewRequest request = new AddUserBookreviewRequest();
        request.setMsisdn(msisdn);
        request.setCommentary(commentary);
        request.setContentId(contentId);
        request.setContentType(contentType);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setCommentType(commentType);
        request.setSrcBookReviewId(srcCommentID);
        request.setCommentFrom(commentFrom);
        request.setChannelcode(channelcode);
        request.setSourceType(sourceType);
        
        List<WeiboInfo> weiboInfoList =
            ShareContentWiboManager.buildWeiboList(msisdn, commentary, contentId, weiboTypeList);
        request.setWeiboList(weiboInfoList);
        
        PortalServer.getInstance().sendPostRequest("addUserBookreview", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"commentary", commentary}, {"contentId", contentId},
                {"contentType", contentType}};
            logger.debug("Exit PortalEngine.addUserBookreview()", appInfo);
        }
    }
    
    /**
     * 发表评论和图片
     * 
     * @param msisdn 图书ID
     * @param commentary 评论内容
     * @param contentType 被评论的内容类型
     * @param contentId 被评论的内容ID
     * @param portalType 门户类型
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void addUserBookreview(String msisdn, String commentary, String contentType, String contentId,
        String commentType, String srcCommentID, String commentFrom, String weiboTypeList, String channelcode,
        String sourceType, List<String> maxPicList, List<String> minPicList)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"commentary", commentary}, {"contentId", contentId},
                {"contentType", contentType}};
            logger.debug("Enter PortalEngine.addUserBookreview()", appInfo);
        }
        
        AddUserBookreviewRequest request = new AddUserBookreviewRequest();
        request.setMsisdn(msisdn);
        request.setCommentary(commentary);
        request.setContentId(contentId);
        request.setContentType(contentType);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setCommentType(commentType);
        request.setSrcBookReviewId(srcCommentID);
        request.setCommentFrom(commentFrom);
        request.setChannelcode(channelcode);
        request.setSourceType(sourceType);
        
        List<WeiboInfo> weiboInfoList =
            ShareContentWiboManager.buildWeiboList(msisdn, commentary, contentId, weiboTypeList);
        request.setWeiboList(weiboInfoList);
        
        List<Attachment> attachmentList = new ArrayList<Attachment>();
        
        for (int i = 0; i < maxPicList.size(); i++)
        {
            Attachment attachment = new Attachment();
            HashMap<String, String> extInfo = new HashMap<String, String>();
            extInfo.put("originalImageId", maxPicList.get(i));
            extInfo.put("thumbnailImageId", minPicList.get(i));
            attachment.setId(String.valueOf(i));
            attachment.setType(SystemConstants.ATTACHMENT_TYPE);
            attachment.setExtInfo(extInfo);
            attachmentList.add(attachment);
        }
        request.setAttachmentList(attachmentList);
        
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.addUserBookreview() request:" + request);
            }
            PortalServer.getInstance().sendPostRequest("addUserBookreview", request);
        }
        catch (Exception e)
        {
            logger.error("PortalEngine.addUserBookreview() is Exception:", e);
        }
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"commentary", commentary}, {"contentId", contentId},
                {"contentType", contentType}};
            logger.debug("Exit PortalEngine.addUserBookreview()", appInfo);
        }
    }
    
    // modify by c00126000 at 2011-12-13 for REQ-826 end
    
    // delete by c00126000 at 2011-12-13 for REQ-826 begin
    
    /**
     * 支持反对书评
     * 
     * @param msisdn 用户手机号码
     * @return [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void abeOrOppBookreview(String msisdn, String bookreviewID, String abetOppose)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookreviewID", bookreviewID}, {"abetOppose", abetOppose}};
                logger.debug("Enter PortalEngine.abeOrOppBookreview()", appInfo);
            }
            
            AbeOrOppBookreviewRequest request = new AbeOrOppBookreviewRequest();
            request.setMsisdn(msisdn);
            request.setBookreviewID(bookreviewID);
            request.setAbetOppose(abetOppose);
            
            PortalServer.getInstance().sendPostRequest("abeOrOppBookreview", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookreviewID", bookreviewID}, {"abetOppose", abetOppose}};
                logger.debug("Exit PortalEngine.abeOrOppBookreview()", appInfo);
            }
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 包月栏目订购接口
     * 
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param accessType 门户类型,用户记录话单
     * @param nodeID 栏目ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void subscribe(String msisdn, String productID, String nodeID, String accessType, String channelCode,
        String clientVersion, String sourceIp, String sLoginType, String bearType, String userAgent, String subType,
        String idfa)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"msisdn", msisdn}, {"productID", productID}, {"nodeID", nodeID}, {"accessType", accessType}};
                logger.debug("Enter PortalEngine.subscribe()", appInfo);
            }
            
            SubscribeRequest request = new SubscribeRequest();
            request.setAccessType(accessType);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setCatalogId(nodeID);
            request.setChannelCode(channelCode);
            request.setUaName(userAgent);
            request.setSourceIp(sourceIp);// 来源IP
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setClientVersion(clientVersion);
            request.setSubType(subType);
            request.setTerminalUniqueId(idfa);
            PortalServer.getInstance().sendPostRequest("subscribe", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"msisdn", msisdn}, {"productID", productID}, {"promotionID", nodeID}, {"accessType", accessType}};
                logger.debug("Exit PortalEngine.subscribe()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 业务退订接口
     * 
     * @param msisdn 手机号码
     * @param nodeID 栏目ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void unSubscribe(String msisdn, String nodeID, String channelCode, String sLoginType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.unSubscribe()", appInfo);
            }
            
            UnsubscribeRequest request = new UnsubscribeRequest();
            request.setMobile(msisdn);
            request.setCatalogId(nodeID);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setChannelCode(channelCode);
            request.setLoginType(sLoginType);
            
            PortalServer.getInstance().sendPostRequest("unsubscribe", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.unSubscribe()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询用户订购信息
     * 
     * @param msisdn 用户手机号码
     * @param start 查询列表开始位置
     * @param pageSize 查询列表显示格式
     * @param status 订购状态
     * @return [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetSubscriptionResponse getSubScription(String msisdn, int start, int pageSize, String status,
        String excludeBrand)
        throws PortalException
    {
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询包月专区
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"status", status}};
                logger.debug("Enter PortalEngine.getSubScription()", appInfo);
            }
            
            GetSubscriptionRequest request = new GetSubscriptionRequest();
            request.setMobile(msisdn);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            request.setStatus(status);
            // 新会员免费体系，包月记录是否展示
            request.setMemberIncluded(MEMBERINCLUDED);
            
            // modify by hKF48608 at Jan 13, 2012 for REQ-925 begin
            request.setMonthPayType(excludeBrand);
            // modify by hKF48608 at Jan 13, 2012 for REQ-925 end
            
            // GetSubscriptionResponse response = (GetSubscriptionResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getSubScription", request);
            
            // 调用aserver的getSubScription接口
            GetSubscriptionResponse response =
                (GetSubscriptionResponse)PortalServer.getInstance().sendPostRequest("getSubScription", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"status", status}};
                logger.debug("Exit PortalEngine.getSubScription()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询用户订购信息 ，只查询包月专区id列表
     * 
     * @param msisdn 用户手机号码
     * @param start 查询列表开始位置
     * @param pageSize 查询列表显示格式
     * @param status 订购状态
     * @return [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetSubscriptionResponse getContentSubScription(String msisdn, int start, int pageSize, String status,
        String excludeBrand)
        throws PortalException
    {
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询包月专区
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"status", status}};
                logger.debug("Enter PortalEngine.getSubScription()", appInfo);
            }
            
            GetSubscriptionRequest request = new GetSubscriptionRequest();
            request.setMobile(msisdn);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            request.setStatus(status);
            request.setQryScence("" + Types.PORTAL_TERMINAL);
            
            // 新会员免费体系，包月记录是否展示
            request.setMemberIncluded(MEMBERINCLUDED);
            
            // modify by hKF48608 at Jan 13, 2012 for REQ-925 begin
            request.setMonthPayType(excludeBrand);
            // modify by hKF48608 at Jan 13, 2012 for REQ-925 end
            
            GetSubscriptionResponse response =
                (GetSubscriptionResponse)PortalServer.getInstance().sendPostRequest("getSubScription", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"status", status}};
                logger.debug("Exit PortalEngine.getSubScription()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 图书按次订购
     * 
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销产品ID
     * @param bookID 图书ID
     * @param nodeID 目录ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void subscribeBookByTimes(String msisdn, String productID, String promotionID, String bookID, String nodeID,
        String channelCode, String clientVersion, String sourceIp, String clientDiscount, String sLoginType,
        String bearType, String sourceType, boolean isCheckMem, String supportPayType, String idfa, String transId,
        FeeElement feeElement)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeBookByTimes()", appInfo);
            }
            
            // 完成订购
            this.subscribeByTimes(msisdn,
                productID,
                promotionID,
                bookID,
                "",
                BookContants.ORDER_BY_TIMES_TYPE_BOOK,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                isCheckMem,
                supportPayType,
                idfa,
                transId,
                feeElement);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeBookByTimes()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 图书按分册订购<一句话功能简述>
     * 
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param nodeID
     * @param channelCode
     * @param fasciculeID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void subscribeFasciculeByTimes(String msisdn, String productID, String promotionID, String bookID,
        String nodeID, String channelCode, String fasciculeID, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, String supportPayType,
        String idfa, String transId, FeeElement feeElement)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeFasciculeByTimes()", appInfo);
            }
            
            // 完成订购
            this.subscribeByTimes(msisdn,
                productID,
                promotionID,
                bookID,
                "",
                Types.CONTENT_TYPE_FASCICULE,
                nodeID,
                channelCode,
                fasciculeID,
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                false,
                supportPayType,
                idfa,
                transId,
                feeElement);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeFasciculeByTimes()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 单次订购所有章节
     * 
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param chapterID
     * @param nodeID
     * @param channelCode
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void subscribeAllChapter(String msisdn, String productID, String promotionID, String bookID, String nodeID,
        String channelCode, String chapterId, String clientVersion, String sourceIp, String clientDiscount,
        String sLoginType, String bearType, String sourceType, String supportPayType, String idfa, String transId,
        FeeElement feeElement)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeAllChapter()", appInfo);
            }
            
            // 完成订购
            this.subscribeByTimes(msisdn,
                productID,
                promotionID,
                bookID,
                chapterId,
                BookContants.ORDER_BY_TIMES_TYPE_ALLCHAPTER,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                false,
                supportPayType,
                idfa,
                transId,
                feeElement);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeAllChapter()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 单次按章订购
     * 
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param chapterID
     * @param nodeID
     * @param channelCode
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void subscribeChapterByTimes(String msisdn, String productID, String promotionID, String bookID,
        String chapterID, String nodeID, String channelCode, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, boolean isCheckMem,
        String supportPayType, String idfa, String transId, FeeElement feeElement)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"chapterID", chapterID}, {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeChapterByTimes()", appInfo);
            }
            
            // 完成订购
            this.subscribeByTimes(msisdn,
                productID,
                promotionID,
                bookID,
                chapterID,
                BookContants.ORDER_BY_TIMES_TYPE_CHAPTER,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                isCheckMem,
                supportPayType,
                idfa,
                transId,
                feeElement);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"chapterID", chapterID}, {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeChapterByTimes()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 按章批量订购<一句话功能简述>
     * 
     * @param msisdn
     * @param productId
     * @param promotionId
     * @param bookId
     * @param chapterIdList
     * @param accessType
     * @param catalogId
     * @param channelCode
     * @param isUseEquity 是否使用权益订购
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void batchSubscribeChapterByTimes(String msisdn, String productId, String promotionId, String bookId,
        List<String> chapterIdList, String catalogId, String channelCode, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String isUseEquity, String calculatePriceType,
        FeeElement feeElement, String supportPayType, String idfa, String transId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productId}, {"bookID", bookId},
                    {"chapterIDs", chapterIdList.toString()}, {"catalogId", catalogId}};
                logger.debug("Enter PortalEngine.batchSubscribeChapterByTimes()", appInfo);
            }
            
            // modify by hlf add
            BatchOrderPurchaseRequest request = new BatchOrderPurchaseRequest();
            String billChapters = null;
            // 单章订购,按本订购,billChapters为null
            if (1 == chapterIdList.size())
            {
                billChapters = null;
            }
            else
            {
                
                // 客户端请求订购章节列表
                int totalReqChapters = chapterIdList.size();
                // 请求订购第一章ID
                String firstRequChapterID = chapterIdList.get(0);
                // 请求订购最后章节ID
                String lastReqChapterID = chapterIdList.get(totalReqChapters - 1);
                // 拼接字符串
                billChapters = firstRequChapterID + "_" + lastReqChapterID + "_" + totalReqChapters;
            }
            request.setBillChapters(billChapters);
            
            request.setMobile(msisdn);
            request.setProductId(productId);
            request.setPromotionId(promotionId);
            request.setBookId(bookId);
            request.setChapterIdList(chapterIdList);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setCatalogId(catalogId);
            request.setChannelCode(channelCode);
            // modify by ckf24529 IRD-6182 2010-08-10
            request.setUaName(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            isUseEquity = StrUtil.isEq(isUseEquity, Types.FALSE) ? isUseEquity : Types.TRUE;
            request.setIsUseEquity(isUseEquity);
            
            request.setCalculatePriceType(calculatePriceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            
            request.setPortalOrderId(transId);
            request.setFeeElement(feeElement);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 start 2015-08-27
            if (null != feeElement)
            {
                // 请求中多置入批价信息
                request.setFeeElement(feeElement);
            }
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 end 2015-08-27
            
            PortalServer.getInstance().sendPostRequest("batchOrder", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 方法重写---按次订购接口，可以完成按次订购图书和按次订购章节
     * 
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销ID
     * @param bookID 图书ID
     * @param chapterID 章节ID
     * @param orderType 订购类型 0 订购图书； 1 订购章节
     * @param nodeID 目录ID，可以是真实目录，也可以是虚拟目录，比如搜索
     * 
     * @return void [返回类型说明]
     * @throws PortalException
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void subscribeByTimes(String msisdn, String productID, String promotionID, String bookID, String chapterID,
        String orderType, String nodeID, String channelCode, String fasciculeID, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, boolean isCheckMem,
        String supportPayType, String idfa, String portalOrderId, FeeElement feeElement, String billChapters)
        throws PortalException
    {
        try
        {
            PurchaseRequest request = new PurchaseRequest();
            
            // modify by hlf
            request.setBillChapters(billChapters);
            
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setBookId(bookID);
            request.setCatalogId(nodeID);
            request.setChapterId(chapterID);
            request.setContentType(orderType);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setPromotionId(promotionID);
            request.setChannelCode(channelCode);
            request.setFasciculeId(fasciculeID);
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setSourceType(sourceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(portalOrderId);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            if (StrUtil.matchs(orderType, BookContants.ORDER_BY_TIMES_TYPE_BOOK) && isCheckMem)
            {
                String useEquity = "";
                String isDownloadValid = DownloadEquityMemCache.getInstance().getDownloadEquity(msisdn, bookID);
                if (StrUtil.isEq(isDownloadValid, "0"))
                {
                    useEquity = "0";
                }
                request.setUseEquity(useEquity);
            }
            PortalServer.getInstance().sendPostRequest("purchase", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 按次订购接口，可以完成按次订购图书和按次订购章节
     * 
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销ID
     * @param bookID 图书ID
     * @param chapterID 章节ID
     * @param orderType 订购类型 0 订购图书； 1 订购章节
     * @param nodeID 目录ID，可以是真实目录，也可以是虚拟目录，比如搜索
     * 
     * @return void [返回类型说明]
     * @throws PortalException
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void subscribeByTimes(String msisdn, String productID, String promotionID, String bookID, String chapterID,
        String orderType, String nodeID, String channelCode, String fasciculeID, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, boolean isCheckMem,
        String supportPayType, String idfa, String portalOrderId, FeeElement feeElement)
        throws PortalException
    {
        try
        {
            PurchaseRequest request = new PurchaseRequest();
            
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setBookId(bookID);
            request.setCatalogId(nodeID);
            request.setChapterId(chapterID);
            request.setContentType(orderType);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setPromotionId(promotionID);
            request.setChannelCode(channelCode);
            request.setFasciculeId(fasciculeID);
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setSourceType(sourceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(portalOrderId);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            if (StrUtil.matchs(orderType, BookContants.ORDER_BY_TIMES_TYPE_BOOK) && isCheckMem)
            {
                String useEquity = "";
                String isDownloadValid = DownloadEquityMemCache.getInstance().getDownloadEquity(msisdn, bookID);
                if (StrUtil.isEq(isDownloadValid, "0"))
                {
                    useEquity = "0";
                }
                request.setUseEquity(useEquity);
            }
            PortalServer.getInstance().sendPostRequest("purchase", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 按次订购查询接口
     * 
     * @param msisdn 用户手机号码
     * @param start 起始位置
     * @param count 查询个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetSingleSubscriptionResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetSingleSubscriptionResponse getSingleSubscription(String msisdn, int start, int count,
        String clientVersion, String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getSingleSubscription()", new String[][] {{"msisdn", msisdn}});
            }
            
            // 构造请求报文
            GetSingleSubscriptionRequest request = new GetSingleSubscriptionRequest();
            request.setMobile(msisdn);
            request.setCount(String.valueOf(count));
            request.setStart(String.valueOf(start));
            request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
            request.setContentType(contentType);
            
            GetSingleSubscriptionResponse response = (GetSingleSubscriptionResponse)PortalServer.getInstance()
                .sendPostRequest("getSingleSubscription", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getSingleSubscription()", new String[][] {{"msisdn", msisdn}});
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 获取用户订购指定包月专区信接口
     * 
     * @param msisdn 用户手机号码
     * @param catalogId 专区id
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetCatalogSubscribeResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetCatalogSubscribeResponse getCatalogSubscribeInfo(String msisdn, String catalogId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getCatalogSubscribeInfo()",
                    new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}});
            }
            
            // 构造请求报文
            GetCatalogSubscribeRequeset request = new GetCatalogSubscribeRequeset();
            request.setMsisdn(msisdn);
            request.setCatalogId(catalogId);
            
            GetCatalogSubscribeResponse response = (GetCatalogSubscribeResponse)PortalServer.getInstance()
                .sendPostRequest("getCatalogSubscribeInfo", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getCatalogSubscribeInfo()",
                    new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}});
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 按次订购查询增强接口
     * 
     * @param msisdn 用户手机号码
     * @param start 起始位置
     * @param count 查询个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetSingleSubscriptionResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetClientSingleSubResponse getClientSingleSubscription(String msisdn, int start, int count,
        String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getSingleSubscription()", new String[][] {{"msisdn", msisdn}});
            }
            
            // 构造请求报文
            GetSingleSubscriptionRequest request = new GetSingleSubscriptionRequest();
            request.setMobile(msisdn);
            request.setCount(String.valueOf(count));
            request.setStart(String.valueOf(start));
            request.setContentType(contentType);
            request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
            
            GetClientSingleSubResponse response =
                (GetClientSingleSubResponse)PortalServer.getInstance().sendPostRequest("getClientSingleSubs", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getSingleSubscription()", new String[][] {{"msisdn", msisdn}});
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 按次订购查询记录总数接口
     * 
     * @param msisdn 用户手机号码
     * @return int
     * @throws PortalException [参数说明]
     * 
     * @return GetSingleSubscriptionResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public int getSubCarToonRecordCount(String msisdn)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getSubCarToonRecordCount()", new String[][] {{"msisdn", msisdn}});
            }
            
            // 构造请求报文
            GetSingleSubscriptionRequest request = new GetSingleSubscriptionRequest();
            request.setMobile(msisdn);
            
            GetSingleSubscriptionResponse response = (GetSingleSubscriptionResponse)PortalServer.getInstance()
                .sendPostRequest("getSubCarToonRecordCount", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getSubCarToonRecordCount()", new String[][] {{"msisdn", msisdn}});
            }
            
            return response.getTotalRecordCount();
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 查询产品ID
     * 
     * @param contentId 内容ID
     * @param contentType 内容类型
     * @return productId 产品ID
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String getProductId(String contentId, String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
                logger.debug("Enter PortalEngine.getProductId()", appInfo);
            }
            
            GetProductInfoListRequest request = new GetProductInfoListRequest();
            
            request.setContentId(contentId);
            request.setContentType(contentType);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            GetProductInfoListResponse response =
                (GetProductInfoListResponse)PortalServer.getInstance().sendPostRequest("getProductInfoList", request);
            List<ProductInfo> productInfoList = response.getProductInfolist();
            
            ProductInfo productInfo = null;
            if (productInfoList != null && productInfoList.size() > 0)
            {
                productInfo = productInfoList.get(0);
            }
            else
            {
                String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
                logger.error("PortalEngine.getProductId() productInfoList is null", appInfo);
            }
            
            String productId = null;
            if (productInfo != null)
            {
                productId = productInfo.getProductId();
            }
            else
            {
                String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
                logger.error("PortalEngine.getProductId() productInfo is null", appInfo);
            }
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
                logger.debug("Exit PortalEngine.getProductId()", appInfo);
            }
            
            return productId;
        }
        catch (PortalException e)
        {
            String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
            logger.debug("PortalEngine.getProductId() productInfo is PortalException", appInfo);
            throw e;
        }
        catch (Throwable t)
        {
            String[][] appInfo = {{"contentId", contentId}, {"contentType", contentType}};
            logger.debug("PortalEngine.getProductId() productInfo is Throwable", appInfo);
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 查询产品信息
     * 
     * @param contentId 内容ID
     * @param contentType 内容类型
     * @param productId 产品ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ProductInfo getProductInfo(String contentId, String contentType, String productId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"productId", productId}};
                logger.debug("Enter PortalEngine.getProductInfo()", appInfo);
            }
            
            GetProductInfoRequest request = new GetProductInfoRequest();
            request.setContentId(contentId);
            request.setContentType(contentType);
            request.setProductId(productId);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            GetProductInfoResponse response =
                (GetProductInfoResponse)PortalServer.getInstance().sendPostRequest("getProductInfo", request);
            
            ProductInfo productInfo = response.getProductInfo();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"productId", productId}};
                logger.debug("Exit PortalEngine.getProductInfo()", appInfo);
            }
            
            return productInfo;
        }
        catch (PortalException e)
        {
            String[][] appInfo = {{"productId", productId}};
            logger.error("PortalEngine.getProductInfo() is PortalException", appInfo);
            throw e;
        }
        catch (Throwable t)
        {
            String[][] appInfo = {{"productId", productId}};
            logger.error("PortalEngine.getProductInfo() is Throwable", appInfo);
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 添加系统书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @param chapterId 章节ID
     * @param position 章节位置
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addSystemBookMark(String msisdn, String bookID, String chapterId, int position)
        throws PortalException
    {
        this.addBookmark(msisdn, bookID, chapterId, String.valueOf(Types.SYSTEM_BOOKMARK), position, null, null);
    }
    
    /**
     * 添加用户书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @param chapterId 章节ID
     * @param position 章节位置
     * @param markType 书签类型。0：用户书签，3：书架书签
     * @param addTime 书签添加时间
     * @param quote 书签引文
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addUserBookMark(String msisdn, String bookID, String chapterId, int position, String markType,
        String addTime, String quote)
        throws PortalException
    {
        this.addBookmark(msisdn, bookID, chapterId, markType, position, addTime, quote);
    }
    
    /**
     * 添加用户书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @param chapterId 章节ID
     * @param markType 书签类型（系统书签和用户书签）
     * @param position 章节内字数偏移
     * @param addTime 书签添加时间
     * @param quote 书签引文
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void addBookmark(String msisdn, String bookID, String chapterId, String markType, int position,
        String addTime, String quote)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"msisdn", msisdn}, {"bookID", bookID}, {"chapterId", chapterId}, {"markType", markType},
                        {"position", String.valueOf(position)}, {"addTime", addTime}, {"quote", quote}};
                logger.debug("Enter PortalEngine.addBookmark()", appInfo);
            }
            
            BookItem bookItem = PortalCacheManager.getBookInfo(bookID);
            
            if (null == bookItem)
            {
                logger.error("PortalEngine.addBookmark(): BookItem is null");
                throw new PortalException(String.valueOf(TerminalCodes.INVAL_BOOKID), "BookItem is null");
            }
            
            if (!Types.MAGAZINE_TYPE.equals(bookItem.getItemType()))
            {
                ChapterItem chapterItem = PortalCacheManager.getChapterInfo(bookID, chapterId);
                
                if (null == chapterItem)
                {
                    logger.error("PortalEngine.addBookmark(): ChapterItem is null");
                    throw new PortalException(String.valueOf(TerminalCodes.CHAPTERITEM_IS_NULL), "ChapterItem is null");
                }
            }
            
            AddBookmarkRequest request = new AddBookmarkRequest();
            request.setMobile(msisdn);
            request.setBookId(bookID);
            request.setChapterId(chapterId);
            request.setBookmarkType(String.valueOf(markType));
            request.setPosition(String.valueOf(position));
            request.setUserBookmarkTime(addTime);
            request.setQuote(quote);
            
            PortalServer.getInstance().sendPostRequest("addBookmark", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookID", bookID}, {"chapterId", chapterId},
                    {"markType", markType}, {"position", String.valueOf(position)}};
                logger.debug("Exit PortalEngine.addBookmark()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询用户系统书签
     * 
     * @param msisdn 用户手机号码
     * @param pageSize 查询个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getSystemBookMarks(String msisdn, int pageSize, String contentType)
        throws PortalException
    {
        return this.getBookMarks(msisdn, "", String.valueOf(Types.SYSTEM_BOOKMARK), 1, pageSize, contentType);
    }
    
    /**
     * 查询用户某本书的系统书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getSystemBookMarks(String msisdn, String bookID, String contentType)
        throws PortalException
    {
        return this.getBookMarks(msisdn, bookID, Types.SYSTEM_BOOKMARK, 0, 0, contentType);
    }
    
    /**
     * 查询用户系统书签
     * 
     * @param msisdn 用户手机号码
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getSystemBookMarks(String msisdn, String contentType)
        throws PortalException
    {
        return this.getBookMarks(msisdn, "", Types.SYSTEM_BOOKMARK, 0, 0, contentType);
    }
    
    /**
     * 查询用户系统书签 add by kf27344
     * 
     * @param msisdn 用户手机号码
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getSystemBookMarksNew(String msisdn, int start, int count, String contentType)
        throws PortalException
    {
        return this.getBookMarks(msisdn, "", String.valueOf(Types.SYSTEM_BOOKMARK), start, count, contentType);
    }
    
    /**
     * 根据书签类型查询用户书签或书架书签
     * 
     * @param msisdn 用户手机号码
     * @param start 起始位置
     * @param count 查询个数
     * @param markType 书签类型。0：用户书签，1：书架书签，4：用户+书架书签
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getUserBookMarks(String msisdn, int start, int count, String contentType,
        String markType)
        throws PortalException
    {
        // return this.getBookMarks(msisdn, "",
        // String.valueOf(Types.USER_BOOKMARK), start, count, contentType);
        return this.getBookMarks(msisdn, "", markType, start, count, contentType);
    }
    
    /**
     * 查询用户某一本书的书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @param markType 书签类型
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getMarksOfBook(String msisdn, String bookID, String markType, String contentType)
        throws PortalException
    {
        if (null == markType || 0 == markType.length())
        {
            markType = "0";
        }
        
        return this.getBookMarks(msisdn, bookID, markType, 0, 0, contentType);
    }
    
    /**
     * 查询用户书签
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @param markType 书签类型 0 用户书签；1 系统书签
     * @param start 书签起始位置
     * @param count 查询书签个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookmarkResponse getBookMarks(String msisdn, String bookID, String markType, int start, int count,
        String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isInfoEnable())
            {
                logger.info("****** Enter PortalEngine.getBookMarks() ******");
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookID", bookID}, {"markType", markType},
                    {"start", String.valueOf(start)}, {"count", String.valueOf(count)}, {"contentType", contentType}};
                logger.debug("PortalEngine.getBookMarks() params = ", appInfo);
            }
            
            GetBookmarkRequest request = new GetBookmarkRequest();
            request.setBookId(bookID);
            request.setMobile(msisdn);
            request.setBookmarkType(markType);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setContentType(contentType);
            GetBookmarkResponse response =
                (GetBookmarkResponse)PortalServer.getInstance().sendPostRequest("getBookmark", request);
            
            // 如果书签类型是3或4，则调用server查询是否有偷书标识
            if (isUserType(markType) && (null != response))
            {
                if (logger.isDebugEnable())
                {
                    logger.debug(
                        "PortalEngine.getBookMarks(), if markType is 3or4, request server to query isSteal flag, markType is"
                            + markType);
                }
                List<BookmarkInfo> resultList = getRequestList(msisdn, response.getBookmarkList());
                response.setBookmarkList(resultList);
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getBookMarks() GetBookmarkResponse = " + response);
            }
            
            if (logger.isInfoEnable())
            {
                logger.info("****** Exit PortalEngine.getBookMarks() ******");
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 组装请求server偷书标识的请求列表
     * 
     * @author lWX238669
     * @param msisdn 手机号码
     * @param bookmarkList 书签信息
     * @return List<BookmarkInfo> 请求列表
     * @throws PortalException
     */
    public List<BookmarkInfo> getRequestList(String msisdn, List<BookmarkInfo> bookMarkInfoList)
        throws PortalException
    {
        List<StealBookInfo> stealBookInfoList = new ArrayList<StealBookInfo>();
        
        // 封装请求server的参数列表
        if (Util.isNotEmpty(bookMarkInfoList))
        {
            for (BookmarkInfo bookMarkInfo : bookMarkInfoList)
            {
                StealBookInfo stealBookInfo = new StealBookInfo();
                // 只有书签类型是3的时候，才查询是否含有偷书标识
                if (StrUtil.isEq(BookmarkType.SHELF, bookMarkInfo.getBookmarkType()))
                {
                    stealBookInfo.setBookid(bookMarkInfo.getBookId());
                    stealBookInfo.setBookmarkId(bookMarkInfo.getBookmarkId());
                }
                stealBookInfoList.add(stealBookInfo);
            }
        }
        
        // 设置请求server的request
        StealBookFlagRequest stealFlagReq = new StealBookFlagRequest();
        stealFlagReq.setBatchStealBookList(stealBookInfoList);
        stealFlagReq.setMsisdn(msisdn);
        
        dLog.debug("request server's getBatchStealBookFlag interface,request:", stealFlagReq.toString());
        
        // 请求主server平台,查询用户偷书信息
        StealBookFlagResponse stealFlagRes =
            (StealBookFlagResponse)PortalServer.getInstance().sendPostRequest("getBatchStealBookFlag", stealFlagReq);
        
        dLog.debug("response server's getBatchStealBookFlag interface:" + stealFlagRes);
        
        if (null != stealFlagRes)
        {
            // 取出server返回的书签信息
            List<BookmarkInfo> stealBookInfoResultList = stealFlagRes.getStealBookList();
            
            if (null != stealBookInfoResultList)
            {
                // 以手机号码作为key
                Map<String, BookmarkInfo> BookmarkMap = new HashMap<String, BookmarkInfo>();
                for (BookmarkInfo bookmarkFromServer : stealBookInfoResultList)
                {
                    // 手机号和图书id作为一个key值，保存成一个map对象供下面使用
                    BookmarkMap.put(bookmarkFromServer.getMsisdn() + "_" + bookmarkFromServer.getBookId() + "_"
                        + bookmarkFromServer.getBookmarkId(), bookmarkFromServer);
                }
                
                // 遍历结果集，把从server查询到的含有标识赋值给原结果
                for (BookmarkInfo bookmarkOld : bookMarkInfoList)
                {
                    BookmarkInfo isStealBookInfo =
                        BookmarkMap.get(msisdn + "_" + bookmarkOld.getBookId() + "_" + bookmarkOld.getBookmarkId());
                    
                    if (isStealBookInfo != null)
                    {
                        bookmarkOld.setIsSteal(isStealBookInfo.getIsSteal());
                        bookmarkOld.setRemainDay(isStealBookInfo.getRemainDay());
                    }
                }
            }
        }
        
        return bookMarkInfoList;
    }
    
    /**
     * 查询是否是书架书签或用户书签
     * 
     * @author lWX238669
     * @param markType 书签类型
     * @return boolean 是/否
     */
    private boolean isUserType(String markType)
    {
        return StrUtil.matchs(markType, BookmarkType.SHELF, BookmarkType.USERADNSHELF);
    }
    
    /**
     * 获取用户书签（只用于getNewBookmark接口，解决性能问题）
     * 
     * 该接口用于按内容进行分页，获取用户书签列表。 假设用户有100条用户书签，共20本书，每本书有5个书签，分页参数传start=1
     * count=10，则Server返回前10本书（内容排序规则见下面）的所有书签，共返回50条记录，响应消息中bookCount=20； 内容排序规则：按内容下最新的用户书签创建时间倒序排列，即最近添加过用户书签的书籍排在前面
     * 
     * @author zKF39164
     * @param msisdn 手机号
     * @param contentType 内容类型
     * @param bookStart 内容分页的开始条数
     * @param bookCount 内容分页的显示条数
     * @param markType 书签类型
     * @throws PortalException
     */
    public GetUserBookmarkPageByBookResponse getUserBookmarkPageByBook(String msisdn, String contentType, int bookStart,
        int bookCount, String markType)
        throws PortalException
    {
        GetUserBookmarkPageByBookResponse response = null;
        try
        {
            GetUserBookmarkPageByBookRequest request = new GetUserBookmarkPageByBookRequest();
            request.setMobile(msisdn);
            request.setContentType(contentType);
            request.setStart(String.valueOf(bookStart));
            request.setCount(String.valueOf(bookCount));
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            // 是否返回图书的总条数(必须)
            request.setRequestBookCount(Types.TRUE);
            request.setBookmarkType(markType);
            
            response = (GetUserBookmarkPageByBookResponse)PortalServer.getInstance()
                .sendPostRequest("getUserBookmarkPageByBook", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        return response;
    }
    
    /**
     * 删除用户书签
     * 
     * @param msisdn 用户手机号码
     * @param markID 书签ID
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteBookMark(String msisdn, String markID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"markID", markID}};
                logger.debug("Enter PortalEngine.deleteBookMark()", appInfo);
            }
            
            DeleteBookmarkRequest request = new DeleteBookmarkRequest();
            request.setBookmarkId(markID);
            request.setUserId(msisdn);
            
            PortalServer.getInstance().sendPostRequest("deleteBookmark", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"markID", markID}};
                logger.debug("Exit PortalEngine.deleteBookMark()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 删除用户书签
     * 
     * @param msisdn 用户手机号码
     * @param markID 书签ID
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void deleteBookMark(String msisdn, String markID, String bookId, String markType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"markID", markID}};
                logger.debug("Enter PortalEngine.deleteBookMark()", appInfo);
            }
            
            DeleteBookmarkRequest request = new DeleteBookmarkRequest();
            request.setBookmarkId(markID);
            request.setMobile(msisdn);
            request.setBookId(bookId);
            request.setBookmarkType(markType);
            
            PortalServer.getInstance().sendPostRequest("deleteBookmark", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"markID", markID}};
                logger.debug("Exit PortalEngine.deleteBookMark()", appInfo);
            }
        }
        catch (PortalException e)
        {
            if (logger.isErrorEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"markID", markID}};
                logger.error("PortalEngine.deleteBookMark() Failed", appInfo, e);
            }
        }
    }
    
    /**
     * 删除用户书签
     * 
     * @param msisdn 用户手机号码
     * @param markID 书签ID
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void batchDeleteBookMark(String msisdn, List<String> bookmarkIdList, String bookId, String markType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.deleteBookMark()", appInfo);
            }
            
            BatchAddBookmarkRequest request = new BatchAddBookmarkRequest();
            List<BookmarkInfo> bookmarkInfoList = new ArrayList<BookmarkInfo>();
            
            BookmarkInfo bi = null;
            for (String bookmarkid : bookmarkIdList)
            {
                bi = new BookmarkInfo();
                bi.setBookmarkId(bookmarkid);
                bi.setBookId(bookId);
                bi.setBookmarkType(markType);
                bi.setOperation(Types.DEL_BOOKMARK);
                
                bookmarkInfoList.add(bi);
            }
            request.setMsisdn(msisdn);
            request.setBookmarkList(bookmarkInfoList);
            
            PortalServer.getInstance().sendPostRequest("batchAddBookmark", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.deleteBookMark()");
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 删除用户书签
     * 
     * @param msisdn 用户手机号码
     * @param markID 书签ID
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void batchDeleteBookMarkByBookId(String msisdn, String bookMarkId, List<String> bookIds, String markType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.deleteBookMark()", appInfo);
            }
            
            BatchAddBookmarkRequest request = new BatchAddBookmarkRequest();
            List<BookmarkInfo> bookmarkInfoList = new ArrayList<BookmarkInfo>();
            
            BookmarkInfo bi = null;
            for (String bookId : bookIds)
            {
                bi = new BookmarkInfo();
                bi.setBookmarkId(bookMarkId);
                bi.setBookId(bookId);
                bi.setBookmarkType(markType);
                bi.setOperation(Types.DEL_BOOKMARK);
                bookmarkInfoList.add(bi);
            }
            request.setMsisdn(msisdn);
            request.setBookmarkList(bookmarkInfoList);
            
            PortalServer.getInstance().sendPostRequest("batchAddBookmark", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.deleteBookMark()");
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 删除一本书的所有书签
     * 
     * @param msisdn 用户手机号码
     * @param bookId 书项ID
     * @param markType 书签类型
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteOneBookBookMark(String msisdn, String bookId, String markType)
        throws PortalException
    {
        deleteBookMark(msisdn, "", bookId, markType);
    }
    
    /**
     * 删除书签（根据 书签ID删除书签）
     * 
     * @param markID 书签ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteBookmark(String msisdn, String markID)
        throws PortalException
    
    {
        deleteBookMark(msisdn, markID, "", Types.ALL_BOOKMARK);
    }
    
    /**
     * 
     * 删除书签（根据 书签ID删除书签）
     * 
     * @param msisdn uid
     * @param bookId 图书id
     * @throws PortalException 异常
     */
    public void deleteBookmarkByBookId(String msisdn, String bookId)
        throws PortalException
    
    {
        deleteBookMark(msisdn, "", bookId, Types.ALL_BOOKMARK);
    }
    
    /**
     * 删除书签（根据 书签ID删除书签）
     * 
     * @param bookmarkIdList 书签ID列表
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void batchDeleteBookmark(String msisdn, List<String> bookmarkIdList)
        throws PortalException
    
    {
        batchDeleteBookMark(msisdn, bookmarkIdList, "", Types.ALL_BOOKMARK);
    }
    
    /**
     * 删除书签（根据 书签ID删除书签）
     * 
     * @param bookIds 书签ID列表
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void batchDeleteBookmarkByBookId(String msisdn, List<String> bookIds)
        throws PortalException
    
    {
        batchDeleteBookMarkByBookId(msisdn, "", bookIds, Types.ALL_BOOKMARK);
    }
    
    /**
     * 批量添加书签
     * 
     * @param bookmarks 书签列表
     * @throws PortalException [参数说明]
     * 
     * @return BatchAddBookmarkResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BatchAddBookmarkResponse batchAddBookmark(String msisdn, List<Bookmark> bookmarks)
        throws PortalException
    
    {
        return batchAddBookMark(msisdn, bookmarks);
    }
    
    /**
     * 批量添加书签
     * 
     * @param msisdn
     * @param bookmarks 书签列表
     * @throws PortalException
     */
    private BatchAddBookmarkResponse batchAddBookMark(String msisdn, List<Bookmark> bookmarks)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.batchAddBookMark()", appInfo);
            }
            
            BatchAddBookmarkRequest request = new BatchAddBookmarkRequest();
            List<BookmarkInfo> bookmarkInfoList = new ArrayList<BookmarkInfo>();
            
            BookmarkInfo bi = null;
            for (Bookmark bookmark : bookmarks)
            {
                bi = new BookmarkInfo();
                bi.setMsisdn(msisdn);
                bi.setBookId(bookmark.getContentId());
                bi.setChapterId(bookmark.getChapterId());
                bi.setPosition(bookmark.getPosition());
                bi.setBookmarkType(DefineConstant.BOOKSHELF_MARK);
                bi.setOperation(Types.ADD_BOOKMARK);
                
                bookmarkInfoList.add(bi);
            }
            request.setMsisdn(msisdn);
            request.setBookmarkList(bookmarkInfoList);
            
            BatchAddBookmarkResponse resp =
                (BatchAddBookmarkResponse)PortalServer.getInstance().sendPostRequest("batchAddBookmark", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.batchAddBookMark()");
            }
            return resp;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 删除所有系统书签
     * 
     * @param moblie 手机号码
     * @param markType 书签类型
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteSysBookmark(String msisdn)
        throws PortalException
    {
        String markType = Types.SYSTEM_BOOKMARK;
        deleteBookMark(msisdn, "", "", markType);
    }
    
    /**
     * 删除所有用户书签
     * 
     * @param moblie 手机号码
     * @param markType 书签类型
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteUserBookmark(String msisdn, String markType)
        throws PortalException
    {
        deleteBookMark(msisdn, "", "", markType);
    }
    
    /**
     * 添加用收藏夹
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addFavorite(String msisdn, String bookId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}};
                logger.debug("Enter PortalEngine.addFavorite()", appInfo);
            }
            
            AddFavoriteRequest request = new AddFavoriteRequest();
            request.setBookId(bookId);
            request.setMobile(msisdn);
            
            PortalServer.getInstance().sendPostRequest("addFavorite", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}};
                logger.debug("Exit PortalEngine.addFavorite()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询用户收藏夹记录
     * 
     * @param msisdn 用户手机号码
     * @param start 起始位置
     * @param count 查询个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ResultForm getFavorite(String msisdn, int start, int count, String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getFavorite()", appInfo);
            }
            
            // 构造发送请求报文
            GetFavoriteRequest request = new GetFavoriteRequest();
            request.setMobile(msisdn);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setContentType(contentType);
            GetFavoriteResponse response =
                (GetFavoriteResponse)PortalServer.getInstance().sendPostRequest("getFavorite", request);
            List<FavoriteInfo> list = response.getFavoriteInfoList();
            
            // 从结果中解析内容ID数组
            String[] bookIDs = null;
            ResultForm resultForm = null;
            if (null != list && 0 != list.size())
            {
                bookIDs = new String[list.size()];
                FavoriteInfo favoriteInfo = null;
                for (int i = 0; i < list.size(); i++)
                {
                    favoriteInfo = list.get(i);
                    if (null == favoriteInfo)
                    {
                        continue;
                    }
                    
                    bookIDs[i] = favoriteInfo.getBookId();
                }
                
                resultForm = new ResultForm();
                
                // 设置虚拟目录为收藏夹
                resultForm.setNodeID(BookContants.VNODEID_FAVORITE);
                
                // 总记录数
                resultForm.setTotalSize(response.getTotalRecordCount());
                
                // 分页图书ID数组
                resultForm.setPageBookIDs(bookIDs);
                resultForm.setStart(start);
                resultForm.setPageSize(count);
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.getFavorite()", appInfo);
            }
            
            return resultForm;
        }
        catch (PortalException e)
        {
            logger.error("Get Favorite failed!", new String[][] {{"msisdn", msisdn}}, e);
            throw e;
        }
    }
    
    /**
     * 取消收藏
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteFavorite(String msisdn, String bookID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookID", bookID}};
                logger.debug("Enter PortalEngine.deleteFavorite()", appInfo);
            }
            
            DeleteFavoriteRequest request = new DeleteFavoriteRequest();
            request.setBookId(bookID);
            request.setMobile(msisdn);
            
            PortalServer.getInstance().sendPostRequest("deleteFavorite", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"bookID", bookID}};
                logger.debug("Exit PortalEngine.deleteFavorite()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 用户推荐接口，发生推荐push消息
     * 
     * @param srcMdn 推荐发起方手机号码
     * @param destMdn 推荐接收方手机号码
     * @param message push消息内容
     * @param pushURL 用户访问url
     * @param type 推荐类型 1:推荐好友内容;2:推荐好友业务
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void recommend(String srcMdn, String destMdn, String message, String pushURL, String type,
        String contentType, String bookId, String leaveword)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"srcMdn", srcMdn}, {"destMdn", destMdn}, {"message", message}, {"pushURL", pushURL}};
                logger.debug("Enter PortalEngine.recommend()", appInfo);
            }
            
            // 构造发生请求报文
            AddStaInMessageRequest request = new AddStaInMessageRequest();
            /* *** Mod by tKF16908 for IDR-1993 at <2009-8-28> begin *** */
            request.setContentId(bookId);
            request.setContentType(contentType);
            request.setMessage(message);
            request.setRecMsisdn(destMdn);
            request.setSendMsisdn(srcMdn);
            request.setUrl(pushURL);
            request.setType(type);
            request.setShortMessage(leaveword);
            /* *** Mod by tKF16908 for IDR-1993 at <2009-8-28> end *** */
            // modify by hKF48608 at Nov 1, 2011 for IRD-20511 begin
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            // modify by hKF48608 at Nov 1, 2011 for IRD-20511 end
            
            PortalServer.getInstance().sendPostRequest("addCommendStaInMessage", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"srcMdn", srcMdn}, {"destMdn", destMdn}, {"message", message}, {"pushURL", pushURL}};
                logger.debug("Exit PortalEngine.recommend()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 获取推荐事务ID
     * 
     * @param srcMdn
     * @param destMdn
     * @param marketType
     * @param contentId
     * @param nodeId
     * @param portalType
     * @return [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String getTransaction(String srcMdn, String destMdn, String marketType, String contentId, String nodeId,
        String portalType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getTransaction()");
            }
            
            GetTransactionRequest request = new GetTransactionRequest();
            request.setSrcMdn(srcMdn);
            request.setDestMdn(destMdn);
            request.setMarketType(marketType);
            request.setContentId(contentId);
            request.setCatalogId(nodeId);
            request.setPortalType(portalType);
            
            // 生成请求报文，并发送http请求
            GetTransactionResponse response =
                (GetTransactionResponse)PortalServer.getInstance().sendPostRequest("getTransaction", request);
            
            String tsid = null;
            if (response != null)
            {
                tsid = response.getTsId();
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getTransaction()");
            }
            
            return tsid;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据父节点查询子节点信息
     * 
     * @param nodeID 节点ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String[] getChildNodeList(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getChildNodeList()", appInfo);
            }
            
            GetCatalogRequest request = new GetCatalogRequest();
            request.setNodeId(nodeID);
            
            GetCatalogResponse response =
                (GetCatalogResponse)PortalServer.getInstance().sendPostRequest("getCatalog", request);
            
            // 转换为NodeInfo对象数组
            List<NodeInfo> catalogList = response.getNodeList();
            
            String[] childNodeIDs = null;
            if (null != catalogList && 0 != catalogList.size())
            {
                childNodeIDs = new String[catalogList.size()];
                NodeInfo catalogInfo = null;
                for (int i = 0; i < catalogList.size(); i++)
                {
                    catalogInfo = catalogList.get(i);
                    childNodeIDs[i] = catalogInfo.getId();
                }
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getChildNodeList()", appInfo);
            }
            return childNodeIDs;
        }
        catch (PortalException e)
        {
            logger.error("", e);
            throw e;
        }
    }
    
    /**
     * <一句话功能简述>
     * 
     * @param authorID [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public AuthorInfo getAuthorInfo(String authorID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"authorID", authorID}};
                logger.debug("Enter PortalEngine.getAuthorInfo()", appInfo);
            }
            
            if (null == authorID || "".equals(authorID.trim()))
            {
                logger.error("authorID is null");
                return null;
            }
            
            GetAuthorInfoRequest request = new GetAuthorInfoRequest();
            request.setAuthorId(authorID);
            
            // GetAuthorInfoResponse response = (GetAuthorInfoResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getAuthorInfo", request);
            
            // 调用aserver的getAuthorInfo
            GetAuthorInfoResponse response =
                (GetAuthorInfoResponse)PortalServer.getInstance().sendPostRequest("getAuthorInfo", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"authorID", authorID}};
                logger.debug("Exit PortalEngine.getAuthorInfo()", appInfo);
            }
            
            return response.getAuthorInfo();
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据作家ID查询作家的作品
     * 
     * @param authorID 作家ID
     * @param start 起始位置
     * @param pageSize 显示个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetAuthorBookInfoResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ResultForm getAuthorBookIDs(String authorID, int start, int pageSize)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAuthorBookIDs()", new String[][] {{"authorID", authorID}});
        }
        try
        {
            GetAuthorBookInfoRequest request = new GetAuthorBookInfoRequest();
            request.setAuthorId(authorID);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            GetAuthorBookInfoResponse response =
                (GetAuthorBookInfoResponse)PortalServer.getInstance().sendPostRequest("getAuthorBookInfo", request);
            List<BookInfo> bookList = response.getBookInfoList();
            
            ResultForm resultForm = null;
            if (null != bookList && 0 != bookList.size())
            {
                resultForm = getResultForm(BookContants.VNODEID_AUTHOR,
                    start,
                    pageSize,
                    response.getTotalRecordCount(),
                    bookList,
                    "");
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getAuthorBookIDs()", new String[][] {{"authorID", authorID}});
            }
            
            return resultForm;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据节点ID查询节点信息
     * 
     * @param nodeID
     * @return [参数说明]
     * 
     * @return CatalogInfo [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public NodeItem getNodeInfo(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getNodeInfo()", appInfo);
            }
            
            GetCatalogInfoRequest request = new GetCatalogInfoRequest();
            request.setNodeId(nodeID);
            
            GetCatalogInfoResponse response =
                (GetCatalogInfoResponse)PortalServer.getInstance().sendPostRequest("getCatalogInfo", request);
            
            NodeInfo nodeInfo = response.getNodeInfo();
            
            NodeItem nodeItem = BookCacheManager.getInstance().buildNodeItem(nodeInfo);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getNodeInfo()", appInfo);
            }
            
            return nodeItem;
        }
        catch (PortalException e)
        {
            String[][] appInfo = {{"nodeID", nodeID}};
            logger.error("PortalEngine.getNodeInfo is exception", appInfo, e);
            throw e;
        }
    }
    
    /**
     * 根据栏目查询栏目下图书ID数组
     * 
     * @param nodeID 栏目ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String[] getBookIDs(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getBookIDs()", appInfo);
            }
            
            GetBookListRequest request = new GetBookListRequest();
            request.setCatalogId(nodeID);
            request.setStart(String.valueOf(0));
            request.setCount(String.valueOf(0));
            
            GetBookListResponse response =
                (GetBookListResponse)PortalServer.getInstance().sendPostRequest("getBookList", request);
            // 构造请求报文xml
            
            List<BookInfo> contentInfoList = response.getBookInfoList();
            
            String[] bookIds = null;
            if (null != contentInfoList && 0 != contentInfoList.size())
            {
                bookIds = new String[contentInfoList.size()];
                BookInfo bookInfo = null;
                for (int i = 0; i < contentInfoList.size(); i++)
                {
                    bookInfo = contentInfoList.get(i);
                    if (null == bookInfo)
                    {
                        continue;
                    }
                    
                    bookIds[i] = bookInfo.getBookId();
                }
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getBookIDs()", appInfo);
            }
            
            return bookIds;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据栏目查询栏目下图书ID数组(分为置顶和不置顶)
     * 
     * @param nodeID 栏目ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBookListWithTopResponse getBookIDsWithTop(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getBookIDsWithTop()", appInfo);
            }
            
            GetBookListWithTopRequest request = new GetBookListWithTopRequest();
            request.setCatalogId(nodeID);
            
            GetBookListWithTopResponse response =
                (GetBookListWithTopResponse)PortalServer.getInstance().sendPostRequest("getBookListWithTop", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getBookIDsWithTop()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    // add by ykf13180 2010-01-20 begin
    /**
     * 根据栏目查询栏目下图书ID数组(分为一级置顶、二级置顶和不置顶)
     * 
     * @param nodeID 栏目ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetLimitBooksWithPartResponse getGradBookIDs(String nodeID, String provinceId, String cityId,
        String topLevel)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"nodeID", nodeID}, {"provinceId", provinceId}, {"cityId", cityId}, {"topLevel", topLevel}};
                logger.debug("Enter PortalEngine.getGradBookIDs()", appInfo);
            }
            
            GetBookListWithPartRequest request = new GetBookListWithPartRequest();
            request.setCatalogId(nodeID);
            request.setProvinceId(provinceId);
            request.setCityId(cityId);
            request.setTopLevel(topLevel);
            request.setSortType(SystemConstants.SORT_NEW_TYPE);
            
            GetLimitBooksWithPartResponse response = (GetLimitBooksWithPartResponse)PortalServer.getInstance()
                .sendPostRequest("getLimitBooksWithPart", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"nodeID", nodeID}, {"provinceId", provinceId}, {"cityId", cityId}, {"topLevel", topLevel}};
                logger.debug("Exit PortalEngine.getGradBookIDs()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据图书ID查询图书信息
     * 
     * @param bookId 指定的图书ID
     * @return 指定图书ID的图书信息
     * @throws PortalException [参数说明]
     * 
     * @return BookItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BookItem getBookProductInfo(String bookId)
        throws PortalException
    {
        if (Util.isEmpty(bookId))
        {
            logger.error("bookId is null");
            return null;
        }
        
        BookItem bookItem = null;
        List<String> bookIdLst = new ArrayList<String>();
        bookIdLst.add(bookId);
        List<BookItem> bookItemLst = getBatchBookProductInfo(bookIdLst);
        if (Util.isEmpty(bookItemLst))
        {
            logger.error("bookItemLst is null,bookId=" + bookId);
            return null;
        }
        
        bookItem = bookItemLst.get(0);
        return bookItem;
    }
    
    /**
     * 查询指定图书列表对应的图书
     * 
     * @param bookIdLst 指定的图书ID列表
     * @return 查询到的指定图书列表信息
     * @throws PortalException [参数说明]
     * 
     * @return List<BookItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<BookItem> getBatchBookProductInfo(List<String> bookIdLst)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookIdLst", null == bookIdLst ? "" : bookIdLst.toString()}};
            logger.debug("Enter PortalEngine.getBatchBookProductInfo()", appInfo);
        }
        
        if (Util.isEmpty(bookIdLst))
        {
            logger.error("bookIdLst is null");
            return null;
        }
        
        List<BookItem> bookItemLst = new ArrayList<BookItem>();// 构造相应结果
        try
        {
            GetBatchBookInfoRequest request = new GetBatchBookInfoRequest();// 构造请求对象
            request.setBookIdLst(bookIdLst);// 设置请求参数
            
            // Object response =
            // PortalServer.getInstance().sendPostRequest("getBatchBookProductInfo",
            // request);// 发送请求
            
            // 调用aserver的getBatchBookProductInfo接口
            Object response = PortalServer.getInstance().sendPostRequest("getBatchBookProductInfo", request);// 发送请求
            
            if (Util.isEmpty(response))
            {
                logger.error("response is null");
                return null;
            }
            if (!(response instanceof GetBatchBookProductInfoResponse))
            {
                logger.error("return type error: " + response.toString());
                return null;
            }
            GetBatchBookProductInfoResponse getProductInfoResponse = (GetBatchBookProductInfoResponse)response;
            List<BookProductInfo> bookProductInfoLst = getProductInfoResponse.getBookProductInfoList();
            if (Util.isEmpty(bookProductInfoLst))
            {
                logger.error("bookProductInfoLst is null,bookIdLst=" + bookIdLst);
                return bookItemLst;
            }
            
            for (BookProductInfo bookProductInfo : bookProductInfoLst)
            {
                BookItem bookItem = BookCacheManager.getInstance().buildBookItem(bookProductInfo);// 重新构造图书信息
                // modify by zKF39164 BUG:IRD-11617
                if (null != bookItem)
                {
                    bookItemLst.add(bookItem);
                }
                // modify by zKF39164 BUG:IRD-11617
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookID", null == bookIdLst ? "" : bookIdLst.toString()}};
            logger.debug("Exit PortalEngine.getBatchBookProductInfo()", appInfo);
        }
        
        return bookItemLst;
    }
    
    /**
     * 根据图书ID查询该图书的所有书卷信息
     * 
     * @param bookID 图书ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String[] [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String[] getTomeIDs(String bookID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookID}};
                logger.debug("Enter PortalEngine.getTomeIDs()", appInfo);
            }
            
            GetBookVolumesRequest request = new GetBookVolumesRequest();
            request.setBookId(bookID);
            // GetBookVolumesResponse response = (GetBookVolumesResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getBookVolumes", request);
            
            // 调用aserver的getBookVolumes接口
            GetBookVolumesResponse response =
                (GetBookVolumesResponse)PortalServer.getInstance().sendPostRequest("getBookVolumes", request);
            
            List<VolumeInfo> list = response.getVolumeInfoList();
            
            String[] tomeIDs = null;
            if (null != list && 0 != list.size())
            {
                tomeIDs = new String[list.size()];
                VolumeInfo tempInfo = null;
                for (int i = 0; i < list.size(); i++)
                {
                    tempInfo = list.get(i);
                    tomeIDs[i] = tempInfo.getVolumeId();
                }
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookID}};
                logger.debug("Exit PortalEngine.getTomeIDs()", appInfo);
            }
            
            return tomeIDs;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据书卷ID查询书卷章节信息
     * 
     * @param tomeID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String[] [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String[] getChapterIDsByTome(String bookID, String tomeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"tomeID", tomeID}};
                logger.debug("Enter PortalEngine.getChapterIDsByTome()", appInfo);
            }
            
            GetVolumeCharptsRequest request = new GetVolumeCharptsRequest();
            request.setVolumeId(tomeID);
            request.setBookId(bookID);
            request.setCount("0");
            request.setStart("0");
            
            // GetVolumeCharptsResponse response = (GetVolumeCharptsResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getVolumeChapters", request);
            
            // 调用aserver的getVolumeChapters接口
            GetVolumeCharptsResponse response =
                (GetVolumeCharptsResponse)PortalServer.getInstance().sendPostRequest("getVolumeChapters", request);
            
            List<ChapterInfo> list = response.getChapterInfoList();
            
            String[] chapterIds = null;
            if (null != list && 0 != list.size())
            {
                chapterIds = new String[list.size()];
                ChapterInfo tempInfo = null;
                for (int i = 0; i < list.size(); i++)
                {
                    tempInfo = list.get(i);
                    chapterIds[i] = tempInfo.getChapterId();
                }
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"tomeID", tomeID}};
                logger.debug("Exit PortalEngine.getChapterIDsByTome()", appInfo);
            }
            
            return chapterIds;
        }
        catch (PortalException e)
        {
            // 临时添加对卷中章节为空时异常码的处理
            if ("24606".equals(e.getExceptionCode()))
            {
                logger.error("getVolumeChapters error tomeID=" + tomeID);
                return null;
            }
            else
            {
                throw e;
            }
        }
    }
    
    /**
     * 根据图书Id和活动Id获取预置图书信息
     * 
     * @param contentID 图书Id
     * @param activeID 活动Id
     * @return 预置图书实体信息
     */
    public PreSetBookResponse getPreSetBookInfo(String contentId, String activeId, String clientType)
        throws PortalException
    {
        if (StringTools.isEmpty(contentId) || StringTools.isEmpty(activeId))
        {
            logger.debug("contentId or activeId is null" + "contentId:" + contentId + "activeId:" + activeId);
        }
        
        PreSetBookRequest request = new PreSetBookRequest();
        request.setAccessType(clientType);
        request.setActiveId(activeId);
        request.setContentId(contentId);
        
        PreSetBookResponse preSetBookInfo =
            (PreSetBookResponse)PortalServer.getInstance().sendPostRequest("getPreSetBookFileInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getPreSetBookInfo()" + preSetBookInfo);
        }
        
        return preSetBookInfo;
    }
    
    /**
     * 根据书卷ID查询书卷信息接口
     * 
     * @param tomeID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return TomeItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public TomeItem getTomeItem(String bookID, String tomeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"tomeID", tomeID}};
                logger.debug("Enter PortalEngine.getTomeItem()", appInfo);
            }
            
            GetBookVolumeInfoRequest request = new GetBookVolumeInfoRequest();
            request.setVolumeId(tomeID);
            request.setBookId(bookID);
            
            // GetBookVolumeInfoResponse response = (GetBookVolumeInfoResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getBookVolumeInfo", request);
            
            // 调用aserver的getBookVolumeInfo接口
            GetBookVolumeInfoResponse response =
                (GetBookVolumeInfoResponse)PortalServer.getInstance().sendPostRequest("getBookVolumeInfo", request);
            
            VolumeInfo volumeInfo = response.getVolumeInfo();
            TomeItem tomeItem = null;
            if (null != volumeInfo)
            {
                tomeItem = new TomeItem(volumeInfo);
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"tomeID", tomeID}};
                logger.debug("Exit PortalEngine.getTomeItem()", appInfo);
            }
            
            return tomeItem;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据章节ID列表查询章节信息的列表
     * 
     * @param bookID 图书ID
     * @param chapterID 章节ID
     * @return [参数说明] 指定的章节详细信息
     * 
     * @return ChapterItem [返回类型说明]
     * @throws PortalException
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ChapterItem getChapterInfo(String bookID, String chapterID)
        throws PortalException
    {
        if ((Util.isEmpty(bookID)) || (Util.isEmpty(chapterID)))
        {
            logger.error("bookID or chapterID is null");
            return null;
        }
        
        // modify by zKF42393 at 2012-3-5 for 听书流媒体 begin
        BookItem bookItem = PortalCacheManager.getBookInfo(bookID);
        
        if (null == bookItem)
        {
            logger.error("bookItem is null !", new String[][] {{"bookId", bookID}});
            return null;
        }
        
        ChapterItem chapterItem = null;
        ChapterBean bean = new ChapterBean();
        bean.setBookId(bookID);
        bean.setChapterId(chapterID);
        bean.setBookItemType(bookItem.getItemType());
        
        // modify by zKF42393 at 2012-3-5 for 听书流媒体 end
        List<ChapterBean> chapterBeanLst = new ArrayList<ChapterBean>();
        chapterBeanLst.add(bean);
        List<ChapterItem> chapterItemLst = getBatchChapterInfo(chapterBeanLst);
        if (Util.isEmpty(chapterItemLst))
        {
            logger.error("chapterItemLst is null,bookId=" + bookID + ",chapterID=" + chapterID);
            return null;
        }
        
        chapterItem = chapterItemLst.get(0);
        return chapterItem;
    }
    
    public List<ChapterItem> getChapters(BookItem bookItem)
    {
        if (bookItem == null || bookItem.getChapterIDs() == null)
        {
            return null;
        }
        
        String[] chapterIds = bookItem.getChapterIDs();
        String bookID = bookItem.getBookId();
        List<ChapterBean> chapterBeanLst = new ArrayList<ChapterBean>(chapterIds.length);
        for (int i = 0; i < chapterIds.length; i++)
        {
            ChapterBean bean = new ChapterBean();
            bean.setBookId(bookID);
            bean.setChapterId(chapterIds[i]);
            bean.setBookItemType(bookItem.getItemType());
            chapterBeanLst.add(bean);
        }
        
        List<ChapterItem> chapters = null;
        try
        {
            chapters = getBatchChapterInfo(chapterBeanLst);
        }
        catch (PortalException pe)
        {
            logger.error("getChapters Failed!");
        }
        return chapters;
    }
    
    /**
     * 章节详细信息列表
     * 
     * @param chapterBeanLst 章节信息列表
     * @return 章节信息列表
     * @throws PortalException [参数说明]
     * 
     * @return List<ChapterItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<ChapterItem> getBatchChapterInfo(List<ChapterBean> chapterBeanLst)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"chapterID", null == chapterBeanLst ? "" : chapterBeanLst.toString()}};
            logger.debug("Enter PortalEngine.getBatchChapterInfo()", appInfo);
        }
        if (Util.isEmpty(chapterBeanLst))
        {
            logger.error("chapterBeanLst is null");
            return null;
        }
        
        List<ChapterItem> chapterItemLst = new ArrayList<ChapterItem>();// 构造返回结果对象
        try
        {
            GetBatchChapterInfoRequest request = new GetBatchChapterInfoRequest();// 构造请求对象
            // modify by zKF42393 at 2012-2-29 for 听书流媒体 begin
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            // modify by zKF42393 at 2012-2-29 for 听书流媒体 end
            request.setChapterBeanLst(chapterBeanLst);// 设置请求参数
            GetBatchChapterInfoResponse response =
                (GetBatchChapterInfoResponse)PortalServer.getInstance().sendPostRequest("getBatchChapterInfo", request);// 发送查询请求
            
            LogTools.debugLog(logger, "PortalEngine.getBatchChapterInfo() response=" + response);
            if (null == response)
            {
                logger.error("response is null");
                return null;
            }
            
            if (StrUtil.isEq(response.getDbStatus(), "1"))
            {
                // 门户记录日志
                ChapterErrorLog.getInstance().logChapterError(chapterBeanLst.get(0).getBookId());
                throw new PortalException(StrUtil.valueOf(TerminalCodes.CHAPTERITEM_IS_NULL), "数据库查询异常");
            }
            
            List<ChapterInfo> chapterLst = response.getChapterInfoLst();
            if (Util.isEmpty(chapterLst))
            {
                logger.error("ChapterInfoList is null");
                return chapterItemLst;
            }
            
            chapterItemLst = BookCacheManager.getInstance().batchBuildChapterItem(chapterLst);
            if (Util.isEmpty(chapterItemLst))
            {
                logger.error("batchBuildChapterItem failure");
            }
        }
        catch (PortalException e)
        {
            logger.error("getBatchChapterInfo failure", e);
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"chapterID", null == chapterBeanLst ? "" : chapterBeanLst.toString()}};
            logger.debug("Exit PortalEngine.getBatchChapterInfo()", appInfo);
        }
        
        return chapterItemLst;
    }
    
    /**
     * 大章节文件获取章节文件列表
     * 
     * @param contentId 内容ID
     * @param chapterId 章节ID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<ChapterFileInfo> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<ChapterFileInfo> getChapterFileList(String contentId, String contentType, String chapterId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"chapterID", chapterId}};
                logger.debug("Enter PortalEngine.getChapterFileList()", appInfo);
            }
            
            GetChapterInfoRequest request = new GetChapterInfoRequest();
            request.setBookId(contentId);
            request.setBookItemType(contentType);
            request.setChapterId(chapterId);
            
            GetChapterFileResponse response =
                (GetChapterFileResponse)PortalServer.getInstance().sendPostRequest("getChapterFile", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"chapterID", chapterId}};
                logger.debug("Exit PortalEngine.getChapterFileList()", appInfo);
            }
            
            if (null != response)
            {
                return response.getChapterFileInfo();
            }
            else
            {
                return null;
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据书籍ID、书籍类型、章节ID列表批量获取指定章节列表对应的章节信息
     * 
     * @param contentId 书籍ID
     * @param contentType 书籍类型
     * @param chapterIdLst 章节ID列表
     * @param formatType
     * 
     * @return [参数说明]
     * 
     * @return Map<String,List<ChapterFileInfo>> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public Map<String, List<ChapterFileInfo>> getBatchChapterFileMap(String contentId, String contentType,
        List<String> chapterIdLst, String formatType)
    {
        if (Util.isEmpty(chapterIdLst))
        {
            logger.error("chapterIdLst is null");
            return null;
        }
        
        String[][] appInfo = {{"bookId", contentId}, {"contentType", contentType},
            {"chapterIdLst", Arrays.deepToString(chapterIdLst.toArray(new String[0]))}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter getBatchChapterFileList()", appInfo);
        }
        
        Map<String, List<ChapterFileInfo>> chapterMap = null;
        
        try
        {
            GetBatchChapterFileRequest request = new GetBatchChapterFileRequest();
            request.setBookId(contentId);
            request.setBookItemType(contentType);
            request.setChapterIdLst(chapterIdLst);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setFormatType(formatType);
            Object obj = PortalServer.getInstance().sendPostRequest("getBatchChapterFile", request);
            if ((null == obj) || !(obj instanceof GetBatchChapterFileResponse))
            {
                logger.error("Response type is unexpected");
                return null;
            }
            
            GetBatchChapterFileResponse response = (GetBatchChapterFileResponse)obj;
            List<ChapterFile> chapterFileLst = response.getChapterFileLst();
            if (Util.isEmpty(chapterFileLst))
            {
                logger.warn("getBatchChapterFileList failure");
                return null;
            }
            
            chapterMap = new HashMap<String, List<ChapterFileInfo>>();
            for (ChapterFile chapterFile : chapterFileLst)
            {
                if (!Util.isEmpty(chapterFile))
                {
                    chapterMap.put(chapterFile.getChapterId(), chapterFile.getChapterFileInfoLst());
                }
            }
        }
        catch (PortalException e)
        {
            // IRD-32799 现网日志优化
            logger.warn("getBatchChapterFileList failure", e);
            return null;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit getBatchChapterFileList()", appInfo);
        }
        
        return chapterMap;
    }
    
    /**
     * 内容搜索接口
     * 
     * @param nodeID 栏目ID
     * @param searchType 搜索方式
     * @param keyWords 关键字
     * @param sortType 搜索结果排序方式
     * @param itemType 搜索内容类型
     * @param start 开始位置
     * @param pageSize 显示个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ResultForm searchContent(String nodeID, String searchType, String keyWords, String sortType, String itemType,
        int start, int pageSize, String msisdn, String userAgent)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}, {"keyWords", keyWords}, {"searchType", searchType}};
                logger.debug("Enter PortalEngine.searchContent()", appInfo);
            }
            
            // 构造请求报文
            SearchContentRequest request = new SearchContentRequest();
            request.setCatalogId(nodeID);
            request.setSearchContent(keyWords);
            request.setSearchType(searchType);
            request.setSortType(sortType);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            request.setBookItemType(itemType);
            request.setMsisdn(msisdn);
            request.setUserAgent(userAgent);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            
            SearchContentResponse response =
                (SearchContentResponse)PortalServer.getInstance().sendPostRequest("searchContent", request);
            
            List<BookInfo> list = response.getBookList();
            String searchId = response.getSearchId();
            ResultForm resultForm = null;
            // 构造返回对象form
            resultForm = getResultForm(BookContants.VNODEID_SEARCH,
                start,
                pageSize,
                response.getTotalRecordCount(),
                list,
                searchId);
            // }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}, {"keyWords", keyWords}, {"searchType", searchType}};
                logger.debug("Exit PortalEngine.searchContent()", appInfo);
            }
            
            return resultForm;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    private ResultForm getResultForm(String nodeID, int start, int pageSize, int totalSize, List<BookInfo> list,
        String searchId)
    {
        ResultForm resultForm = null;
        String[] bookIDs = null;
        BookInfo tempInfo = null;
        if (list != null)
        {
            bookIDs = new String[list.size()];
            for (int i = 0; i < list.size(); i++)
            {
                tempInfo = list.get(i);
                if (null == tempInfo)
                {
                    continue;
                }
                
                bookIDs[i] = tempInfo.getBookId();
            }
        }
        
        resultForm = new ResultForm();
        resultForm.setNodeID(nodeID);
        resultForm.setPageBookIDs(bookIDs);
        resultForm.setStart(start);
        resultForm.setPageSize(pageSize);
        resultForm.setTotalSize(totalSize);
        resultForm.setSearchId(searchId);
        return resultForm;
    }
    
    /**
     * <一句话功能简述>
     * 
     * @param rankStandard 排行依据，比如按点击
     * @param rankType 排行类型，比如周榜
     * @param nodeID 栏目
     * @param start 开始位置
     * @param pageSize 显示个数
     * @param contentType 内容类型 0 全站排行；1 书籍排行；2 漫画排行；3 杂志排行
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public RankItem[] getRankInfos(String rankStandard, String rankType, String nodeID, int start, int count,
        String contentType, String terminalNodeId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"rankStandard", rankStandard}, {"rankType", rankType}};
                logger.debug("Enter PortalEngine.getRankInfos()", appInfo);
            }
            
            List<RankInfo> infoList = null;
            
            // 从缓存中取出新的排行榜规则
            String rankPleasureRule = PortalCacheManager.getConfigValue("new_reading_rank_rule");
            // 判断是否属于悦读榜的规则
            String rankRule = "";
            if (!"".equals(terminalNodeId))
            {
                rankRule = getRankRule(terminalNodeId, rankPleasureRule);
                
            }
            // modify by wx169737 at 2013-05-08 for REQ_1815需求 BEGIN
            // 调用不同的server接口
            if (StrUtil.isNotEmpty(rankRule))
            {
                // 封装数据
                GetBIRankRequest getBIRankRequest = new GetBIRankRequest();
                getBIRankRequest.setRankType(RANK_TYPE_PLEASURE_READING);
                getBIRankRequest.setRankDateType(rankType);
                getBIRankRequest.setNodeId(nodeID);
                getBIRankRequest.setRankRule(rankRule);
                getBIRankRequest.setRankStart(String.valueOf(start));
                getBIRankRequest.setRankCount(String.valueOf(count));
                // 调server中的getBIRank接口
                GetBIRankResponse getBIRankResponse =
                    (GetBIRankResponse)PortalServer.getInstance().sendPostRequest("getBIRank", getBIRankRequest);
                infoList = getBIRankResponse.getRankList();
                
                // modify by wx169737 at 2013-05-08 for REQ_1815需求 END
            }
            else
            {
                GetRankRequest request = new GetRankRequest();
                request.setRankType(rankStandard);
                request.setRankDateType(rankType);
                request.setNodeId(nodeID);
                request.setRankStart(String.valueOf(start));
                request.setRankCount(String.valueOf(count));
                request.setBookItemType(contentType);
                
                GetRankResponse response =
                    (GetRankResponse)PortalServer.getInstance().sendPostRequest("getRank", request);
                infoList = response.getRankList();
            }
            
            RankItem[] rankItems = getRankItems(infoList, rankStandard, rankRule);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"rankStandard", rankStandard}, {"rankType", rankType}};
                logger.debug("Exit PortalEngine.getRankInfos()", appInfo);
            }
            
            return rankItems;
        }
        catch (PortalException e)
        {
            logger.error("GetRanks failed", new String[][] {{"rankStandard", rankStandard}, {"rankType", rankType}}, e);
            throw e;
        }
    }
    
    private String getRankRule(String terminalNodeId, String rankPleasureRule)
    {
        String str = "";
        String temp[] = rankPleasureRule.split(";");
        for (int i = 0; i < temp.length; i++)
        {
            if (terminalNodeId.contains(temp[i].split(":")[0]))
            {
                str = temp[i].split(":")[1];
                break;
            }
            else
            {
                str = "";
            }
        }
        return str;
    }
    
    /**
     * 排行榜查询
     * 
     * @param rankType 排行依据类型
     * @param rankTimeType 时间类型
     * @param start 起始序号
     * @param count 查询总数
     * @return
     * @throws PortalException [参数说明] *
     * @return RankItem[] [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public ArrayWrap<RankItem> getRankAndSize(String nodeId, String rankType, String rankTimeType, int start, int count)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"rankType", rankType}, {"rankTimeType", rankTimeType}};
                logger.debug("Enter PortalEngine.getRankAndSize()", appInfo);
            }
            
            GetRankRequest request = new GetRankRequest();
            request.setNodeId(nodeId);
            request.setRankType(rankType);
            request.setRankDateType(rankTimeType);
            request.setRankStart(String.valueOf(start));
            request.setRankCount(String.valueOf(count));
            
            GetRankResponse response = (GetRankResponse)PortalServer.getInstance().sendPostRequest("getRank", request);
            
            List<RankInfo> infoList = response.getRankList();
            
            RankItem[] rankItems = getRankItems(infoList, rankType);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getRankAndSize()");
            }
            
            return new ArrayWrap<RankItem>(response.getTotalRecordCount(), rankItems);
        }
        catch (PortalException e)
        {
            logger.error("GetRanks failed", new String[][] {{"rankStandard", rankType}, {"rankType", rankTimeType}}, e);
            throw e;
        }
    }
    
    /**
     * 查询频道专区推荐内容
     * 
     * @param nodeID 栏目ID
     * @param start 开始位置
     * @param pageSize 显示个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetRecommendResponse getRecommend(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getRecommend()", appInfo);
            }
            
            GetRecommendRequest request = new GetRecommendRequest();
            request.setCatalogId(nodeID);
            
            GetRecommendResponse response =
                (GetRecommendResponse)PortalServer.getInstance().sendPostRequest("getRecommend", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getRecommend()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 内容智能推荐查询
     * 
     * @param bookID 图书
     * @param type 类型
     * @param start 起始位置
     * @param pageSize 显示个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetContentRecommendResponse getContentRecommend(String bookID, String recommendGrade, String type, int start,
        int pageSize)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookID}, {"type", type}};
                logger.debug("Enter PortalEngine.getContentRecommend()", appInfo);
            }
            
            GetContentRecommendRequest request = new GetContentRecommendRequest();
            request.setBookId(bookID);
            request.setRecommendType(type);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            // 需增加推荐级别recommendGrade modify by cKF24529
            request.setRecommendGrade(String.valueOf(recommendGrade));
            // end
            GetContentRecommendResponse response =
                (GetContentRecommendResponse)PortalServer.getInstance().sendPostRequest("getContentRecommend", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookID}, {"type", type}};
                logger.debug("Exit PortalEngine.getContentRecommend()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询用户预订记录
     * 
     * @param msisdn
     * @param start
     * @param count
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return ResultForm [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ResultForm getUserReserve(String msisdn, int start, int count, String contentType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getUserReserve()", new String[][] {{"msisdn", msisdn}});
            }
            
            GetUserPreSubscriptionRequest request = new GetUserPreSubscriptionRequest();
            request.setCount(String.valueOf(count));
            request.setStart(String.valueOf(start));
            request.setMobile(msisdn);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setContentType(contentType);
            GetUserPreSubscriptionResponse response = (GetUserPreSubscriptionResponse)PortalServer.getInstance()
                .sendPostRequest("getUserPreSubscription", request);
            ResultForm resultForm = new ResultForm();
            if (null != response)
            {
                int totalSize = response.getTotalRecordCount();
                resultForm = this.getResultForm(BookContants.VNODEID_RESERVE,
                    start,
                    count,
                    totalSize,
                    response.getBookInfoList(),
                    "");
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getUserReserve()", new String[][] {{"msisdn", msisdn}});
            }
            
            return resultForm;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 连载预订接口
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void reserve(String msisdn, String bookID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.reserve()", new String[][] {{"msisdn", msisdn}, {"bookID", bookID}});
        }
        
        try
        {
            // 预订接口
            this.reserve(msisdn, bookID, null, BookContants.BOOK_RESERVE);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.reserve()", new String[][] {{"msisdn", msisdn}, {"bookID", bookID}});
        }
    }
    
    /**
     * 品牌包月提醒信息预订接口
     * 
     * @param msisdn 用户手机号码
     * @param bookID 图书ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void reserveCatalog(String msisdn, String catalogId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.reserve()", new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}});
        }
        
        try
        {
            // 预订接口
            this.reserve(msisdn, null, catalogId, BookContants.BOOK_RESERVE);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.reserve()", new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}});
        }
    }
    
    /**
     * 用户取消图书连载预订接口
     * 
     * @param msisdn 用户号码
     * @param bookID 图书ID
     * @param catalogId 品牌包月目录ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void cancelReserve(String msisdn, String bookID, String catalogId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.cancelReserve()", new String[][] {{"msisdn", msisdn}, {"bookID", bookID}});
        }
        
        try
        {
            // 取消预订
            this.reserve(msisdn, bookID, catalogId, BookContants.BOOK_UNRESERVE);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.cancelReserve()", new String[][] {{"msisdn", msisdn}, {"bookID", bookID}});
        }
    }
    
    /**
     * 用户加入会员接口
     * 
     * @param msisdn 用户手机号码
     * @param accessType 门户类型
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addVip(String msisdn, String accessType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.addVip()",
                    new String[][] {{"msisdn", msisdn}, {"accessType", accessType}});
            }
            
            // 构造请求报文
            RegisterMemberCardRequest request = new RegisterMemberCardRequest();
            request.setAccessType(accessType);
            request.setMobile(msisdn);
            
            PortalServer.getInstance().sendPostRequest("registerMemberCard", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.addVip()",
                    new String[][] {{"msisdn", msisdn}, {"accessType", accessType}});
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 用户退出会员接口
     * 
     * @param msisdn 用户手机号码
     * @param accessType 门户类型
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void cancelVip(String msisdn, String accessType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.addVip()",
                    new String[][] {{"msisdn", msisdn}, {"accessType", accessType}});
            }
            
            // 构造请求报文
            CancelMemberCardRequest request = new CancelMemberCardRequest();
            request.setAccessType(accessType);
            request.setMobile(msisdn);
            
            PortalServer.getInstance().sendPostRequest("cancelMemberCard", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.addVip()",
                    new String[][] {{"msisdn", msisdn}, {"accessType", accessType}});
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询图书的鸡蛋数和鲜花数
     * 
     * @param bookID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetVoteResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetVoteResponse getVote(String bookID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getVote()", new String[][] {{"bookID", bookID}});
            }
            
            // 生成请求报文，并发送http请求
            GetVoteRequest request = new GetVoteRequest();
            request.setBookId(bookID);
            
            GetVoteResponse response = (GetVoteResponse)PortalServer.getInstance().sendPostRequest("getVote", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getVote()", new String[][] {{"bookID", bookID}});
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 用户打分接口，0 鲜花；1 鸡蛋
     * 
     * @param bookID 图书ID
     * @param msisdn 用户手机号码
     * @param value 打分值 0 鲜花；1 鸡蛋
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addVote(String bookID, String msisdn, String value)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.addVote()",
                    new String[][] {{"bookID", bookID}, {"msisdn", msisdn}, {"value", value}});
            }
            
            AddVoteRequest request = new AddVoteRequest();
            request.setBookId(bookID);
            request.setMobile(msisdn);
            request.setOptionValue(value);
            
            PortalServer.getInstance().sendPostRequest("addVote", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.addVote()",
                    new String[][] {{"bookID", bookID}, {"msisdn", msisdn}, {"value", value}});
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 章节预订接口
     * 
     * @param msisdn 手机号码
     * @param bookID 图书ID
     * @param bookID 品牌ID对应wap目录id
     * @param type 预订类型 0 增加； 1 删除
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void reserve(String msisdn, String bookID, String catalogId, String type)
        throws PortalException
    {
        try
        {
            UserPreSubscriptionRequest request = new UserPreSubscriptionRequest();
            request.setBookId(bookID);
            request.setMobile(msisdn);
            request.setCatalogId(catalogId);
            request.setOperationType(type);
            
            PortalServer.getInstance().sendPostRequest("userPreSubscription", request);
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    private RankItem[] getRankItems(List<RankInfo> infoList, String rankType)
    {
        RankItem[] rankItems = null;
        if (null != infoList && 0 != infoList.size())
        {
            RankInfo tempInfo = null;
            BookItem bookItem = null;
            RankItem rankItem = null;
            List<RankItem> rankItemList = new ArrayList<RankItem>();
            for (int i = 0; i < infoList.size(); i++)
            {
                tempInfo = infoList.get(i);
                // modify by swx149481 at 2012-10-11 for REQ_1619 杂志频道“排行”需求
                // BEGIN
                // 当是品牌榜时，不用去获取图书信息
                if (!RANK_TYPE_BREED.equals(rankType) || RANK_TYPE_PLEASURE_READING.equals(rankType))
                {
                    // 查询图书信息
                    bookItem = PortalCacheManager.getBookInfo(tempInfo.getBookId());
                    if (null == bookItem)
                    {
                        continue;
                    }
                }
                // modify by swx149481 at 2012-10-11 for REQ_1619 杂志频道“排行”需求 END
                rankItem = new RankItem(tempInfo);
                rankItemList.add(rankItem);
            }
            
            rankItems = new RankItem[rankItemList.size()];
            rankItems = rankItemList.toArray(rankItems);
        }
        return rankItems;
    }
    
    private RankItem[] getRankItems(List<RankInfo> infoList, String rankType, String rankRule)
    {
        RankItem[] rankItems = null;
        if (null != infoList && 0 != infoList.size())
        {
            RankInfo tempInfo = null;
            BookItem bookItem = null;
            RankItem rankItem = null;
            List<RankItem> rankItemList = new ArrayList<RankItem>();
            for (int i = 0; i < infoList.size(); i++)
            {
                tempInfo = infoList.get(i);
                if ("".equals(rankRule))
                {
                    // modify by swx149481 at 2012-10-11 for REQ_1619 杂志频道“排行”需求
                    // BEGIN
                    // 当是品牌榜时，不用去获取图书信息
                    if (!RANK_TYPE_BREED.equals(rankType))
                    {
                        // 查询图书信息
                        bookItem = PortalCacheManager.getBookInfo(tempInfo.getBookId());
                        if (null == bookItem)
                        {
                            continue;
                        }
                    }
                    // modify by swx149481 at 2012-10-11 for REQ_1619 杂志频道“排行”需求
                    // END
                }
                rankItem = new RankItem(tempInfo);
                rankItemList.add(rankItem);
            }
            
            rankItems = new RankItem[rankItemList.size()];
            rankItems = rankItemList.toArray(rankItems);
        }
        return rankItems;
    }
    
    private UserInfo removePrefix(UserInfo userInfo)
        throws PortalException
    {
        if (null == userInfo)
        {
            throw new PortalException();
        }
        
        String mdn = userInfo.getMobile();
        if (null == mdn || "".equals(mdn.trim()))
        {
            throw new PortalException();
        }
        
        // 如果用户信息中返回的手机号码有前缀，则去掉前缀
        mdn = IReadTools.removePrefix(mdn);
        userInfo.setMobile(mdn);
        
        return userInfo;
    }
    
    /**
     * 标签父类对象取得
     * 
     * @param tagId
     * @param label
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return Object [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public Object getLabelResponse(String tagId, BaseLabelBean label)
        throws PortalException
    {
        try
        {
            // modify by kf39172 at Oct 17, 2011 for QRE-809 begin
            String action = "getLabelById";
            // 请求地址
            String url = PortalServer.getInstance().getEngineURL(action) + "?id=" + tagId;
            
            // 发送请求报文
            String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
            
            // modify by kf39172 at Oct 17, 2011 for QRE-809 end
            
            // 解析返回的报文
            IreadXStream xstream = new IreadXStream();
            xstream.alias(LabelResponse.getClassName(), LabelResponse.class);
            xstream.alias(label.getClassName(), label.getClass());
            
            LabelResponse response = (LabelResponse)xstream.fromXML(resXml);
            
            // 返回标签对象
            return response.getLabel();
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据区块ID查询区块信息
     * 
     * @param blockID
     * @param label
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return Object [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BaseBlockInfo getBlockInfo(String blockID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBlockInfo(), blockID = " + blockID);
        }
        
        // 生成请求xml报文
        BlockInfoRequest request = new BlockInfoRequest();
        request.setBlockID(blockID);
        IreadXStream xstream = new IreadXStream();
        String xml = xstream.toXML(request, BlockInfoRequest.class);
        
        // 请求接口url
        String url = PortalServer.getInstance().getEngineURL("getBlockInfo");
        
        InputStream in = null;
        BaseBlockInfo block = null;
        
        EntityEnclosingMethod httpMethod = null;
        
        // modify by kf39172 at Oct 14, 2011 for REQ809 begin
        String responseErrCode = null;
        String beginTime = IReadTools.getCurrentTime(CDRLog.CDR_TIMEFORMAT);
        String endTime = null;
        String ip = null;
        
        try
        {
            if (GrayLevelControllerTools.grayLevelController())
            {
                in = HttpAsyncTools.getInstance().sendBlockRequest(url, xml);
            }
            else
            {
                httpMethod = new PostMethod(url);
                
                // 发生http请求，返回相应流
                in = HttpTools.getInstance().sendBlockRequest(httpMethod, xml);
            }
            
            // 根据响应报文，解析区块对象
            BaseBlockInfo baseBlock = XstreamTools.getBlockObj(in);
            if (null == baseBlock)
            {
                return null;
            }
            
            // 因为在测试过程中发现InputStream无法重用，故只好再发送一次请求。接口变更不会太频繁，暂时就这么处理了。
            String resXml = HttpTools.getInstance().sendHttpRequest(url, xml);
            baseBlock.setAlias(xstream);
            xstream.alias("Response", BlockInfoResponse.class);
            
            // 解析区块对象
            BlockInfoResponse response = (BlockInfoResponse)xstream.fromXML(resXml);
            if (null != response)
            {
                block = response.getBlockInfo();
            }
        }
        catch (PortalException e)
        {
            
            // 记录返回响应吗
            responseErrCode = ServerVisitErrLogManager.convert(e.getExceptionCode());
            
            if (StringUtils.isEmpty(endTime))
            {
                endTime = IReadTools.getCurrentTime(CDRLog.CDR_TIMEFORMAT);
            }
            
            ip = StringTools.getIPOfURL(url);
            
            if (StringTools.isNotEmpty(responseErrCode))
            {
                PlatformPerformanceMonitorCDRLog.getInstance().log("getBlockInfo",
                    beginTime,
                    endTime,
                    ip,
                    responseErrCode);
            }
            
            // modify by kf39172 at Oct 19, 2011 for REQ-809 end
            PortalLog.getLog().error(e.toString());
            throw e;
        }
        catch (Exception e)
        {
            PortalLog.getLog().error(e.toString());
            throw new PortalException(e);
        }
        finally
        {
            if (null != httpMethod)
            {
                httpMethod.releaseConnection();
            }
            
            if (null != in)
            {
                try
                {
                    in.close();
                }
                catch (Exception e)
                {
                    PortalLog.getLog().error(e.toString());
                }
            }
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getBlockInfo(), blockID = " + blockID);
        }
        
        return block;
    }
    
    /**
     * 查询portal参数配置
     * 
     * @param key
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String getConfig(String key)
        throws PortalException
    {
        
        try
        {
            // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
            String action = "getConfig";
            // 请求地址
            String url = PortalServer.getInstance().getEngineURL(action) + "?key=" + key;
            
            // 发送请求报文
            String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
            
            // modify by kf39172 at Oct 17, 2011 for REQ-809 end
            
            // 解析返回的报文
            XStream xstream = PortalServer.getInstance().getXstream("getConfig");
            
            PortalParamResponse response = (PortalParamResponse)xstream.fromXML(resXml);
            
            // 返回标签对象
            PortalParamBean paramBean = response.getParam();
            
            String configValue = null;
            
            if (paramBean != null)
            {
                configValue = paramBean.getValue();
            }
            
            return configValue;
        }
        catch (PortalException e)
        {
            
            throw e;
        }
    }
    
    /**
     * 查询栏目首页URL配置
     * 
     * @param nodeID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String getNodeUrl(String nodeID)
        throws PortalException
    {
        try
        {
            // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
            String action = "getNodeURL";
            // 请求地址
            String url = PortalServer.getInstance().getEngineURL(action) + "?nodeID=" + nodeID;
            
            // 发送请求报文
            String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
            // modify by kf39172 at Oct 17, 2011 for REQ-809 end
            
            // 解析返回的报文
            XStream xstream = PortalServer.getInstance().getXstream("getNodeURL");
            // IreadXStream xstream = new IreadXStream();
            // xstream.alias("NodeURLResponse", NodeURLResponse.class);
            
            NodeURLResponse response = (NodeURLResponse)xstream.fromXML(resXml);
            
            // 返回标签对象
            return response.getNodeURL();
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据终端测试目录，获取
     * 
     * @param nodeID
     * @return [参数说明]
     * 
     * @return TerminalNodeItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public TerminalTestNodeItem getTerminalTestNodeItem(String nodeID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getTerminalNodeItem(), nodeID = " + nodeID);
        }
        
        try
        {
            // 生成请求报文
            GetTNodeInfoRequest request = new GetTNodeInfoRequest();
            request.setNodeId(nodeID);
            
            GetTNodeInfoResponse response =
                (GetTNodeInfoResponse)PortalServer.getInstance().sendPostRequest("getTestTNodeInfo", request);
            
            TerminalTestNodeItem nodeItem = null;
            if (null != response)
            {
                com.huawei.iread.server.domain.terminal.NodeInfo nodeInfo = response.getNodeInfo();
                if (null != nodeInfo)
                {
                    nodeItem = new TerminalTestNodeItem(nodeInfo);
                }
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getTerminalNodeItem(), nodeID = " + nodeID);
            }
            
            return nodeItem;
        }
        catch (PortalException e)
        {
            logger.error("getTerminalNodeItem", e);
            throw e;
        }
    }
    
    /**
     * 获取测试子目录节点信息
     * 
     * @param nodeID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<TerminalNodeItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<TerminalTestNodeItem> getTestChildTerminalNodeList(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getChildTerminalNodeList(), nodeID = " + nodeID);
            }
            
            // 构造请求报文
            GetTestChildNodeListRequest request = new GetTestChildNodeListRequest();
            request.setNodeId(nodeID);
            
            GetTestChildNodeListResponse response = (GetTestChildNodeListResponse)PortalServer.getInstance()
                .sendPostRequest("getTestChildNodeList", request);
            List<TerminalTestNodeItem> nodeItemList = null;
            if (null != response)
            {
                List<com.huawei.iread.server.domain.terminal.NodeInfo> nodeList = response.getNodeList();
                if (null != nodeList && 0 != nodeList.size())
                {
                    TerminalTestNodeItem nodeItem = null;
                    nodeItemList = new ArrayList<TerminalTestNodeItem>();
                    for (com.huawei.iread.server.domain.terminal.NodeInfo nodeInfo : nodeList)
                    {
                        nodeItem = new TerminalTestNodeItem(nodeInfo);
                        nodeItemList.add(nodeItem);
                    }
                }
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getChildTerminalNodeList(), nodeID = " + nodeID);
            }
            
            return nodeItemList;
        }
        catch (PortalException e)
        {
            logger.error("getChildTerminalNodeList", e);
            throw e;
        }
    }
    
    /**
     * 根据终端目录
     * 
     * @param nodeID
     * @return [参数说明]
     * 
     * @return TerminalNodeItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public TerminalNodeItem getTerminalNodeItem(String nodeID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getTerminalNodeItem(), nodeID = " + nodeID);
        }
        
        // 如果nodeID为负数，不查询专用信息
        if (Integer.valueOf(nodeID) < 0)
        {
            return null;
        }
        
        try
        {
            // 生成请求报文
            GetTNodeInfoRequest request = new GetTNodeInfoRequest();
            request.setNodeId(nodeID);
            
            GetTNodeInfoResponse response =
                (GetTNodeInfoResponse)PortalServer.getInstance().sendPostRequest("getTNodeInfo", request);
            
            TerminalNodeItem nodeItem = null;
            if (null != response)
            {
                com.huawei.iread.server.domain.terminal.NodeInfo nodeInfo = response.getNodeInfo();
                if (null != nodeInfo)
                {
                    nodeItem = new TerminalNodeItem(nodeInfo);
                }
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getTerminalNodeItem(), nodeID = " + nodeID);
            }
            
            return nodeItem;
        }
        catch (PortalException e)
        {
            logger.error("getTerminalNodeItem", e);
            throw e;
        }
    }
    
    /**
     * <一句话功能简述>
     * 
     * @param nodeID
     * @return [参数说明]
     * 
     * @return List<TerminalNodeItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<TerminalNodeItem> getChildTerminalNodeList(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getChildTerminalNodeList(), nodeID = " + nodeID);
            }
            
            // 构造请求报文
            GetChildNodeListRequest request = new GetChildNodeListRequest();
            request.setNodeId(nodeID);
            
            GetChildNodeListResponse response =
                (GetChildNodeListResponse)PortalServer.getInstance().sendPostRequest("getChildNodeList", request);
            List<TerminalNodeItem> nodeItemList = null;
            if (null != response)
            {
                List<com.huawei.iread.server.domain.terminal.NodeInfo> nodeList = response.getNodeList();
                if (!Util.isEmpty(nodeList))
                {
                    TerminalNodeItem nodeItem = null;
                    nodeItemList = new ArrayList<TerminalNodeItem>();
                    for (com.huawei.iread.server.domain.terminal.NodeInfo nodeInfo : nodeList)
                    {
                        nodeItem = new TerminalNodeItem(nodeInfo);
                        nodeItemList.add(nodeItem);
                    }
                }
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getChildTerminalNodeList(), nodeID = " + nodeID);
            }
            
            return nodeItemList;
        }
        catch (PortalException e)
        {
            logger.error("getChildTerminalNodeList", e);
            throw e;
        }
    }
    
    /**
     * 查询用户信息接口
     * 
     * @param clientVersion 客户端版本
     * @param msisdn 用户手机号码
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ClientUpdateInfo getClientUpdateInfo(String clientVersion, String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"clientVersion", clientVersion}, {"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getClientUpdateInfo()", appInfos);
        }
        
        try
        {
            ClientCheckUpdateRequest request = new ClientCheckUpdateRequest();
            request.setClientVersion(clientVersion);
            request.setClientMsisdn(msisdn);
            ClientCheckUpdateResponse response =
                (ClientCheckUpdateResponse)PortalServer.getInstance().sendPostRequest("clientCheckUpdate", request);
            
            ClientUpdateInfo clientUpdateInfo = response.getClientUpdateInfo();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.getClientUpdateInfo()", appInfos);
            }
            
            return clientUpdateInfo;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 客户端注册接口
     * 
     * @param msisdn
     * @param clientHash
     * @param clientVersion
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String terminalRegister(String msisdn, String clientHash, String clientVersion, String isCheckHash,
        String sLoginType, String channelCode, String userAgent)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            logger.debug("Enter PortalEngine.terminalRegister()", appInfos);
        }
        
        try
        {
            // 构造注册对象
            UserInfo userProfile = new UserInfo();
            userProfile.setMobile(msisdn);
            userProfile.setUserAgent(userAgent);
            
            UserRegisterRequest request = new UserRegisterRequest();
            request.setUserInfo(userProfile);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setClientHash(clientHash);
            request.setClientVersion(clientVersion);
            request.setIsCheckHash(isCheckHash);
            request.setLoginType(sLoginType);
            
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 begin
            request.setChannelCode(channelCode);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 end
            
            UserRegisterResponse resp =
                (UserRegisterResponse)PortalServer.getInstance().sendPostRequest("userRegister", request);
            
            String userId = resp.getUserId();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.terminalRegister()", appInfos);
            }
            
            return userId;
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            logger.error("client terminalRegister failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 客户端注册接口
     * 
     * @param msisdn
     * @param clientHash
     * @param clientVersion
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String terminal_Register(String msisdn, String clientHash, String clientVersion, String isCheckHash,
        String sLoginType, String channelCode, String userAgent)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            logger.debug("Enter PortalEngine.terminalRegister()", appInfos);
        }
        
        try
        {
            // 构造注册对象
            UserInfo userProfile = new UserInfo();
            userProfile.setMobile(msisdn);
            userProfile.setUserAgent(userAgent);
            
            UserRegisterRequest request = new UserRegisterRequest();
            request.setUserInfo(userProfile);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setClientHash(clientHash);
            request.setClientVersion(clientVersion);
            request.setIsCheckHash(isCheckHash);
            request.setLoginType(sLoginType);
            
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 begin
            request.setChannelCode(channelCode);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode参数传入 end
            
            UserRegisterResponse resp =
                (UserRegisterResponse)PortalServer.getInstance().sendPostRequest("userRegister", request);
            
            String identityId = resp.getIdentityID();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.terminalRegister()", appInfos);
            }
            
            return identityId;
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            logger.error("client terminalRegister failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 
     * 客户端登陆鉴权4 BR002224 增加传入server的参数isNeedPaymsisdn字段,表示:是否需要server返回Paymsisdn字段
     *
     * @author hlf
     * @param userid 用户标识
     * @param msisdn 用户手机号码
     * @param clientHash 客户端Hash
     * @param clientVersion 客户端版本号
     * @param wapIp 用户接入wap网关IP
     * @param isCheckCHash 是否检查hash
     * @param sLoginType 客户端登录类型
     * @param channelCode 渠道编号
     * @param userAgent 终端类型
     * @param isNeedPaymsisdn server是否需要返回Paymsisdn字段标识
     * @return
     * @throws PortalException
     */
    public UserAuthenticateResponse terminalAuthenticate(String userid, String msisdn, String clientHash,
        String clientVersion, String wapIp, String isCheckCHash, String sLoginType, String channelCode,
        String userAgent, String isNeedPaymsisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.termianlAuthenticate()",
                new String[][] {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion},
                    {"isCheckCHash", isCheckCHash}, {"isNeedPaymsisdn", isNeedPaymsisdn}});
        }
        try
        {
            UserAuthenticateRequest request = new UserAuthenticateRequest();
            request.setMobile(msisdn);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setClientHash(clientHash);
            request.setClientVersion(clientVersion);
            request.setUserId(userid);
            request.setWapIp(wapIp);
            request.setIsCheckCHash(isCheckCHash);
            request.setLoginType(sLoginType);
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode,userAgent参数传入 begin
            request.setChannelCode(channelCode);
            request.setUserAgent(userAgent);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode,userAgent参数传入 end
            request.setIsNeedPaymsisdn(isNeedPaymsisdn);
            
            LogTools.debugLog(logger,
                "PortalEngine.terminalAuthenticate() start sendPostRequest to server[userAuthenticate],request=",
                request);
            
            UserAuthenticateResponse resp =
                (UserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("userAuthenticate", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.termianlAuthenticate()", appInfos);
            }
            
            LogTools.debugLog(logger,
                "PortalEngine.terminalAuthenticate() end sendPost to server[userAuthenticate],response=",
                resp);
            
            return resp;
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            if (IReadTools.isNotNeedPrintStack(e.getExceptionCode()))
            {
                logger.error("user termianlAuthenticate failed", appInfos);
                logger.warn("", e);
            }
            else
            {
                logger.error("user termianlAuthenticate failed", appInfos, e);
            }
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 客户端登陆鉴权 修改：2012.2.29 REQ-867 完善秒杀活动适配规则，增加channelCode参数传入
     * 
     * @param userid
     * @param msisdn
     * @param clientHash
     * @param clientVersion
     * @param wapIp
     * @param isCheckCHash
     * @param sLoginType
     * @param channelCode 渠道参数
     * @return
     * @throws PortalException
     */
    
    public UserAuthenticateResponse terminalAuthenticate(String userid, String msisdn, String clientHash,
        String clientVersion, String wapIp, String isCheckCHash, String sLoginType, String channelCode,
        String userAgent)
        throws PortalException
    
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion},
                {"isCheckCHash", isCheckCHash}};
            logger.debug("Enter PortalEngine.termianlAuthenticate()", appInfos);
        }
        try
        {
            UserAuthenticateRequest request = new UserAuthenticateRequest();
            request.setMobile(msisdn);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setClientHash(clientHash);
            request.setClientVersion(clientVersion);
            request.setUserId(userid);
            request.setWapIp(wapIp);
            request.setIsCheckCHash(isCheckCHash);
            request.setLoginType(sLoginType);
            // add by lkf27347 at 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode,userAgent参数传入 begin
            request.setChannelCode(channelCode);
            request.setUserAgent(userAgent);
            // add by b lkf27347 2012-2-29 for REQ-867
            // 完善秒杀活动适配规则，增加channelCode,userAgent参数传入 end
            
            UserAuthenticateResponse resp =
                (UserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("userAuthenticate", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos =
                    {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.termianlAuthenticate()", appInfos);
            }
            
            return resp;
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"clientHash", clientHash}, {"clientVersion", clientVersion}};
            if (IReadTools.isNotNeedPrintStack(e.getExceptionCode()))
            {
                logger.error("user termianlAuthenticate failed", appInfos);
                logger.warn("", e);
            }
            else
            {
                logger.error("user termianlAuthenticate failed", appInfos, e);
            }
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 用户鉴权
     * 
     * @param msisdn 用户手机号码
     * @param userId 用户名
     * @throws PortalException [参数说明]
     * 
     * @return String [错误码]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String userAuthor(String msisdn, String userId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"userId", userId}};
            logger.debug("Enter PortalEngine.userAuthor()", appInfo);
        }
        try
        {
            DRMUserAuthenticateRequest dAuthenticateRequest = new DRMUserAuthenticateRequest();
            dAuthenticateRequest.setMsisdn(msisdn);
            dAuthenticateRequest.setUserId(userId);
            IreadXStream ireadXStream = new IreadXStream();
            String xml = ireadXStream.toXML(dAuthenticateRequest, DRMUserAuthenticateRequest.class);
            String url = PortalServer.getInstance().getEngineURL("drmUserAuthenticate");
            
            String resultCode = HttpTools.getInstance().sendHttpRequestReutrnResultCode(url, xml);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"userId", userId}};
                logger.debug("Exit PortalEngine.userAuthor()", appInfo);
            }
            return resultCode;
        }
        catch (PortalException e)
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"userId", userId}};
            logger.debug("Exit PortalEngine.userAuthor()", appInfo);
            logger.error("user termianlAuthenticate failed", appInfo, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 
     * 根据内容id和要查询的图书类型，获取同一类型的书项信息
     * 
     * @param contentId
     * @param type
     * @return [参数说明]
     * 
     * @return GetContentRecommendResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetContentRecommendResponse getBookByType(String contentId, String type, String start, String count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.debug("Enter PortalEngine.termianlAuthenticate()", appInfos);
        }
        
        GetContentRecommendRequest getContentRecommendRequest = new GetContentRecommendRequest();
        getContentRecommendRequest.setBookId(contentId);
        getContentRecommendRequest.setRecommendType(type);
        getContentRecommendRequest.setStart(start);
        getContentRecommendRequest.setCount(count);
        getContentRecommendRequest.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
        GetContentRecommendResponse getContentRecommendResponse;
        try
        {
            getContentRecommendResponse = (GetContentRecommendResponse)PortalServer.getInstance()
                .sendPostRequest("getAssociateBook", getContentRecommendRequest);
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.debug("Exit PortalEngine.userAuthor()", appInfos);
            logger.error("user termianlAuthenticate failed", appInfos, e);
            throw e;
        }
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.debug("Exit PortalEngine.userAuthor()", appInfo);
        }
        return getContentRecommendResponse;
        
    }
    
    /**
     * 
     * 根据内容id和要类型查询推荐图书
     * 
     * @param contentId
     * @param type
     * @return [参数说明]
     * 
     * @return GetContentRecommendResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     * @author lKF13186
     */
    public GetContentRecommendResponse getContentRecommend(String contentId, String type, String start, String count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.debug("Enter PortalEngine.getContentRecommend()", appInfos);
        }
        
        GetContentRecommendRequest getContentRecommendRequest = new GetContentRecommendRequest();
        getContentRecommendRequest.setBookId(contentId);
        getContentRecommendRequest.setRecommendType(type);
        getContentRecommendRequest.setStart(start);
        getContentRecommendRequest.setCount(count);
        getContentRecommendRequest.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
        if (String.valueOf(Types.SERIAL_SAME_TYPE_BOOK).equals(type))
        {
            getContentRecommendRequest.setNum(String.valueOf(Types.GET_SERIAL_SAME_TYPE_BOOK_OF_ALL_LIST));
        }
        
        GetContentRecommendResponse getContentRecommendResponse;
        try
        {
            getContentRecommendResponse = (GetContentRecommendResponse)PortalServer.getInstance()
                .sendPostRequest("getContentRecommend", getContentRecommendRequest);
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.warn(e.toString(), appInfos);
            throw e;
        }
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", contentId}, {"type", type}, {"start", start}, {"count", count}};
            logger.debug("Exit PortalEngine.getContentRecommend()", appInfo);
        }
        return getContentRecommendResponse;
        
    }
    
    // modify by zKF39164 at 2011-12-14 for IRD-21411 begin
    /**
     * 调用Server的同类型图书推荐获取接口
     * 
     * @param bookclassId 书籍分类标识
     * @param rankDateType 榜类型（日，月，周，总）
     * @param rankType 排行榜依据（评论，点击，订购，用户推荐，搜索，下载排行）
     * @param start 开始位置
     * @param count 需要返回的数量
     * @param total 需要返回的总的数量
     * @return 推荐内容响应
     * @throws PortalException [参数说明]
     * 
     * @return GetContentRecommendResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetContentRecommendResponse getSametypeContentRecommend(String formatTypeId, String bookclassId,
        String rankType, String rankDateType, int start, int count, int total)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"formatTypeId", formatTypeId}, {"bookclassId", bookclassId},
                    {"rankDateType", rankDateType}, {"rankType", rankType}};
                logger.debug("Enter PortalEngine.getSametypeContentRecommend()", appInfo);
            }
            
            GetSametypeContentRecommendRequest request = new GetSametypeContentRecommendRequest();
            // modify by lKF42842 at Oct 24, 2011 for REQ-745 begin
            request.setBookId(null); // 该参数不使用
            // modify by lKF42842 at Oct 24, 2011 for REQ-745 end
            
            // 支持版式ID查询同类型推荐
            request.setFormatTypeId(formatTypeId);
            
            request.setBookclassId(bookclassId);
            request.setRecommendType(String.valueOf(Types.RECOMMEND_SAME_TYPE_BOOK));
            request.setRankType(rankType);
            request.setRanDateType(rankDateType);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            request.setNum(String.valueOf(total));
            request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
            GetContentRecommendResponse response = (GetContentRecommendResponse)PortalServer.getInstance()
                .sendPostRequest("getSametypeContentRecommend", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"formatTypeId", formatTypeId}, {"bookclassId", bookclassId},
                    {"rankDateType", rankDateType}, {"rankType", rankType}};
                logger.debug("Exit PortalEngine.getSametypeContentRecommend()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    // modify by zKF39164 at 2011-12-14 for IRD-21411 end
    
    /**
     * 获取热词信息列表
     * 
     * @param hotWordType
     * @return [参数说明]
     * 
     * @author lKF13186
     * 
     * @return Object [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<String> getHotWord(String hotWordType, String startNo, String count)
        throws PortalException
    {
        List<String> hotWordsList = new ArrayList<String>();
        try
        {
            GetHotwordListRequest request = new GetHotwordListRequest();
            request.setKeywordType(hotWordType);
            request.setStart(startNo);
            request.setCount(count);
            GetHotwordListResponse response =
                (GetHotwordListResponse)PortalServer.getInstance().sendPostRequest("getHotwordList", request);
            List<HotwordInfo> hotWordInfoList = response.getHotwordList();
            int hotWordInfoSize = hotWordInfoList == null ? 0 : hotWordInfoList.size();
            if (0 >= hotWordInfoSize)
            {
                logger.debug("---PortalEngine's getHotWord method hotWordInfoList's size is 0.---");
            }
            else
            {
                for (int i = 0; i < hotWordInfoSize; i++)
                {
                    HotwordInfo hotWordInfo = hotWordInfoList.get(i);
                    String hotKey = hotWordInfo.getKeyword() == null ? "" : hotWordInfo.getKeyword();
                    hotWordsList.add(hotKey);
                }
            }
            
        }
        catch (PortalException e)
        {
            logger.error("---PortalEngine's getHotWord method response has error.---" + e.getMessage());
            // e.printStackTrace();
        }
        return hotWordsList;
    }
    
    /**
     * 获取所有的排行榜类型
     * 
     * @return
     * @throws PortalException [参数说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public RankSettingResponse filterRankType()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getRankType()");
        }
        
        // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
        String action = "filterRankType";
        String url = PortalServer.getInstance().getEngineURL(action) + "?accessType=" + SystemConstants.PORTAL_TYPE;
        
        // 发送请求报文
        String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
        
        // modify by kf39172 at Oct 17, 2011 for REQ-809 end
        
        // 解析返回的报文
        IreadXStream xstream = new IreadXStream();
        xstream.alias("Response", RankSettingResponse.class);
        xstream.alias("rankType", RankTypeBean.class);
        xstream.alias("rankTimeType", RankTimeTypeBean.class);
        
        // 返回标签对象
        RankSettingResponse resp = (RankSettingResponse)xstream.fromXML(resXml);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getRankType()");
        }
        
        return resp;
    }
    
    /**
     * 获取所有的排行榜类型
     * 
     * @param catalogId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return RankSettingResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public RankSettingResponse filterRankType(String rankRange)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getRankType()");
        }
        if ("0".equals(rankRange))
        {
            rankRange = "10";
        }
        
        // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
        
        String action = "filterRankType";
        String url = PortalServer.getInstance().getEngineURL(action) + "?accessType=" + SystemConstants.PORTAL_TYPE
            + "&bookType=" + rankRange;
        
        // 发送请求报文
        String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
        // modify by kf39172 at Oct 17, 2011 for REQ-809 end
        
        // 解析返回的报文
        IreadXStream xstream = new IreadXStream();
        xstream.alias("Response", RankSettingResponse.class);
        xstream.alias("rankType", RankTypeBean.class);
        xstream.alias("rankTimeType", RankTimeTypeBean.class);
        
        // 返回标签对象
        RankSettingResponse resp = (RankSettingResponse)xstream.fromXML(resXml);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getRankType()");
        }
        
        return resp;
    }
    
    /**
     * 排行榜查询
     * 
     * @param rankStandard 时间类型
     * @param rankType 排行依据类型
     * @param start 起始序号
     * @param count 查询总数
     * @return
     * @throws PortalException [参数说明] *
     * @return RankItem[] [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * 
     * @author lKF13186.
     * @see [类、类#方法、类#成员]
     */
    public RankItem[] getRankInfos(String rankStandard, String rankType, int start, int count)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"rankStandard", rankStandard}, {"rankType", rankType}};
                logger.debug("Enter PortalEngine.getRankInfos()", appInfo);
            }
            
            GetRankRequest request = new GetRankRequest();
            request.setRankType(rankType);
            request.setRankDateType(rankStandard);
            request.setRankStart(String.valueOf(start));
            request.setRankCount(String.valueOf(count));
            
            GetRankResponse response = (GetRankResponse)PortalServer.getInstance().sendPostRequest("getRank", request);
            
            List<RankInfo> infoList = response.getRankList();
            
            RankItem[] rankItems = getRankItems(infoList, rankType);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"rankStandard", rankStandard}, {"rankType", rankType}};
                logger.debug("Exit PortalEngine.getRankInfos()", appInfo);
            }
            
            return rankItems;
        }
        catch (PortalException e)
        {
            logger.error("GetRanks failed", new String[][] {{"rankStandard", rankStandard}, {"rankType", rankType}}, e);
            throw e;
        }
    }
    
    /**
     * 获取某本书的排行数值
     * 
     * @param contentId
     * @return [参数说明]
     * 
     * @return BookRankValue [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @author lKF13186
     * @see [类、类#方法、类#成员]
     */
    public BookRankValue getBookRankValue(String contentId)
        throws PortalException
    {
        BookRankValue bookRankValue = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"contentId", contentId}};
                logger.debug("Enter PortalEngine.getBookRankValue()", appInfo);
            }
            
            GetBookRankRequest request = new GetBookRankRequest();
            request.setBookId(contentId);
            
            GetBookRankResponse response =
                (GetBookRankResponse)PortalServer.getInstance().sendPostRequest("getBookRank", request);
            
            bookRankValue = response.getBookRankInfo();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"contentId", contentId}};
                logger.debug("Exit PortalEngine.getBookRankValue()", appInfo);
            }
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        return bookRankValue;
    }
    
    /**
     * 查询客户端登录信息
     * 
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return LoginPageModel [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public LoginPageModel getTerminalLoginInfo()
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getTerminalLoginInfo()");
            }
            
            // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
            String action = "getLoginPage";
            String url = PortalServer.getInstance().getEngineURL(action) + "?portalType=" + SystemConstants.PORTAL_TYPE;
            String xml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
            
            // modify by kf39172 at Oct 17, 2011 for REQ-809 end
            
            // 解析返回的报文
            IreadXStream xstream = new IreadXStream();
            xstream.alias("Response", GetLoginPageResponse.class);
            GetLoginPageResponse response = (GetLoginPageResponse)xstream.fromXML(xml);
            LoginPageModel model = null;
            if (null != response)
            {
                model = response.getLoginPage();
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getTerminalLoginInfo()");
            }
            return model;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 获取终端门户的目录建立时间
     * 
     * @param rankStandard
     * @param rankType
     * @param start
     * @param count
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     * @author lKF13186 2009-5-8
     */
    public String getNodeOnlineTime()
        throws PortalException
    {
        
        GetOnlineTimeResponse response =
            (GetOnlineTimeResponse)PortalServer.getInstance().sendPostRequest("getNodeOnlineTime", null);
        if (null == response)
        {
            return "";
        }
        return response.getOnlineTime();
        
    }
    
    /**
     * 查询测试用户列表
     * 
     * @param type
     * @param pageType
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<String> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<String> getTestUserList(String type, String pageType)
        throws PortalException
    {
        List<String> testUserList = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"type", type}, {"pageType", pageType}};
                logger.debug("Enter PortalEngine.getTestUserList()", appInfo);
            }
            
            GetTestUserListRequest request = new GetTestUserListRequest();
            request.setPageType(pageType);
            request.setType(type);
            
            GetTestUserListResponse response =
                (GetTestUserListResponse)PortalServer.getInstance().sendPostRequest("getTestUserList", request);
            
            testUserList = response.getTestUserList();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"type", type}, {"pageType", pageType}};
                logger.debug("Exit PortalEngine.getTestUserList()", appInfo);
            }
            
            return testUserList;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 根据书Id获取包月栏目
     * 
     * @param request
     * @return
     * @throws ParameterException
     * 
     */
    public String getMonthPayCatalog(String bookId)
    {
        String nodeId = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookId", bookId}};
                logger.debug("Enter PortalEngine.getMonthPayCatalog()", appInfo);
            }
            
            GetCatalogRequest request = new GetCatalogRequest();
            request.setBookId(bookId);
            
            GetCatalogResponse response =
                (GetCatalogResponse)PortalServer.getInstance().sendPostRequest("getMonthPayCatalog", request);
            
            List<NodeInfo> list = response.getNodeList();
            if (list != null && !list.isEmpty())
            {
                nodeId = list.get(0).getId();
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getMonthPayCatalog()");
            }
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        
        return nodeId;
    }
    
    /**
     * 根据书Id获取包月栏目列表
     * 
     * @param bookId
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<String> getMonthPayCatalogList(String bookId)
    {
        List<String> nodeIds = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookId", bookId}};
                logger.debug("Enter PortalEngine.getMonthPayCatalog()", appInfo);
            }
            
            GetCatalogRequest request = new GetCatalogRequest();
            request.setBookId(bookId);
            
            GetCatalogResponse response =
                (GetCatalogResponse)PortalServer.getInstance().sendPostRequest("getMonthPayCatalog", request);
            
            List<NodeInfo> list = response.getNodeList();
            if (list != null && !list.isEmpty())
            {
                nodeIds = new ArrayList<String>();
                for (NodeInfo nodeInfo : list)
                {
                    nodeIds.add(nodeInfo.getId());
                }
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getMonthPayCatalog()");
            }
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        
        return nodeIds;
    }
    
    /**
     * 用户等级列表查询
     * 
     * @return [参数说明]
     * 
     * @return List<GradeInfo> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<GradeInfo> queryGradeInfoList()
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.queryGradeInfoList()");
            }
            
            // 生成请求报文，并发送http请求
            GetGradeInfoListResponse response =
                (GetGradeInfoListResponse)PortalServer.getInstance().sendPostRequest("queryGradeInfoList", null);
            
            List<GradeInfo> gradeInfoList = null;
            if (response != null)
            {
                gradeInfoList = response.getGradeInfoList();
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.queryGradeInfoList()");
            }
            return gradeInfoList;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 增加用户反馈
     * 
     * @return [参数说明]
     * 
     * @return List<GradeInfo> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addFeedback(String msisdn, String content, String type)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.addFeedback()" + Arrays.toString(appInfos));
            }
            AddUserCommentRequest request = new AddUserCommentRequest();
            request.setMobile(msisdn);
            request.setCommentContent(content);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setType(type);
            
            // 生成请求报文，并发送http请求
            PortalServer.getInstance().sendPostRequest("addUserComment", request);
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 获得首页相关信息
     * 
     * @param msisdn
     * @param clientHash
     * @param clientVersion
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetUserHomePageResponse getBookHomePage(String msisdn, String homeChannelID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getHomePageInfo()", appInfos);
        }
        try
        {
            GetUserHomePageRequest request = new GetUserHomePageRequest();
            request.setMobile(msisdn);
            // modify by hKF48608 at Dec 9, 2011 for REQ-845 begin
            request.setChannelId(homeChannelID);
            // modify by hKF48608 at Dec 9, 2011 for REQ-845 end
            
            GetUserHomePageResponse resp =
                (GetUserHomePageResponse)PortalServer.getInstance().sendPostRequest("getUserPageInfo", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.getHomePageInfo()", appInfos);
            }
            
            return resp;
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.error("user getHomePageInfo failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 设置首页相关信息
     * 
     * @param msisdn
     * @param clientHash
     * @param clientVersion
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addExtendUserInfo(String msisdn, String pageId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"pageId", pageId}};
            logger.debug("Enter PortalEngine.addExtendUserInfo()", appInfos);
        }
        try
        {
            AddExtendUserInfoRequest request = new AddExtendUserInfoRequest();
            request.setMsisdn(msisdn);
            request.setTermPageId(pageId);
            request.setWwwStyleID("");
            
            PortalServer.getInstance().sendPostRequest("addExtendUserInfo", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"pageId", pageId}};
                logger.debug("Exit PortalEngine.addExtendUserInfo()", appInfos);
            }
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"pageId", pageId}};
            logger.error("user addExtendUserInfo failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 修改用户扩展信息
     * 
     * @param request
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void mofigyExtentUserInfo(AddExtendUserInfoRequest request)
        throws PortalException
    {
        PortalServer.getInstance().sendPostRequest("addExtendUserInfo", request);
    }
    
    /**
     * 设置预订更新提醒方式
     * 
     * @param msisdn
     * @param updateType
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addExtendUserInfo_UpdateType(String msisdn, String updateType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"updateType", updateType}};
            logger.debug("Enter PortalEngine.addExtendUserInfo_UpdateType()", appInfos);
        }
        try
        {
            AddExtendUserInfoRequest request = new AddExtendUserInfoRequest();
            request.setMsisdn(msisdn);
            request.setScheduleUpdate(updateType);
            
            PortalServer.getInstance().sendPostRequest("addExtendUserInfo", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"updateType", updateType}};
                logger.debug("Exit PortalEngine.addExtendUserInfo_UpdateType()", appInfos);
            }
            
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"updateType", updateType}};
            logger.error("user addExtendUserInfo_updateType failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 校验wap网关IP
     * 
     * @param wapIP
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void terminalJudge(String userId, String clientVersion, String clientHash, String sLoginType)
        throws PortalException
    {
        UserAuthenticateRequest request = new UserAuthenticateRequest();
        request.setClientHash(clientHash);
        request.setClientVersion(clientVersion);
        request.setUserId(userId);
        request.setLoginType(sLoginType);
        
        try
        {
            PortalServer.getInstance().sendPostRequest("checkWapIP", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获取指定书讯ID的书讯详细信息
     * 
     * @param bookNewsID
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BookNewsItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BookNewsItem getBookNews(String bookNewsID)
        throws PortalException
    {
        if (Util.isEmpty(bookNewsID))
        {
            logger.error("bookNewsID is null");
            return null;
        }
        
        BookNewsItem bookNewsItem = null;
        List<String> bookNewsIDLst = new ArrayList<String>();
        bookNewsIDLst.add(bookNewsID);
        List<BookNewsItem> bookNewsItemLst = getBatchBookNews(bookNewsIDLst);
        if (Util.isEmpty(bookNewsItemLst))
        {
            logger.error("bookNewsItemLst is null,bookNewsID=" + bookNewsID);
            return null;
        }
        bookNewsItem = bookNewsItemLst.get(0);
        return bookNewsItem;//
    }
    
    /**
     * 根据指定的书讯ID列表获取书讯详细信息列表
     * 
     * @param bookNewsIDLst 待获取的书讯ID信息列表
     * @return 重新组装后的书讯信息列表
     * @throws PortalException [参数说明]
     * 
     * @return List<BookNewsItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<BookNewsItem> getBatchBookNews(List<String> bookNewsIDLst)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookNewsID", bookNewsIDLst == null ? "" : bookNewsIDLst.toString()}};
            logger.debug("Enter PortalEngine.getBatchBookNews()", appInfo);
        }
        
        if (Util.isEmpty(bookNewsIDLst))
        {
            logger.error("bookNewsIDLst is null");
            return null;
        }
        
        List<BookNewsItem> bookNewsItemLst = new ArrayList<BookNewsItem>();
        try
        {
            // 创建请求对象
            GetBatchBookNewsInfoRequest request = new GetBatchBookNewsInfoRequest();
            request.setBookNewIdLst(bookNewsIDLst);// 设置请求的书讯ID列表
            GetBatchBookNewsInfoResponse response = (GetBatchBookNewsInfoResponse)PortalServer.getInstance()
                .sendPostRequest("getBatchBookNewsInfo", request);// 发送请求
            if (null == response)
            {
                logger.error("resonse is null");
                return null;
            }
            
            List<BookNews> bookNewsLst = response.getBookNewsLst();
            if (Util.isEmpty(bookNewsLst))
            {
                logger.error("bookNewsList is null,bookNewsIdLst=" + bookNewsIDLst);
                return bookNewsItemLst;
            }
            
            for (BookNews bookNews : bookNewsLst)
            {
                BookNewsItem bookNewsItem = BookCacheManager.getInstance().buildBookNewsItem(bookNews);// 重新组装
                bookNewsItemLst.add(bookNewsItem);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookID", bookNewsIDLst == null ? "" : bookNewsIDLst.toString()}};
            logger.debug("Exit PortalEngine.getBatchBookNews()", appInfo);
        }
        
        return bookNewsItemLst;
    }
    
    /**
     * 获取书讯的上一篇及下一篇
     * 
     * @param bookNewsID
     * @return [参数说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public BookNews getPreNextBookNews(String nodeID, String bookNewsID)
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookNewsID", bookNewsID}};
                logger.debug("Enter PortalEngine.getPreNextBookNews()", appInfo);
            }
            
            GetTransBookNewsRequest request = new GetTransBookNewsRequest();
            request.setCatalogId(nodeID);
            request.setBookNewsId(bookNewsID);
            
            GetTransBookNewsResponse response =
                (GetTransBookNewsResponse)PortalServer.getInstance().sendPostRequest("getTransBookNews", request);
            
            BookNews contentInfo = response.getBookNews();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookNewsID}};
                logger.debug("Exit PortalEngine.getPreNextBookNews()", appInfo);
            }
            
            return contentInfo;
        }
        catch (PortalException e)
        {
            logger.error("Error happened in PortalEngine.getPreNextBookNews()!" + e.toString());
            return null;
        }
    }
    
    /**
     * 获取书讯的相关书讯
     * 
     * @param bookNewsID
     * @return [参数说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public List<AssociateBookNews> getRelativeBookNews(String bookNewsID, String start, String count)
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookNewsID", bookNewsID}};
                logger.debug("Enter PortalEngine.getRelativeBookNews()", appInfo);
            }
            
            GetAssBookNewsListRequest request = new GetAssBookNewsListRequest();
            request.setBookNewsID(bookNewsID);
            request.setStart(start);
            request.setCount(count);
            
            GetAssBookNewsListResponse response =
                (GetAssBookNewsListResponse)PortalServer.getInstance().sendPostRequest("getAssBookNewsList", request);
            
            List<AssociateBookNews> bookNewsList = response.getAssBookNewsList();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookNewsID}};
                logger.debug("Exit PortalEngine.getRelativeBookNews()", appInfo);
            }
            
            return bookNewsList;
        }
        catch (PortalException e)
        {
            logger.error("Error happened in PortalEngine.getRelativeBookNews()!" + e.toString());
            return null;
        }
    }
    
    /**
     * 获取书讯的相关图书
     * 
     * @param bookNewsID
     * @return [参数说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public List<BookInfo> getRelativeBooks(String bookNewsID, String start, String count)
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookNewsID", bookNewsID}};
                logger.debug("Enter PortalEngine.getRelativeBooks()", appInfo);
            }
            
            GetAssBookListRequest request = new GetAssBookListRequest();
            request.setBookNewsID(bookNewsID);
            request.setStart(start);
            request.setCount(count);
            
            GetAssBookListResponse response =
                (GetAssBookListResponse)PortalServer.getInstance().sendPostRequest("getAssBookList", request);
            
            List<BookInfo> bookList = response.getAssBookList();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"bookID", bookNewsID}};
                logger.debug("Exit PortalEngine.getRelativeBooks()", appInfo);
            }
            
            return bookList;
        }
        catch (PortalException e)
        {
            logger.error("Error happened in PortalEngine.getRelativeBooks()!" + e.toString());
            return null;
        }
    }
    
    /**
     * 获取书讯信息列表
     * 
     * @param bookNewsID
     * @return [参数说明]
     * 
     * @see [类、类#方法、类#成员]
     */
    public String[] getBookNewsIDs(String nodeID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.getBookNewsIDs()", appInfo);
            }
            
            GetBookNewsListRequest request = new GetBookNewsListRequest();
            request.setCatalogId(nodeID);
            request.setStart(String.valueOf(0));
            request.setCount(String.valueOf(0));
            
            GetBookNewsListResponse response =
                (GetBookNewsListResponse)PortalServer.getInstance().sendPostRequest("getBookNewsList", request);
            
            List<BookNews> contentInfoList = response.getBookNewsList();
            
            String[] bookNewsIds = null;
            if (null != contentInfoList && 0 != contentInfoList.size())
            {
                bookNewsIds = new String[contentInfoList.size()];
                BookNews bookNews = null;
                for (int i = 0; i < contentInfoList.size(); i++)
                {
                    bookNews = contentInfoList.get(i);
                    if (null == bookNews)
                    {
                        continue;
                    }
                    
                    bookNewsIds[i] = bookNews.getBookNewsID();
                }
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getBookNewsIDs()", appInfo);
            }
            
            return bookNewsIds;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 用户消息列表展示
     * 
     * @param sendMsisdn 发送方号码
     * @param recMsisdn 接收方号码
     * @param type 消息类型
     * @param isRead 是否已读
     * @param start 分页开始
     * @param count 分页数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<UserMessage> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetStaInMessageListResponse getStaInMessageList(String sendMsisdn, String recMsisdn, String type,
        String isRead, String start, String count)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", recMsisdn}};
                logger.debug("Enter PortalEngine.getStaInMessageList()", appInfo);
            }
            
            GetStaInMessageListRequest request = new GetStaInMessageListRequest();
            
            request.setSendMsisdn(sendMsisdn);
            request.setRecMsisdn(recMsisdn);
            request.setType(type);
            request.setIsRead(isRead);
            request.setStart(start);
            request.setCount(count);
            
            GetStaInMessageListResponse response =
                (GetStaInMessageListResponse)PortalServer.getInstance().sendPostRequest("getStaInMessageList", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", recMsisdn}};
                logger.debug("Exit PortalEngine.getStaInMessageList()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 发送站内消息
     * 
     * @param sendMsisdn 发送方号码
     * @param recMsisdn 接收方号码
     * @param type 消息类型
     * @param title 消息标题
     * @param message 消息体
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addStaInMessage(String sendMsisdn, String recMsisdn, String type, String title, String message,
        String channelCode, String sourceType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"sendMsisdn", sendMsisdn}, {"recMsisdn", recMsisdn}, {"title", title},};
                logger.debug("Enter PortalEngine.addStaInMessage()", appInfo);
            }
            
            AddStaInMessageRequest request = new AddStaInMessageRequest();
            
            request.setMessage(message);
            request.setRecMsisdn(recMsisdn);
            request.setSendMsisdn(sendMsisdn);
            request.setTitle(title);
            request.setType(type);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setChannelCode(channelCode);
            request.setSourceType(sourceType);
            
            PortalServer.getInstance().sendPostRequest("addBetweenUserMessage", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"sendMsisdn", sendMsisdn}, {"recMsisdn", recMsisdn}, {"title", title},};
                logger.debug("Exit PortalEngine.addStaInMessage()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 删除站内消息
     * 
     * @param msgIds 消息标识
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deteleStaInMessage(String msgIds)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msgIds", msgIds}};
                logger.debug("Enter PortalEngine.deteleStaInMessage()", appInfo);
            }
            
            DeteleStaInMessageRequest request = new DeteleStaInMessageRequest();
            request.setMsgIDs(msgIds);
            
            PortalServer.getInstance().sendPostRequest("deteleStaInMessage", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msgIds", msgIds}};
                logger.debug("Exit PortalEngine.deteleStaInMessage()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 删除站内消息
     * 
     * @param msgIds 消息标识
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void deleteAllStaInMessage(String msisdn, String messageType)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"messageType", messageType}};
                logger.debug("Enter PortalEngine.deteleAllStaInMessage()", appInfo);
            }
            
            DeleteAllStaInMessageRequest request = new DeleteAllStaInMessageRequest();
            request.setRecmsisdn(msisdn);
            request.setType(messageType);
            PortalServer.getInstance().sendPostRequest("deleteAllStaInMessage", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"messageType", messageType}};
                logger.debug("Exit PortalEngine.deteleAllStaInMessage()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    // add by c00126000 at 2011-11-4 for IRD-20746 begin
    /**
     * 判断用户是否能够继续下载包月专区下的图书
     * 
     * @author c00126000
     * @param msisdn 手机号
     * @param catalogId 包月专区ID
     * @return 是否能够下载
     * @throws PortalException
     */
    public boolean checkUserCanDownload(String msisdn, String catalogId, String contentId)
        throws PortalException
    {
        if (null == catalogId || "".equals(catalogId))
        {
            return true;
        }
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"catalogId", catalogId}};
                logger.debug("Enter PortalEngine.checkUserCanDownload()", appInfo);
            }
            
            GetCountOfDownloadRequest request = new GetCountOfDownloadRequest();
            request.setMdn(msisdn);
            request.setCatalogId(catalogId);
            // modify by lKF42842 at Nov 11, 2011 for IRD-20964 begin
            request.setContentId(contentId);
            // modify by lKF42842 at Nov 11, 2011 for IRD-20964 end
            
            // modify by zkf27942 at 2012-7 for REQ-1453 begin
            BookItem bookItem = PortalCacheManager.getBookInfo(contentId);
            
            boolean isVoice_type = null != bookItem && Types.VOICE_TYPE.equals(bookItem.getItemType());
            
            if (isVoice_type)
            {
                // 听书类型给server传入类型
                request.setType(SystemConstants.VOICE_BOOK_TYPE_FOR_DOWNLOAD);
            }
            
            GetCountOfDownloadResponse getCountOfDownloadResponse =
                (GetCountOfDownloadResponse)PortalServer.getInstance().sendPostRequest("getCountOfDownload", request);
            
            if (null != getCountOfDownloadResponse)
            {
                int count = getCountOfDownloadResponse.getCount(); // 用户当月下载次数
                int maxCount = getCountOfDownloadResponse.getMaxCount(); // 最大下载次数
                
                // modify by zkf27942 at 2012-7 for REQ-1453 begin
                if (isVoice_type)
                {
                    // 听书最大下载次数
                    maxCount = PortalCacheManager.getConfigInt("vbook_down_max_times", 10);
                }
                // modify by zkf27942 at 2012-7, 2011 for REQ-1453 end
                
                return count < maxCount;
            }
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"catalogId", catalogId}};
                logger.debug("Exit PortalEngine.checkUserCanDownload()", appInfo);
            }
        }
        catch (PortalException e)
        {
            logger.error("checkUserCanDownload failed: catalogId = " + catalogId + ", msisdn = " + catalogId, e);
            throw new PortalException();
        }
        return false;
    }
    
    // add by c00126000 at 2011-11-4 for IRD-20746 end
    
    /**
     * 添加用户下载记录
     * 
     * @param msgIds 消息标识
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addDownloadRecord(String msisdn, String catalogId, String contentId, String chapterId,
        String fasciculeId, String contractId)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"catalogId", catalogId}, {"contentId", contentId}};
                logger.debug("Enter PortalEngine.addDownloadRecord()", appInfo);
            }
            
            AddDownloadRecordRequest request = new AddDownloadRecordRequest();
            request.setMdn(msisdn);
            request.setCatalogId(catalogId);
            request.setContentId(contentId);
            // modify by hKF48608 at Dec 23, 2011 for IRD-21707 begin
            request.setChapterId(chapterId);
            // modify by hKF48608 at Dec 23, 2011 for IRD-21707 end
            request.setFasciculeId(fasciculeId);
            
            request.setContractId(contractId);
            // modify by zkf27942 at 2012-7 for REQ-1453 begin
            BookItem bookItem = PortalCacheManager.getBookInfo(contentId);
            
            if (null != bookItem && Types.VOICE_TYPE.equals(bookItem.getItemType()))
            {
                // 听书类型给server传入类型
                request.setType(SystemConstants.VOICE_BOOK_TYPE_FOR_DOWNLOAD);
            }
            
            PortalServer.getInstance().sendPostRequest("addDownloadRecord", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo =
                    {{"msisdn", msisdn}, {"catalogId", catalogId}, {"contentId", String.valueOf(contentId)}};
                logger.debug("Exit PortalEngine.addDownloadRecord()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 根据系列ID查询系列信息
     * 
     * @param msisdn
     * @param serialID
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public SerialInfoItem getSerialInfo(String serialID)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"serialID", serialID}};
                logger.debug("Enter PortalEngine.getSerialInfo()", appInfo);
            }
            GetSeriesInfoRequest request = new GetSeriesInfoRequest();
            request.setSeriesId(serialID);
            
            GetSeriesInfoResponse response =
                (GetSeriesInfoResponse)PortalServer.getInstance().sendPostRequest("getSerialInfo", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"serialID", serialID}};
                logger.debug("Exit PortalEngine.getSerialInfo()", appInfo);
            }
            
            SeriesInfo serailInfo = response.getSeriesInfo();
            
            SerialInfoItem serialItem = new SerialInfoItem(serailInfo);
            String[] contentIds = this.getSerialContent(serialID);
            if (null != contentIds && 0 != contentIds.length)
            {
                serialItem.setContentIds(contentIds);
            }
            
            return serialItem;
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据系列ID查询系列内容
     * 
     * @param msisdn
     * @param serialID
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public String[] getSerialContent(String serialID)
    {
        String[] contentIds = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"serialID", serialID}};
                logger.debug("Enter PortalEngine.getSerialContent()", appInfo);
            }
            GetSeriesContentRequest request = new GetSeriesContentRequest();
            request.setSeriesId(serialID);
            // add by zkf29543 for REQ-1348 at 2012-7-30 15:16:27
            request.setSortType(SystemConstants.SORT_NEW_TYPE);
            // end REQ-1348
            GetSeriesContentResponse response =
                (GetSeriesContentResponse)PortalServer.getInstance().sendPostRequest("getSerialContent", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"serialID", serialID}};
                logger.debug("Exit PortalEngine.getSerialContent()", appInfo);
            }
            
            List<String> contentIdList = response.getContentIdList();
            if (null != contentIdList && 0 != contentIdList.size())
            {
                contentIds = new String[contentIdList.size()];
                contentIds = contentIdList.toArray(contentIds);
            }
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        
        return contentIds;
    }
    
    /**
     * 阅读站内消息
     * 
     * @param msisdn
     * @param serialID
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void readStaInMessage(String msgIds)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msgIds", msgIds}};
                logger.debug("Enter PortalEngine.readStaInMessage()", appInfo);
            }
            ReadStaInMessageRequest request = new ReadStaInMessageRequest();
            request.setMsgIDs(msgIds);
            
            PortalServer.getInstance().sendPostRequest("readStaInMessage", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msgIds", msgIds}};
                logger.debug("Exit PortalEngine.readStaInMessage()", appInfo);
            }
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 内容下载鉴权
     * 
     * @param msisdn
     * @param contentId
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public boolean downloadAuthenticate(String msisdn, String contentId, String chapterId, String fasciculeId,
        String contentType, String sLoginType, String sourceType)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"contentId", contentId}};
            logger.debug("Enter PortalEngine.downloadAuthenticate()", appInfo);
        }
        
        boolean isCanDownload = true;
        try
        {
            DownloadAuthenticateRequest request = new DownloadAuthenticateRequest();
            request.setMobile(msisdn);
            request.setBookId(contentId);
            request.setChapterId(chapterId);
            request.setFasciculeId(fasciculeId);
            request.setContentType(contentType);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setLoginType(sLoginType);
            request.setSourceType(sourceType);
            
            PortalServer.getInstance().sendPostRequest("downloadAuthenticate", request);
        }
        catch (PortalException e)
        {
            isCanDownload = false;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"contentId", contentId}};
            logger.debug("Exit PortalEngine.downloadAuthenticate()", appInfo);
        }
        
        return isCanDownload;
    }
    
    /**
     * 获取漫画和杂志的适配信息
     * 
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<ScreenAdaptInfo> getAdaptInfoList()
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAdaptInfoList()");
        }
        
        List<ScreenAdaptInfo> adapteInfoList = null;
        GetScreenAdaptInfoListRequest request = new GetScreenAdaptInfoListRequest();
        request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
        try
        {
            GetScreenAdaptInfoListResponse response = (GetScreenAdaptInfoListResponse)PortalServer.getInstance()
                .sendPostRequest("getScreenAdaptInfoList", request);
            if (null != response)
            {
                adapteInfoList = response.getScreenAdaptInfoList();
            }
        }
        catch (PortalException e)
        {
            logger.error("", e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getAdaptInfoList()");
        }
        
        return adapteInfoList;
    }
    
    /**
     * 获取区块目录下已经选择的内容信息响应
     * 
     * @param blockId
     * @param catalogId
     * @return
     * @see [类、类#方法、类#成员]
     */
    public String[] getBlockBooks(String blockId, String catalogId)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockId}, {"catalogId", catalogId}};
            logger.debug("Enter PortalEngine.getBlockBooks()", appInfo);
        }
        
        GetBlockBooksResponse response = null;
        String[] bookIDs = null;
        try
        {
            GetBlockBooksRequest request = new GetBlockBooksRequest();
            request.setBlockId(blockId);
            request.setCatalogId(catalogId);
            response = (GetBlockBooksResponse)PortalServer.getInstance().sendPostRequest("getBlockBooks", request);
            
            List<String> bookIdList = new ArrayList<String>();
            if (null != response)
            {
                List<BookIdBean> list = response.getBookIdList();
                
                for (BookIdBean bookIdBean : list)
                {
                    bookIdList.add(bookIdBean.getBookId());
                }
                
                bookIDs = new String[bookIdList.size()];
                bookIDs = bookIdList.toArray(bookIDs);
            }
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockId}, {"catalogId", catalogId}};
            logger.debug("Exit PortalEngine.getBlockBooks()", appInfo);
        }
        
        return bookIDs;
    }
    
    /**
     * 获取用户消费记录<一句话功能简述>
     * 
     * @param msisdn
     * @param begintime
     * @param endtime
     * @param start
     * @param count
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetConsumeRecordListResponse getConsumeHistoryList(String msisdn, String begintime, String endtime,
        String start, String count, String bookId)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}, {"begintime", begintime}, {"endtime", endtime}};
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getConsumeHistoryList()", appInfo);
        }
        
        try
        {
            GetConsumeRecordListRequest request = new GetConsumeRecordListRequest();
            request.setMsisdn(msisdn);
            request.setBegintime(begintime);
            request.setEndtime(endtime);
            request.setStart(start);
            request.setCount(count);
            request.setChargeType(String.valueOf(Types.CHARGE_SUB_AND_PUR));
            request.setBookId(bookId);
            
            GetConsumeRecordListResponse rsp = (GetConsumeRecordListResponse)PortalServer.getInstance()
                .sendPostRequest("getConsumeRecordList", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getConsumeHistoryList()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw (e);
        }
    }
    
    /**
     * 促销包订购
     * 
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param channelCode 渠道代码
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     * @author dKF17249 2009-9-9
     */
    public void subscribeSalespackage(String msisdn, String productID, String channelCode, String clientVersion,
        String sourceIp, String sLoginType, String bearType, String sourceType, String idfa)
        throws PortalException
    {
        try
        {
            BatchPurchaseRequest request = new BatchPurchaseRequest();
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setChannelCode(channelCode);
            request.setUaName(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setSourceType(sourceType);
            // 增加手机IMEI或IDFA modified by yangpeng
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            PortalServer.getInstance().sendPostRequest("batchPurchase", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获取用户书券信息<一句话功能简述>
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetUserTicketInfoResponse getUserTicketInfo(String msisdn)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}};
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserTicketInfo()", appInfo);
        }
        
        // Begin modify by hejianli 101670 at 2011-12-01 for REQ843
        // 游客不查询server
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 101670 at 2011-12-01 for REQ843
        
        GetUserTicketInfoRequest request = new GetUserTicketInfoRequest();
        request.setMsisdn(msisdn);
        
        GetUserTicketInfoResponse rsp =
            (GetUserTicketInfoResponse)PortalServer.getInstance().sendPostRequest("getUserTicketInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserTicketInfo()", appInfo);
        }
        
        return rsp;
    }
    
    /**
     * 获取首页导航配置
     * @param preference
     * @return
     */
    public ClientNavigationConfigResponse getClientNavigationConfig(String clientType){
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getClientNavigationConfig()  :" + "clientType = :" + clientType );
        }
         
        ClientNavigationConfigRequest request = new ClientNavigationConfigRequest(); 
        request.setClientType(clientType);
        
        ClientNavigationConfigResponse response = null;
        try
        {
            response = (ClientNavigationConfigResponse)PortalServer.getInstance()
                .sendPostRequest("getClientNavigationConfig", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getClientNavigationConfig :" + e.toString());            
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getClientNavigationConfig()");
        }
        return response;
    }
    
    /**
     * <获取用户赠送书券和充值书券余额>
     * 
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetMyTicketStatResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetMyTicketStatResponse getMyTicketStat(String msisdn)
        throws PortalException
    {
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getMyTicketStat()", new String[][] {{"msisdn", msisdn}});
        }
        
        GetMyTicketStatResponse response = ThreadLocalContext.getMyTicketStatFromContext(msisdn);
        if (response != null)
        {
            return response;
        }
        
        GetMyTicketStatRequest request = new GetMyTicketStatRequest();
        request.setMsisdn(msisdn);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        
        response = (GetMyTicketStatResponse)PortalServer.getInstance().sendPostRequest("getMyTicketStat", request);
        
        ThreadLocalContext.putMyTicketStatIntoContext(msisdn, response);
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine.getMyTicketStat()", new String[][] {{"msisdn", msisdn}});
        }
        return response;
    }
    
    /**
     * 获取某书的已订购章节<一句话功能简述>
     * 
     * @param msisdn
     * @param bookId
     * @param start
     * @param count
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetSubscribeChaptersResponse getSubscribeChapters(String msisdn, String bookId, String start, String count)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}, {"start", start}, {"count", count}};
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getSubscribeChapters()", appInfo);
        }
        
        try
        {
            GetSubscribeChaptersRequest request = new GetSubscribeChaptersRequest();
            request.setMobile(msisdn);
            request.setBookId(bookId);
            request.setStart(start);
            request.setCount(count);
            
            GetSubscribeChaptersResponse rsp = (GetSubscribeChaptersResponse)PortalServer.getInstance()
                .sendPostRequest("getSubscribeChapters", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getSubscribeChapters()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw (e);
        }
    }
    
    /**
     * 获取某书的未订购章节<一句话功能简述>
     * 
     * @param msisdn
     * @param bookId
     * @param start
     * @param count
     * @param isBatchDownload
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetUnSubChaptersResponse getUnSubChapters(String msisdn, String bookId, String start, String count,
        String isBatchDownload)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}, {"start", start}, {"count", count},
            {"isBatchDownload", isBatchDownload}};
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUnSubChapters()", appInfo);
        }
        
        try
        {
            GetUnSubChaptersRequest request = new GetUnSubChaptersRequest();
            request.setMobile(msisdn);
            request.setBookId(bookId);
            request.setStart(start);
            request.setCount(count);
            // 批量下载鉴权？ 1 是 0否
            request.setIsBatchDownload(isBatchDownload);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            GetUnSubChaptersResponse rsp =
                (GetUnSubChaptersResponse)PortalServer.getInstance().sendPostRequest("getUnSubChapters", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getUnSubChapters()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw (e);
        }
    }
    
    /**
     * 详情页用户-图书资费信息显示
     * 
     * @param mobile 手机号码
     * @param bookId 书项标识
     * @param chapterId 章节标识
     * @return [参数说明]
     * 
     * @return BookChargeInfoResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BookChargeInfoResponse getBookChargeInfo(String msisdn, String bookId, String sLoginType)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}, {"bookId", bookId}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBookChargeInfo()", appInfo);
        }
        
        try
        {
            BookChargeInfoRequest request = new BookChargeInfoRequest();
            request.setMobile(msisdn);
            request.setBookId(bookId);
            request.setLoginType(sLoginType);
            BookChargeInfoResponse rsp =
                (BookChargeInfoResponse)PortalServer.getInstance().sendPostRequest("getBookChargeInfo", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getBookChargeInfo()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 获取用户预订更新的内容列表
     * 
     * @param msisdn
     * @param start
     * @param count
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetUserPreSubscriptionResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetUserPreSubscriptionResponse getBookUpdateList(String msisdn, String start, String count,
        String contentType, String scheduleType)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBookUpdateList()", appInfo);
        }
        
        try
        {
            GetUserPreSubscriptionRequest request = new GetUserPreSubscriptionRequest();
            request.setMobile(msisdn);
            request.setStart(start);
            request.setCount(count);
            request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
            request.setScheduleType(scheduleType);
            // 内容类型适配 如果类型内容为空，就适配所有的内容类型
            if (StringUtils.isEmpty(contentType))
            {
                contentType = "1;2;3;5";// 内容类型,1图书,2漫画,3杂志,5有声读物
            }
            request.setContentType(contentType);
            
            GetUserPreSubscriptionResponse rsp = (GetUserPreSubscriptionResponse)PortalServer.getInstance()
                .sendPostRequest("getUserPreSubscription", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getBookUpdateList()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 解除 手持绑定
     * 
     * @param msisdn
     * @param unbrandType
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void unbindHandSet(String msisdn)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.unbindHandSet()", appInfo);
        }
        
        try
        {
            UnBindHandSetInfoRequest request = new UnBindHandSetInfoRequest();
            request.setMsisdn(msisdn);
            request.setUnbrandType("6");// DOTO 解绑方式 6 为客户端 iserver下个版本中定义
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            PortalServer.getInstance().sendPostRequest("unbindHandSet", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.unbindHandSet()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 获取九宫格下的滚动广告内容列表
     * 
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<BookNews> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<BookNews> getAdList()
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.getAdList()");
            }
            GetBookNewsListResponse response =
                (GetBookNewsListResponse)PortalServer.getInstance().sendPostRequest("getTerAdInfoList", null);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getAdList()");
            }
            List<BookNews> bookNewsList = response.getBookNewsList();
            
            return bookNewsList;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获取用户的绑定状态
     * 
     * @param msisdn 用户手机号码
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetBindStatusResponse getBindStatus(String msisdn)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBindStatus()", appInfo);
        }
        
        try
        {
            UnBindHandSetInfoRequest request = new UnBindHandSetInfoRequest();
            request.setMsisdn(msisdn);
            
            GetBindStatusResponse response =
                (GetBindStatusResponse)PortalServer.getInstance().sendPostRequest("getBindStatus", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getBindStatus()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 
     * 检查用户是否订购过专区
     *
     * @author hlf
     * @param msisdn 用户身份ID
     * @param catalogId 包月专区ID
     * @param portType 门户类型
     * @return
     * @throws PortalException
     */
    public CheckSubscribeCatalogResponse checkSubscribeCatalog(String msisdn, String catalogId, String portType)
        throws PortalException
    {
        LogTools.debugLog(logger,
            "Enter PortalEngine.checkSubscribeCatalog()",
            new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"portType", portType}});
        
        CheckSubscribeCatalogRequest request = new CheckSubscribeCatalogRequest();
        request.setMobile(msisdn);
        request.setCatalogId(catalogId);
        request.setPortType(portType);
        
        try
        {
            LogTools.debugLog(logger,
                "Enter PortalEngine.checkSubscribeCatalog() call server[checkSubscribeCatalog] request=",
                request);
            
            CheckSubscribeCatalogResponse response = (CheckSubscribeCatalogResponse)PortalServer.getInstance()
                .sendPostRequest("checkSubscribeCatalog", request);
            
            LogTools.debugLog(logger,
                "Exit PortalEngine.checkSubscribeCatalog() call server[checkSubscribeCatalog] response=",
                response);
            
            return response;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 
     * 检查用户是否订购过tts包月专区
     *
     * @author hlf
     * @param msisdn 用户身份ID
     * @param catalogId 包月专区ID
     * @param portType 门户类型
     * @return
     * @throws PortalException
     */
    public CheckSubscribeCatalogResponse checkSubscribeCatalog2(String identifyId, String ttsCatalogType,
        String portType)
        throws PortalException
    {
        LogTools.debugLog(logger,
            "Enter PortalEngine.checkSubscribeCatalog()",
            new String[][] {{"identifyId", identifyId}, {"ttsCatalogType", ttsCatalogType}, {"portType", portType}});
        
        CheckSubscribeCatalogRequest request = new CheckSubscribeCatalogRequest();
        request.setMobile(identifyId);
        request.setTtsCatalogType(ttsCatalogType);
        request.setPortType(portType);
        
        try
        {
            LogTools.debugLog(logger,
                "Enter PortalEngine.checkSubscribeCatalog() call server[checkSubscribeCatalog] request=",
                request);
            
            CheckSubscribeCatalogResponse response = (CheckSubscribeCatalogResponse)PortalServer.getInstance()
                .sendPostRequest("checkSubscribeCatalog", request);
            
            LogTools.debugLog(logger,
                "Exit PortalEngine.checkSubscribeCatalog() call server[checkSubscribeCatalog] response=",
                response);
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 根据图书ID或者分册ID获取图书分册信息<一句话功能简述>
     * 
     * @param bookId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<FasciculeItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetFasciculesResponse getFasciculeItems(String bookId, String fasciculeId, String msisdn)
        throws PortalException
    {
        String[][] appInfo = {{"bookId", bookId}};
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getFasciculeItems()", appInfo);
        }
        
        try
        {
            GetFasciculesRequest request = new GetFasciculesRequest();
            request.setBookId(bookId);
            request.setFasciculeId(fasciculeId);
            request.setMobile(msisdn);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            // GetFasciculesResponse rsp = (GetFasciculesResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getFasciculesInfo", request);
            
            // 调用aserver的getFasciculesInfo接口
            GetFasciculesResponse rsp =
                (GetFasciculesResponse)PortalServer.getInstance().sendPostRequest("getFasciculesInfo", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getFasciculeItems()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw (e);
        }
    }
    
    /**
     * 根据手机号码查询用户信息 龙雄
     * 
     * @return [参数说明]
     * 
     * @return UserInfo [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public RegionAdapterInfo getRegionAdapterInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getRegionAdapterInfo()", appInfo);
        }
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询地域信息
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            if (StrUtil.isNotEmpty(msisdn))
            {
                msisdn = getUserInfo(msisdn).getAccountName();
            }
            RegionAdapterInfoRequest request = new RegionAdapterInfoRequest();
            request.setMsisdn(msisdn);
            
            RegionAdapterInfoResponse response =
                (RegionAdapterInfoResponse)PortalServer.getInstance().sendPostRequest("getRegionAdapterInfo", request);
            
            RegionAdapterInfo regionAdapterInfo = response.getRegionAdapterInfo();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getRegionAdapterInfo", appInfos);
            }
            return regionAdapterInfo;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 获取用户登录时图片Url和Id
     * 
     * @param clientVersion 客户端版本号
     * @param channelCode 渠道代码
     * @param isGetAdInfo 是否获取广告信息，0或null不返回广告信息，1返回广告信息
     * @return [参数说明]
     * @return Object [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetSupImageInfoResponse getSupImageinfo(String clientVersion, String channelCode, String isGetAdInfo)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"clientVersion", clientVersion}};
            logger.debug("Enter PortalEngine.getSupImageinfo()", appInfo);
        }
        try
        {
            GetSupImageInfoRequest request = new GetSupImageInfoRequest();
            request.setClientVersion(clientVersion);
            request.setChannelCode(channelCode);
            request.setIsGetAdInfo(isGetAdInfo);
            GetSupImageInfoResponse response =
                (GetSupImageInfoResponse)PortalServer.getInstance().sendPostRequest("getSupImageinfo", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"clientVersion", clientVersion}};
                logger.debug("Exit PortalEngine.getSupImageinfo()", appInfo);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * <获取皮肤列表>
     * 
     * @return [参数说明] zKF26768
     * @return GetSkinListResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetSkinListResponse getSkinList(String clientVersion, String msisdn, int start, int count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"clientVersion", clientVersion}, {"start", start + ""}};
            logger.debug("Enter PortalEngine.getSkinList()", appInfo);
        }
        
        GetSkinListRequest getSkinListRequest = new GetSkinListRequest();
        getSkinListRequest.setVersion(clientVersion);
        getSkinListRequest.setMsisdn(msisdn);
        getSkinListRequest.setStart(start);
        getSkinListRequest.setCount(count);
        
        GetSkinListResponse response =
            (GetSkinListResponse)PortalServer.getInstance().sendPostRequest("getSkinListByVersion", getSkinListRequest);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"clientVersion", clientVersion}, {"start", start + ""}};
            logger.debug("Exit PortalEngine.getSkinList()", appInfo);
        }
        return response;
    }
    
    // add by l00192991 at 2011-10-11 for REQ-757 begin
    /**
     * 用户批量赠送接口
     * 
     * @param srcMdn 推荐发起方手机号码
     * @param destMdn 推荐接收方手机号码
     * @param message push消息内容
     * @param pushURL 用户访问url
     * @param type 推荐类型 1:推荐好友内容;2:推荐好友业务
     * @param contentType 内容类型
     * @param bookId //书籍ID
     * @param leaveword 留言
     * @param bookItem 书籍对象
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BatchPresentResponse batchPrsent(String srcMdn, String destMdn, String type, String contentType,
        String bookId, BookItem bookItem, String channelId, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String pushUrl, String pushStId, String leaveWord,
        String sourceType)
        throws PortalException
    {
        BatchPresentResponse bathcPresent = null; // 此处响应对象可能由server提供。
        try
        {
            
            logger.debug("Enter PortalEngine.batchPrsent() ");
            // 构造发生请求报文
            
            BatchPresentRequest request = new BatchPresentRequest(); // 待替换。
            request.setMobile(srcMdn); // 赠送者手机号码
            request.setReceiveMobile(getIdentityIds(destMdn)); // 被赠送者
            request.setBookId(bookId); // 书籍ID
            request.setTag(type); // 赠送标识
            request.setBookName(bookItem.getBookName()); // 书项名称
            request.setAccessType(String.valueOf(Types.PORTAL_TERMINAL)); // 业务介入方式
            request.setProductId(bookItem.getProductId()); // 产品标识
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            if (null == bookItem.getProductInfo())
            {
                request.setPromotionId(null);
            }
            else
            {
                request.setPromotionId(bookItem.getProductInfo().getPromotionFlag()); // 促销标识
            }
            request.setContentType(contentType); // 内容类型
            request.setCatalogId(bookItem.getDefaultCategoryId()); // 真实专区和虚拟专区
            request.setChannelCode(channelId); // 渠道来源
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setPushUrl(pushUrl);
            request.setPushStId(pushStId);
            request.setLeaveWord(leaveWord);
            request.setSourceType(sourceType);
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            bathcPresent =
                (BatchPresentResponse)PortalServer.getInstance().sendPostRequest("batchBookPresent", request);
            
            logger.debug("Exit PortalEngine.batchPrsent()");
            
        }
        catch (PortalException e)
        {
            throw e;
        }
        return bathcPresent;
        
    }
    
    /**
     * 
     * 通过手机号码批量获取用户身份标识
     * 
     * @author cKF74481
     * @param msisdns 手机号码
     * @return 身份标识
     */
    private String getIdentityIds(String msisdns)
    {
        if (StrUtil.isEmpty(msisdns))
        {
            return msisdns;
        }
        String[] msisdnArr = msisdns.split(SepConstant.SEMICOLON);
        StringBuilder sb = new StringBuilder();
        for (String msisdn : msisdnArr)
        {
            sb.append(IReadTools.getIdentityIdByAccount(msisdn, DefineConstant.ACCOUNTTYPE_MOBILE));
            sb.append(SepConstant.SEMICOLON);
        }
        
        String identityIds = sb.toString();
        if (identityIds.endsWith(SepConstant.SEMICOLON))
        {
            identityIds = identityIds.substring(0, identityIds.length() - 1);
        }
        
        return identityIds;
    }
    
    // add by l00192991 at 2011-10-11 for REQ-757 end
    
    /**
     * 用户贈送接口，发生推荐push消息
     * 
     * @param srcMdn 推荐发起方手机号码
     * @param destMdn 推荐接收方手机号码
     * @param message push消息内容
     * @param pushURL 用户访问url
     * @param type 推荐类型 1:推荐好友内容;2:推荐好友业务
     * @param contentType 内容类型
     * @param bookId //书籍ID
     * @param leaveword 留言
     * @param bookItem 书籍对象
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String prsent(String srcMdn, String destMdn, String type, String contentType, String bookId,
        BookItem bookItem, String channelId, String clientVersion, String sourceIp, String clientDiscount,
        String sLoginType, String bearType)
        throws PortalException
    {
        String tsID = "";
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"srcMdn", srcMdn}, {"destMdn", destMdn}};
                logger.debug("Enter PortalEngine.prsent()", appInfo);
            }
            
            // 构造发生请求报文
            PurchaseRequest request = new PurchaseRequest();
            request.setMobile(srcMdn); // 赠送者手机号码
            request.setReceiveMobile(destMdn); // 被赠送者号码
            request.setBookId(bookId); // 书籍ID
            request.setTag(type); // 赠送标识
            request.setBookName(bookItem.getBookName()); // 书项名称
            request.setAccessType(String.valueOf(Types.PORTAL_TERMINAL)); // 业务介入方式
            request.setProductId(bookItem.getProductId()); // 产品标识
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            if (null == bookItem.getProductInfo())
            {
                request.setPromotionId(null);
            }
            else
            {
                request.setPromotionId(bookItem.getProductInfo().getPromotionFlag()); // 促销标识
            }
            request.setContentType(contentType); // 内容类型
            request.setCatalogId(bookItem.getDefaultCategoryId()); // 真实专区和虚拟专区
            request.setChannelCode(channelId); // 渠道来源
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            BookPresentResponse bookPresentResponse =
                (BookPresentResponse)PortalServer.getInstance().sendPostRequest("bookPresent", request);
            if (null != bookPresentResponse)
            {
                tsID = bookPresentResponse.getTsId();
            }
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"srcMdn", srcMdn}, {"destMdn", destMdn}};
                logger.debug("Exit PortalEngine.prsent()", appInfo);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
        return tsID;
        
    }
    
    /**
     * 资费信息查询接口
     * 
     * @param mobile 手机号码
     * @param bookId 书项标识
     * @param chapterId 章节标识
     * @return [参数说明]
     * 
     * @return BookChargeInfoResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BookPriceResponse getBookPrice(String msisdn, String bookId, String clientDiscount, String sLoginType)
        throws PortalException
    {
        String[][] appInfo = {{"msisdn", msisdn}, {"bookId", bookId}};
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBookChargeInfo()", appInfo);
        }
        
        try
        {
            BookChargeInfoRequest request = new BookChargeInfoRequest();
            request.setMobile(msisdn);
            request.setBookId(bookId);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            BookPriceResponse rsp =
                (BookPriceResponse)PortalServer.getInstance().sendPostRequest("getBookPrice", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getBookChargeInfo()", appInfo);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            throw (e);
        }
    }
    
    /**
     * 查询系统配置参数
     * 
     * @param key
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String getSysConfig(String key)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("ENTER PortalEngine.getSysConfig() key= " +key);
        }
        try
        {
            // modify by kf39172 at Oct 17, 2011 for REQ-809 begin
            String action = "getSysConfig";
            // 请求地址
            
            String url = PortalServer.getInstance().getEngineURL(action) + "?key=" + key;
            
            // 发送请求报文
            String resXml = HttpTools.getInstance().sendHttpRequestByGet2(url, action);
            // modify by kf39172 at Oct 17, 2011 for REQ-809 end
            
            // 解析返回的报文
            XStream xstream = PortalServer.getInstance().getXstream("getSysConfig");
            
            GetSysConfigResponse response = (GetSysConfigResponse)xstream.fromXML(resXml);
            
            // 返回标签对象
            SysConfigInfo sysConfigInfo = response.getSysConfigInfo();
            
            String configValue = null;
            
            if (sysConfigInfo != null)
            {
                configValue = sysConfigInfo.getValue();
            }
            
            return configValue;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 
     * 获取指定序列值
     * 
     * @author zWX237650
     * @param sequenceName sequenceName
     * @return 序列值
     * @throws ParameterException ParameterException
     * @throws BusinessLogicException BusinessLogicException
     */
    public String getSequence(String sequenceName)
    {
        GetSequenceRequest request = new GetSequenceRequest();
        request.setSequenceName(sequenceName);
        
        if (logger.isDebugEnable())
        {
            logger.debug("get getSequence from iserver. GetSequenceRequest=" + request);
        }
        
        GetSequenceResponse response = new GetSequenceResponse();
        
        try
        {
            response = (GetSequenceResponse)PortalServer.getInstance().sendPostRequest("getSequence", request);
        }
        catch (PortalException e)
        {
            logger.debug("get getSequence from iserver error!");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("get getSequence from iserver. GetSequenceResponse=" + response);
        }
        
        if (null != response)
        {
            return response.getSequence();
        }
        
        return "";
    }
    
    /**
     * 获取赠送信息列表 2010-05-21 龙雄
     * 
     * @param msisdn
     * @param start
     * @param count
     * @return [参数说明]
     * 
     * @return PreSentBookResponse [返回类型说明]
     * @throws PortalException
     * @throws Exception
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public PreSentBookResponse getPreSentBookList(String msisdn, int start, int count, String contentType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getRegionAdapterInfo()", appInfo);
        }
        
        try
        {
            GetPresentRecordRequest request = new GetPresentRecordRequest();
            request.setMsisdn(msisdn); // 设置手机号码
            request.setStart(String.valueOf(start)); // 设置开始点
            request.setCount(String.valueOf(count)); // 设置返回数
            request.setType("1"); // 设置赠送类型
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            request.setContentType(contentType);
            
            PreSentBookResponse response =
                (PreSentBookResponse)PortalServer.getInstance().sendPostRequest("getPreSentBookList", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getUserInfos", appInfos);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获取被赠送信息列表 2010-05-21 龙雄
     * 
     * @param msisdn
     * @param start
     * @param count
     * @return [参数说明]
     * 
     * @return PreSentBookResponse [返回类型说明]
     * @throws PortalException
     * @throws Exception
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public PreSentBookResponse getReceiveBookList(String msisdn, int start, int count, String contentType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getReceiveBookList()", appInfo);
        }
        
        try
        {
            GetPresentRecordRequest request = new GetPresentRecordRequest();
            request.setMsisdn(msisdn); // 设置手机号码
            request.setStart(String.valueOf(start)); // 设置开始点
            request.setCount(String.valueOf(count)); // 设置返回数
            request.setType("2"); // 设置赠送类型
            request.setContentType(SystemConstants.PORTAL_TYPE);
            request.setContentType(contentType);
            
            PreSentBookResponse response =
                (PreSentBookResponse)PortalServer.getInstance().sendPostRequest("getReceiveBookList", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getReceiveBookList", appInfos);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
        
    }
    
    /**
     * 图书目录适配
     * 
     * @param msisdn
     * @param bookId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BooksDirectoryAdaptationResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BooksDirectoryAdaptationResponse getBooksDirectoryAdaptation(String msisdn, String bookId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getBooksDirectoryAdaptation()", appInfo);
        }
        try
        {
            BooksDirectoryAdaptationRequest request = new BooksDirectoryAdaptationRequest();
            request.setMobile(msisdn);
            request.setBookId(bookId);
            BooksDirectoryAdaptationResponse response = (BooksDirectoryAdaptationResponse)PortalServer.getInstance()
                .sendPostRequest("booksDirectoryAdaptation", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getBooksDirectoryAdaptation", appInfos);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 获取推广信息
     * 
     * @param msisdn 手机号码
     * @param channelId 渠道参数
     * @param clientVersion 客户端版本信息
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BooksDirectoryAdaptationResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetChannelPopularizeInfoResponse getPopChannelInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getChannelPopularizeInfo()", appInfo);
        }
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询推广信息
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        try
        {
            GetChannelPopularizeInfoRequest request = new GetChannelPopularizeInfoRequest();
            request.setMobile(msisdn);
            
            GetChannelPopularizeInfoResponse response = (GetChannelPopularizeInfoResponse)PortalServer.getInstance()
                .sendPostRequest("getPopChannelInfo", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getPopChannelInfo", appInfos);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 更新推广信息
     * 
     * @param msisdn 手机号码
     * @param channelId 渠道参数
     * @param clientVersion 客户端版本信息
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BooksDirectoryAdaptationResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetChannelPopularizeInfoResponse updatePopChannelInfo(String msisdn, String channelId, String clientVersion,
        String updateType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"channelId", channelId}, {"clientVersion", clientVersion},
                {"clientVersion", updateType}};
            logger.debug("Enter PortalEngine.getChannelPopularizeInfo()", appInfo);
        }
        try
        {
            GetChannelPopularizeInfoRequest request = new GetChannelPopularizeInfoRequest();
            request.setMobile(msisdn);
            request.setChannelId(channelId);
            request.setClientVersion(clientVersion);
            request.setUpdateType(updateType);
            GetChannelPopularizeInfoResponse response = (GetChannelPopularizeInfoResponse)PortalServer.getInstance()
                .sendPostRequest("updatePopChannelInfo", request);
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"channelId", channelId}, {"clientVersion", clientVersion}};
                logger.debug("Enter PortalEngine.updatePopChannelInfo", appInfos);
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 包月访问话单接口
     * 
     * @param msisdn 手机号码
     * @param productid 产品编号
     * @param accessType 终端类型
     * @param ChannelCode 渠道参数
     * @param UserAgent 终端名称
     * @return currentCatalog wap当前目录
     * @throws PortalException [参数说明]
     * 
     * @return BooksDirectoryAdaptationResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void queryMonthCatalog(String msisdn, String productId, String accessType, String channelCode,
        String userAgent, String currentCatalog, String sLoginType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"productId", productId}, {"accessType", accessType},
                {"channelCode", channelCode}, {"userAgent", userAgent}, {"currentCatalog", currentCatalog}};
            logger.debug("Enter PortalEngine.queryMonthCatalog()", appInfo);
        }
        try
        {
            QueryPhoneCallByMonthRequest request = new QueryPhoneCallByMonthRequest();
            request.setMobile(msisdn);
            request.setProductId(productId);
            request.setAccessType(accessType);
            request.setChannelCode(channelCode);
            request.setUserAgent(userAgent);
            request.setCurrentCatalog(currentCatalog);
            request.setLoginType(sLoginType);
            PortalServer.getInstance().sendPostRequest("queryPhoneCallLIstByMonthInfo", request);
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 包月专区下免费章节记录包月查询话单 KF27344
     * 
     * @param msisdn 手机号码
     * @param bookItem 书籍信息
     * @param userAgent 终端名称
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BooksDirectoryAdaptationResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void getRecordFirstVisitFreeCDR(BookItem bookItem, String msisdn, String userAgent, String chapterID,
        String channelCode, String sLoginType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getRecordFirstVisitFreeCDR()", appInfo);
        }
        
        try
        {
            FirstVisitFreeRequest request = new FirstVisitFreeRequest();
            request.setMobile(msisdn); // 手机号码
            request.setBookId(bookItem.getBookId()); // 书籍标识
            request.setChapterId(chapterID); // 章节ID
            request.setProductId(bookItem.getProductId()); // 产品ID
            request.setUserAgent(userAgent); // 终端名称
            request.setChannelCode(channelCode); // 渠道ID
            request.setAccessType(SystemConstants.SOURCETYPE_CLIENT); // 访问门户类型
            request.setLoginType(sLoginType);
            
            PortalServer.getInstance().sendPostRequest("recordFirstVisitFreeCDR", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getRecordFirstVisitFreeCDR", appInfos);
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * <一句话功能简述>通过书籍ID获取读者数
     * 
     * @param bookid
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return SeenThisBookCountsResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public SeenThisBookCountsResponse getSeenThisBookCounts(String bookid)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookid", bookid}};
            logger.debug("PortalEngine.getSeenThisBookCounts() start", appInfo);
        }
        SeenThisBookCountsRequest request = new SeenThisBookCountsRequest();
        request.setBookId(bookid);
        SeenThisBookCountsResponse response =
            (SeenThisBookCountsResponse)PortalServer.getInstance().sendPostRequest("getSeenThisBookCounts", request);
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookid", bookid}};
            logger.debug("PortalEngine.getSeenThisBookCounts() end", appInfo);
        }
        return response;
    }
    
    /**
     * 得到所有的配置的访问IP地址
     * 
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<HandsetAccessIp> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<TerminalAccessIp> getTerminalAccessIps()
        throws PortalException
    {
        List<TerminalAccessIp> list = null;
        GetTerminalAccessIpResponse response = null;
        try
        {
            response =
                (GetTerminalAccessIpResponse)PortalServer.getInstance().sendPostRequest("getTerminalAccessIp", null);
        }
        catch (PortalException e)
        {
            throw new PortalException(e);
        }
        if (null != response)
        {
            list = response.getAccessIps();
        }
        return list;
    }
    
    /**
     * 查询指定图书列表对应的图书
     * 
     * @param bookIdLst 指定的图书ID列表
     * @return 查询到的指定图书列表信息
     * @throws PortalException [参数说明]
     * 
     * @return List<BookItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BookItem getBookSimpleProductInfo(String bookID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookId", null == bookID ? "" : bookID}};
            logger.debug("Enter PortalEngine.getBookSimpleProductInfo()", appInfo);
        }
        
        if (Util.isEmpty(bookID))
        {
            logger.error("bookIdLst is null");
            return null;
        }
        
        BookItem bookitem = null;// 构造相应结果
        try
        {
            GetBookInfoRequest request = new GetBookInfoRequest();// 构造请求对象
            request.setBookId(bookID);// 设置请求参数
            
            GetBookInfoResponse response =
                (GetBookInfoResponse)PortalServer.getInstance().sendPostRequest("getBookSimpleInfo", request);// 发送请求
            if (Util.isEmpty(response))
            {
                logger.error("response is null");
                return null;
            }
            
            bookitem = new BookItem(response.getBookInfo());
            
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"bookID", null == bookID ? "" : bookID}};
            logger.debug("Exit PortalEngine.getBookSimpleProductInfo()", appInfo);
        }
        
        return bookitem;
    }
    
    /**
     * 鉴权渠道参数校验
     * 
     * @param channelId 渠道参数
     * @param password 渠道密码
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List<BookItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void verifyChannelId(String channelId)
        throws PortalException
    {
        ChannelIdRequest request = new ChannelIdRequest();
        request.setChannelId(channelId);
        // client 不需要校验密码
        request.setIsVerifyPassword("0");
        try
        {
            PortalServer.getInstance().sendPostRequest("verifyChannelId", request);// 发送请求
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"channelId =  " + channelId}};
            logger.debug("Exit PortalEngine.verifyChannelId()", appInfo);
        }
    }
    
    public GetBookFeeDescResponse getBookFeeDesc(GetBookFeeDescRequest request)
        throws PortalException
    {
        
        GetBookFeeDescResponse response =
            (GetBookFeeDescResponse)PortalServer.getInstance().sendPostRequest("getBookFeeDesc", request);// 发送请求
        return response;
    }
    
    /**
     * <同步排行榜数据>
     * 
     * @param map
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public UpdatingRankResponse updatingRank(Map<String, String[][]> map)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.updatingRank()");
        }
        UpdatingRankRequest request = new UpdatingRankRequest();
        request.setBookIdMap(map);
        UpdatingRankResponse response = null;
        try
        {
            response = (UpdatingRankResponse)PortalServer.getInstance().sendPostRequest("updatingRank", request);
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            // e.printStackTrace();
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.updatingRank()");
        }
        return response;
    }
    
    /**
     * <判断该产品是否支持门户>
     * 
     * @param productId
     * @param portalType
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return CheckProductPortalTypeResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public CheckProductPortalTypeResponse checkProductPortalType(String productId, String portalType)
        throws PortalException
    {
        CheckProductPortalTypeRequest request = new CheckProductPortalTypeRequest();
        CheckProductPortalTypeResponse response = null;
        
        try
        {
            request.setProductId(productId);
            request.setPortalType(portalType);
            response = (CheckProductPortalTypeResponse)PortalServer.getInstance()
                .sendPostRequest("checkProductPortalType", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        return response;
    }
    
    /**
     * 添加赠送图书留言
     * 
     * @param bookIdLst 指定的图书ID列表
     * @return 查询到的指定图书列表信息
     * @throws PortalException [参数说明]
     * 
     * @return List<BookItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void addLeaveWordAndStageMsg(String sendMsisdn, String recMsisdn, String type, String message, String title,
        String url, String contentId, String contentType, String shortMessage)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"sendMsisdn", null == sendMsisdn ? "" : sendMsisdn}};
            logger.debug("Enter PortalEngine.addLeaveWordAndStageMsg()", appInfo);
        }
        
        try
        {
            AddLeaveWordAndStageMsgRequest request = new AddLeaveWordAndStageMsgRequest();
            
            request.setRecMsisdn(recMsisdn);
            request.setSendMsisdn(sendMsisdn);
            request.setType(type);
            request.setMessage(message);
            request.setTitle(title);
            
            request.setUrl(url);
            request.setContentId(contentId);
            request.setContentType(contentType);
            request.setShortMessage(shortMessage);
            PortalServer.getInstance().sendPostRequest("addLeaveWordAndStageMsg", request);// 发送请求
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"sendMsisdn", null == sendMsisdn ? "" : sendMsisdn}};
            logger.debug("Exit PortalEngine.addLeaveWordAndStageMsg()", appInfo);
        }
    }
    
    /**
     * <获取BI推荐目录列表>
     * 
     * @throws PortalException [参数说明]
     * 
     * @return List<BookItem> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetRecommendClassResponse getRecommendClass(String msisdn, int start, int count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getRecommendClass(),msisdn=" + msisdn);
        }
        GetRecommendClassResponse response = null;
        try
        {
            GetRecommendClassIdRequest recommendClassIdRequest = new GetRecommendClassIdRequest();
            recommendClassIdRequest.setMsisdn(msisdn);
            recommendClassIdRequest.setStart(String.valueOf(start));
            recommendClassIdRequest.setCount(String.valueOf(count));
            response = (GetRecommendClassResponse)PortalServer.getInstance().sendPostRequest("getRecommendClass",
                recommendClassIdRequest);
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            // e.printStackTrace();
            throw e;
        } // 发送请求
        
        return response;
    }
    
    /**
     * 调用Server接口查询BI推荐给用户的图书
     * 
     * @param msisdn
     * @param start
     * @param count
     * @throws PortalException [参数说明]
     * 
     * @return GetRecommendClassResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetRecommendBookResponse getRecommendBook(String msisdn, String start, String count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"start", start}, {"count", count}};
            logger.debug("Enter PortalEngine.getRecommendBook()", appInfo);
        }
        
        GetRecommendBookRequest request = new GetRecommendBookRequest();
        request.setMsisdn(msisdn);
        request.setStart(start);
        request.setCount(count);
        
        GetRecommendBookResponse response = null;
        try
        {
            response =
                (GetRecommendBookResponse)PortalServer.getInstance().sendPostRequest("getRecommendBook", request);
        }
        catch (PortalException e)
        {
            logger.debug(e.getMessage());
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}, {"start", start}, {"count", count}};
            logger.debug("Exit PortalEngine.getRecommendBook()", appInfo);
        }
        
        return response;
    }
    
    public BookClassInfo getBookClassInfo(String bookClassId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBookClassInfo(),bookClassId=" + bookClassId);
        }
        
        try
        {
            GetBookClassInfoResponse response = null;
            GetBookClassInfoRequest request = new GetBookClassInfoRequest();
            request.setBookClassId(bookClassId);
            response =
                (GetBookClassInfoResponse)PortalServer.getInstance().sendPostRequest("getBookClassInfo", request);
            return response == null ? null : response.getBookClassInfo();
        }
        catch (PortalException e)
        {
            logger.error("getBookClassInfo", e);
            throw e;
        } // 发送请求
        
    }
    
    /**
     * 获取热词区块的热词id列表。
     * 
     * @param blockID 区块ID
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<String> getBlockHotwords(String blockID)
    {
        BlockInfoRequest request = new BlockInfoRequest();
        request.setBlockID(blockID);
        
        HotwordBlockResponse response = null;
        List<String> hotwordList = null;
        try
        {
            response = (HotwordBlockResponse)PortalServer.getInstance().sendPostRequest("getBlockHotWordList", request);
            
            if (null != response)
            {
                hotwordList = response.getHotWordsIdList();
            }
        }
        catch (PortalException e)
        {
            logger.error("get block hotwords fail", e);
        }
        
        return hotwordList;
    }
    
    /**
     * 获取热词详情
     * 
     * @param hotwordsId 热词ID
     * @return response 热词详情对象
     * @throws PortalException PortalException
     * @see [类、类#方法、类#成员]
     */
    public HotwordsResponse getHotwordsInfo(String hotwordsId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getHotwordsInfo(), hotwordsId = " + hotwordsId);
        }
        
        HotwordsRequest request = new HotwordsRequest();
        request.setHotWordId(hotwordsId);
        
        HotwordsResponse response =
            (HotwordsResponse)PortalServer.getInstance().sendPostRequest("getPortalHotwordInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getHotwordsInfo()");
        }
        
        return response;
    }
    
    /**
     * 获取专区Id，省份Id对应的图书Id列表
     * 
     * @param catalogId 专区Id
     * @param provinceId 省份Id
     * @return response 图书列表对象
     * @throws PortalException PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetProvinceOrCityBooksResponse getProvinceBookList(String catalogId, String provinceId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"catalogId", catalogId}, {"provinceId", provinceId}};
            logger.debug("Enter PortalEngine.getProvinceBookList()", appInfos);
        }
        
        GetProvinceOrCityBooksRequest request = new GetProvinceOrCityBooksRequest();
        request.setCatalogId(catalogId);
        request.setAreaId(provinceId);
        
        GetProvinceOrCityBooksResponse response =
            (GetProvinceOrCityBooksResponse)PortalServer.getInstance().sendPostRequest("getProvinceBooks", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getProvinceBookList()");
        }
        
        return response;
    }
    
    /**
     * 获取专区Id，城市Id对应的图书Id列表
     * 
     * @param catalogId 专区Id
     * @param provinceId 省份Id
     * @return response 图书列表对象
     * @throws PortalException PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetProvinceOrCityBooksResponse getCityBookList(String catalogId, String cityId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"catalogId", catalogId}, {"cityId", cityId}};
            logger.debug("Enter PortalEngine.getProvinceBookList()", appInfos);
        }
        
        GetProvinceOrCityBooksRequest request = new GetProvinceOrCityBooksRequest();
        request.setCatalogId(catalogId);
        request.setAreaId(cityId);
        
        GetProvinceOrCityBooksResponse response =
            (GetProvinceOrCityBooksResponse)PortalServer.getInstance().sendPostRequest("getCityBooks", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getProvinceBookList()");
        }
        
        return response;
    }
    
    /**
     * 获取专区Id，图书Id对应的省份Id列表
     * 
     * @param catalogId 专区Id
     * @param provinceId 省份Id
     * @return response 图书列表对象
     * @throws PortalException PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetBookProvincesAndCitysResponse getBookProvinceList(String catalogId, String bookId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"catalogId", catalogId}, {"bookId", bookId}};
            logger.debug("Enter PortalEngine.getProvinceBookList()", appInfos);
        }
        
        GetBookProvincesAndCitysRequest request = new GetBookProvincesAndCitysRequest();
        request.setCatalogId(catalogId);
        request.setBookId(bookId);
        
        GetBookProvincesAndCitysResponse response = (GetBookProvincesAndCitysResponse)PortalServer.getInstance()
            .sendPostRequest("getBookProvincesAndCitys", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getProvinceBookList()");
        }
        
        return response;
    }
    
    /**
     * 获取专区Id，图书Id对应的城市Id列表
     * 
     * @param catalogId 专区Id
     * @param provinceId 省份Id
     * @return response 图书列表对象
     * @throws PortalException PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetProvinceOrCityBooksResponse getBookCityList(String catalogId, String bookId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"catalogId", catalogId}, {"bookId", bookId}};
            logger.debug("Enter PortalEngine.getProvinceBookList()", appInfos);
        }
        
        GetBookProvincesAndCitysRequest request = new GetBookProvincesAndCitysRequest();
        request.setCatalogId(catalogId);
        request.setBookId(bookId);
        
        GetProvinceOrCityBooksResponse response = (GetProvinceOrCityBooksResponse)PortalServer.getInstance()
            .sendPostRequest("getBookProvincesAndCitys", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getProvinceBookList()");
        }
        
        return response;
    }
    
    /**
     * 查询用户包月等级信息接口
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     */
    public String getUserGrade(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getUserGrade()", appInfos);
        }
        
        try
        {
            GetUserGradeRequest request = new GetUserGradeRequest();
            request.setMsisdn(msisdn);
            
            GetUserGradeResponse response =
                (GetUserGradeResponse)PortalServer.getInstance().sendPostRequest("getUserGrade", request);
            
            String userGrade = response.getGrade();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Enter PortalEngine.getUserGrade()", appInfos);
            }
            
            return userGrade;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    public Bookreview getBookreview(String commentId, String contentId, String publishDate)
    {
        GetUserBookreviewResponse response;
        try
        {
            response = getUserBookreviewResponse(commentId, contentId, publishDate);
            if (response != null)
            {
                return response.getBookreview();
            }
        }
        catch (PortalException e)
        {
            logger.error(e.getMessage());
        }
        
        return null;
    }
    
    /**
     * 通过书评ID获取评论信息
     * 
     * @param reviewId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetUserBookreviewResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see CommentManager.getCommendLIst
     */
    public GetUserBookreviewResponse getUserBookreviewResponse(String commentId, String contentId, String publishDate)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", commentId}};
            logger.debug("Enter PortalEngine.getUserBookreviewList()", appInfo);
        }
        
        GetUserBookreviewRequest request = new GetUserBookreviewRequest();
        request.setBookreviewID(commentId);
        request.setPublishDate(publishDate);
        request.setContentID(contentId);
        GetUserBookreviewResponse response =
            (GetUserBookreviewResponse)PortalServer.getInstance().sendPostRequest("getUserBookreview", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", commentId}};
            logger.debug("Exit PortalEngine.getUserBookreviewList()", appInfo);
        }
        
        return response;
    }
    
    /**
     * 获取作家总数
     * 
     * @param reviewId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetUserBookreviewResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see CommentManager.getCommendLIst
     */
    public GetAuthorCountResponse getAuthorCount()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAuthorCount()");
        }
        
        GetAuthorCountRequest request = new GetAuthorCountRequest();
        // 查询启用状态的作家。
        request.setAuthentication("0");
        request.setCommutative("0");
        GetAuthorCountResponse response =
            (GetAuthorCountResponse)PortalServer.getInstance().sendPostRequest("getAuthorCount", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserBookreviewList()");
        }
        
        return response;
    }
    
    /**
     * 批量获取作家信息
     * 
     * @param reviewId
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetUserBookreviewResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see CommentManager.getCommendLIst
     */
    public GetBatchAuthorResponse getBatchAuthor(GetBatchAuthorRequest request)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBatchAuthor()");
        }
        GetBatchAuthorResponse response =
            (GetBatchAuthorResponse)PortalServer.getInstance().sendPostRequest("getBatchAuthor", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getBatchAuthor()");
        }
        
        return response;
    }
    
    /**
     * 重置用户密码
     * 
     * @param suserId
     * @param smsisdn
     * @param clientVersion
     * @param clientHash
     * @param sourceIp 来源ip
     * @param remoteIp 远程ip
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void resetPassword(String suserId, String smsisdn, String clientVersion, String clientHash, String sourceIp,
        String remoteIp)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.resetPassword() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.resetPassword(), params = ",
                new String[][] {{"suserId", suserId}, {"smsisdn", smsisdn}, {"clientVersion", clientVersion},
                    {"clientHash", clientHash}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        CmnetClientResetPwdRequest request = new CmnetClientResetPwdRequest();
        request.setUserId(suserId);
        request.setMobile(smsisdn);
        request.setClientVersion(clientVersion);
        request.setClientHash(clientHash);
        try
        {
            PortalServer.getInstance().sendPostRequest("sendResetPwdMsg", request);
            if (logger.isInfoEnable())
            {
                logger.info("****** Exit PortalEngine.resetPassword() ******");
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 修改用户密码
     * 
     * @param suserId
     * @param smsisdn
     * @param soldPassword
     * @param snewPassword
     * @param sourceIp 来源ip
     * @param remoteIp 远程ip
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void modifyPassword(String suserId, String smsisdn, String soldPassword, String snewPassword,
        String sourceIp, String remoteIp)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.modifyPassword() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.modifyPassword(), params = ",
                new String[][] {{"suserId", suserId}, {"smsisdn", smsisdn}, {"soldPassword", soldPassword},
                    {"snewPassword", snewPassword}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        ChangePasswordRequest request = new ChangePasswordRequest();
        request.setUserId(suserId);
        request.setMobile(smsisdn);
        request.setOldPassword(soldPassword);
        request.setNewPassword(snewPassword);
        try
        {
            PortalServer.getInstance().sendPostRequest("changePassword", request);
            if (logger.isInfoEnable())
            {
                logger.info("****** Exit PortalEngine.modifyPassword() ******");
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 修改用户密码
     * 
     * @param smsisdn
     * @param soldPassword
     * @param snewPassword
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void miguModifyPassword(String smsisdn, String soldPassword, String snewPassword, String identityId,
        String passId, String uSessionId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.miguModifyPassword()");
        }
        
        MiguModifyPassWordReq request = new MiguModifyPassWordReq();
        request.setAccountName(smsisdn);
        request.setOldPassword(soldPassword);
        request.setNewPassword(snewPassword);
        request.setPassid(passId);
        request.setuSessionid(uSessionId);
        request.setProtalType(SystemConstants.PORTAL_TYPE);
        
        PortalServer.getInstance().sendPostRequest("miguModifyPassWord", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.miguModifyPassword()");
        }
        
    }
    
    /**
     * 获得用户状态
     * 
     * @param msisdn
     * @return RegUserStateResponse
     * @throws PortalException [参数说明]
     * 
     * @return GetUserBookreviewResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see CommentManager.getCommendLIst
     */
    public RegUserStateResponse getRegUserState(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getRegUserState()");
        }
        
        RegUserStateRequest request = new RegUserStateRequest();
        request.setMsisdn(msisdn);
        request.setIsQueryVGOP("0");
        
        RegUserStateResponse response =
            (RegUserStateResponse)PortalServer.getInstance().sendPostRequest("getRegUserState", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getRegUserState()");
        }
        return response;
    }
    
    /**
     * CMNET注册接口
     * 
     * @param registType
     * @param msisdn
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public String cmnetUserRegister(String registType, String msisdn, String clientHash, String clientVersion,
        String isCheckClientHash, String password)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.cmnetUserRegister()", appInfos);
        }
        
        try
        {
            // 构造CMNET注册对象
            UserInfo userProfile = new UserInfo();
            userProfile.setMobile(msisdn);
            userProfile.setClientVersion(clientVersion);
            userProfile.setPassword(password);
            
            RegUserRegisterRequest request = new RegUserRegisterRequest();
            request.setUserInfo(userProfile);
            request.setRegistType(registType);
            request.setClientHash(clientHash);
            request.setIsCheckClientHash(isCheckClientHash);
            
            RegUserRegisterResponse resp =
                (RegUserRegisterResponse)PortalServer.getInstance().sendPostRequest("cmnetClientUserRegister", request);
            
            String userId = resp.getUserId();
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.cmnetUserRegister()", appInfos);
            }
            return userId;
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}};
            logger.error("client terminalRegister failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * SMS用户登录鉴权接口
     * 
     * @param simsi
     * @param stoken
     * @param counter
     * @param version
     * @throws PortalException
     */
    public LoginWithSmsTokenResponse loginWithToken(String simsi, String stoken, String rand, int counter,
        String version)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.loginWithToken()");
        }
        
        LoginWithSmsTokenResponse response = null;
        
        LoginWithSmsTokenRequest request = new LoginWithSmsTokenRequest();
        request.setCounter(String.valueOf(counter));
        request.setSimsi(simsi);
        request.setStoken(stoken);
        request.setVersion(version);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 begin
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 end
        if (StrUtil.isNotEmpty(rand))
        {
            request.setRandom(rand);
        }
        response = (LoginWithSmsTokenResponse)PortalServer.getInstance().sendPostRequest("loginWithSmsToken", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.loginWithToken()");
        }
        
        return response;
    }
    
    /**
     * 获取客户端版本的内置密码
     * 
     * @param clientVersion
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public String getVersionPasswd(String version)
    {
        String passwd = "";
        
        GetTerminalSoftInfoRequest request = new GetTerminalSoftInfoRequest();
        request.setVersion(version);
        
        try
        {
            GetTerminalSoftInfoResponse response =
                (GetTerminalSoftInfoResponse)PortalServer.getInstance().sendPostRequest("getTerminalSoftInfo", request);
            if (null != response)
            {
                if (null != response.getTerminalSoftInfo())
                {
                    passwd = response.getTerminalSoftInfo().getPassCode();
                }
            }
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getTerminalSoftInfo is fail", e);
        }
        
        return passwd;
    }
    
    public CmnetUserAuthenticateResponse userAndPwdAuthenticate(String msisdn, String password, String version,
        String userAgent, String channelCode, boolean isNotCmccAccount)
        throws PortalException
    {
        CmnetUserAuthenticateRequest request = new CmnetUserAuthenticateRequest();
        // cmnet账号且非手机号
        if (isNotCmccAccount)
        {
            request.setAccountName(msisdn);
        }
        else
        {
            request.setMsisdn(msisdn);
        }
        
        request.setPassword(password);
        request.setProtalType(SystemConstants.PORTAL_TYPE);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 begin
        request.setVersion(version);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 end
        
        // add by lkf27347 at 2012-2-29 for REQ-867
        // 完善秒杀活动适配规则，增加channelCode、userAgent参数传入 begin
        request.setChannelCode(channelCode);
        request.setUserAgent(userAgent);
        // add by b lkf27347 2012-2-29 for REQ-867
        // 完善秒杀活动适配规则，增加channelCode、userAgent参数传入 end
        
        return (CmnetUserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("cmnetUserAuthenticate",
            request);
    }
    
    /**
     * 与 userAndPwdAuthenticate 功能相同，但返回用户信息。 added by chengbo for req-3559
     * 
     * @author chengbo
     * @param msisdn
     * @param password
     * @param version
     * @param userAgent
     * @param channelCode
     * @param isNotCmccAccount
     * @param isReturnUserInfo 是否返回用户信息，true返回
     * @return CmnetUserAuthenticateResponse
     * @throws PortalException
     */
    public CmnetUserAuthenticateResponse userAndPwdAuthenticate2(String msisdn, String password, String version,
        String userAgent, String channelCode, boolean isNotCmccAccount, boolean isReturnUserInfo)
        throws PortalException
    {
        CmnetUserAuthenticateRequest request = new CmnetUserAuthenticateRequest();
        // cmnet账号且非手机号
        if (isNotCmccAccount)
        {
            request.setAccountName(msisdn);
        }
        else
        {
            request.setMsisdn(msisdn);
        }
        
        request.setPassword(password);
        request.setProtalType(SystemConstants.PORTAL_TYPE);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 begin
        request.setVersion(version);
        // modify by hKF48608 at Nov 1, 2011 for IRD-20511 end
        
        // add by lkf27347 at 2012-2-29 for REQ-867
        // 完善秒杀活动适配规则，增加channelCode、userAgent参数传入 begin
        request.setChannelCode(channelCode);
        request.setUserAgent(userAgent);
        // add by b lkf27347 2012-2-29 for REQ-867
        // 完善秒杀活动适配规则，增加channelCode、userAgent参数传入 end
        if (isReturnUserInfo)
        {
            request.setIsReturnUserInfo("1");
        }
        
        return (CmnetUserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("cmnetUserAuthenticate",
            request);
    }
    
    /**
     * 
     * 获取token
     * 
     * @author lkf41851
     * @param simsi
     * @param random
     * @return
     * @throws PortalException
     */
    public GetUserSmsTokenResponse getToken(String simsi, String random)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getToken()");
        }
        GetUserSmsTokenRequest request = new GetUserSmsTokenRequest();
        request.setRandom(random);
        request.setSimsi(simsi);
        GetUserSmsTokenResponse response = null;
        try
        {
            response = (GetUserSmsTokenResponse)PortalServer.getInstance().sendPostRequest("getUserSmsToken", request);
            
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getToken is error,resultcode=" + e.getExceptionCode());
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getToken()");
        }
        return response;
    }
    
    /**
     * 
     * 获取版本信息
     * 
     * @author lkf41851
     * @param version
     * @return
     */
    public GetTerminalSoftInfoResponse getSoftInfo(String version)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getSoftInfo()");
        }
        GetTerminalSoftInfoRequest request = new GetTerminalSoftInfoRequest();
        request.setVersion(version);
        GetTerminalSoftInfoResponse response =
            (GetTerminalSoftInfoResponse)PortalServer.getInstance().sendPostRequest("getTerminalSoftInfo", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getSoftInfo()");
        }
        return response;
    }
    
    // Begin--CME02
    
    /**
     * 获取所有的活动信息,如果带活动ID查询，则返回一个活动信息
     * 
     * @return
     */
    public GetPromotionActivityResponse getPromotionActivity(String id, String catalogId, String queryType)
    {
        if (logger.isDebugEnable())
        {
            logger.debug(
                "Enter PortalEngine.getPromotionActivity, promotionActivityId = " + id + ", productId = " + catalogId);
        }
        
        // 请求Server接口，获取活动信息。
        GetPromotionActivityRequest request = new GetPromotionActivityRequest();
        
        if (StringUtils.isNotEmpty(id))
        {
            request.setId(id);
        }
        
        if (StringUtils.isNotEmpty(catalogId))
        {
            request.setCatalogId(catalogId);
        }
        
        // 指定促销包活动类型
        request.setType(SystemConstants.CATALOG_PROMOTION);
        
        // 查询当前生效活动(包含适配失败的活动)
        request.setQueryType(queryType);
        
        GetPromotionActivityResponse response = null;
        try
        {
            response = (GetPromotionActivityResponse)PortalServer.getInstance().sendPostRequest("getPromotionActivity",
                request);
        }
        catch (PortalException e)
        {
            logger.error("", e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getPromotionActivity");
        }
        
        return response;
    }
    
    public GetPromotionActivityResponse getAllPromotionActivity()
    {
        return getPromotionActivity(null, null, null);
    }
    
    public GetPromotionActivityResponse getActivityInfoById(String id)
    {
        return getPromotionActivity(id, null, null);
    }
    
    /**
     * 
     * 根据专区id查询营销活动信息
     * 
     * @author sWX149481
     * @param catalogId 专区id
     * @return 营销活动
     */
    public GetPromotionActivityResponse getActivityInfoByCatalogId(String catalogId)
    {
        return getPromotionActivity(null, catalogId, Constants.CAMPAIGN_QUERYTYPE_CONTAIL_ADAPT_FAIL);
    }
    
    /**
     * 根据营销ID，获取营销信息
     * 
     * @param ruleId 营销规则ID
     * @return
     */
    public GetOperationRuleResponse getOperationRuleById(String ruleId)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getOperationRuleById, ruleId = " + ruleId);
        }
        
        GetOperationRuleRequest request = new GetOperationRuleRequest();
        request.setRuleId(ruleId);
        
        GetOperationRuleResponse response = null;
        try
        {
            response =
                (GetOperationRuleResponse)PortalServer.getInstance().sendPostRequest("getOperationRuleById", request);
        }
        catch (PortalException e)
        {
            logger.error("", e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getOperationRuleById, ruleId = " + ruleId);
        }
        
        return response;
    }
    
    /**
     * 根据机型、厂商,手机号码获取用户归属的用户组和终端组
     * 
     * @param request 包含了机型、厂商和手机号码
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetUserGroupResponse getUserGroupAndTermialGroup(GetUserGroupRequest request)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.qryAllMarketingAdaptingRules()");
        }
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询用户组及终端组信息
        if (IReadTools.isGuestLogin(request.getMsisdn()))
        {
            return null;
        }
        // End modify by hejianli 10167 at 2011-12-01 for update
        
        GetUserGroupResponse respone = null;
        try
        {
            // // 从server查询所有的营销适配规则
            // respone = (GetUserGroupResponse) PortalServer.getInstance()
            // .sendPostRequest("getUserGroupByMsisdn", request);
            
            // 调用aserver的getUserGroupByMsisdn接口查询所有的营销适配规则
            respone = (GetUserGroupResponse)PortalServer.getInstance().sendPostRequest("getUserGroupByMsisdn", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.qryAllMarketingAdaptingRules()");
        }
        
        return respone;
    }
    
    // End--CME02
    
    /**
     * 获取终端页面信息
     * 
     * @author c00126000
     * @param catalogId 终端目录ID，可选，不填时返回所有专区下的页面信息
     * @param pageId 页面ID，可选，不填时返回专区下所有页面
     * @param needPageInfo 是否需要返回页面详细信息:1 需要,0 不需要，必选
     * @return 终端页面信息
     * @throws PortalException
     */
    public GetTerminalPageInfoResponse getTerminalPageInfo(String catalogId, String pageId, String needPageInfo)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug(
                "[PortalEngine] Enter PortalEngine.getTerminalPageInfo(String catalogId, String pageId, String needPageInfo)");
        }
        
        GetTerminalPageInfoRequest request = new GetTerminalPageInfoRequest();
        request.setAccessType(SystemConstants.PORTAL_TYPE);
        request.setCatalogId(catalogId);
        request.setPageId(pageId);
        request.setNeedPageInfo(String.valueOf(needPageInfo));
        
        GetTerminalPageInfoResponse response = null;
        try
        {
            response =
                (GetTerminalPageInfoResponse)PortalServer.getInstance().sendPostRequest("getTerminalPageInfo", request);
        }
        catch (PortalException e)
        {
            // 专区不存在、页面不存在时会返回错误码
            logger.warn(
                "[PortalEngine] ResultCode of getTerminalPageInfo(String catalogId, String pageId, String needPageInfo) from Engine is "
                    + e.getExceptionCode() + ".");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug(
                "[PortalEngine] Exit PortalEngine.getTerminalPageInfo(String catalogId, String pageId, String needPageInfo)");
        }
        return response;
    }
    
    /**
     * 获取单个终端页面信息
     * 
     * @author c00126000
     * @param catalogId 终端目录ID
     * @param pageId 页面ID
     * @return 终端页面信息
     * @throws PortalException
     */
    public TerminalPageInfo getTerminalPageInfo(String catalogId, String pageId)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Enter PortalEngine.getTerminalPageInfo()");
        }
        
        if (StrUtil.isEmpty(catalogId) || StrUtil.isEmpty(pageId))
        {
            logger.error("[PortalEngine] Parameter of PortalEngine.getTerminalPageInfo() is invalid.");
            return null;
        }
        
        TerminalPageInfo terminalPageInfo = null;
        GetTerminalPageInfoRequest request = new GetTerminalPageInfoRequest();
        request.setAccessType(SystemConstants.PORTAL_TYPE);
        request.setCatalogId(catalogId);
        request.setPageId(pageId);
        request.setNeedPageInfo(SystemConstants.DigitalBool.TRUE);
        try
        {
            // 调用Server接口获取页面信息
            GetTerminalPageInfoResponse response =
                (GetTerminalPageInfoResponse)PortalServer.getInstance().sendPostRequest("getTerminalPageInfo", request);
            
            TerminalPageInfo returnTerminalPageInfo = response.getCatalogList().get(0).getPageList().get(0);
            if (pageId.equals(returnTerminalPageInfo.getPageId()))
            {
                terminalPageInfo = returnTerminalPageInfo;
            }
        }
        catch (PortalException e)
        {
            // 专区不存在、页面不存在时会返回错误码
            logger
                .warn("[PortalEngine] ResultCode of getTerminalPageInfo from Engine is " + e.getExceptionCode() + ".");
        }
        catch (Exception e)
        {
            logger.error("[PortalEngine] Response of getTerminalPageInfo from Engine is invalid." + e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Exit PortalEngine.getTerminalPageInfo()");
        }
        return terminalPageInfo;
    }
    
    /**
     * 获取用户首页标识
     * 
     * @author c00126000
     * @param msisdn 手机号
     * @return 用户首页标识
     * @throws PortalException
     */
    public String getIndexPageSign(String msisdn)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Enter PortalEngine.getIndexPageSign()");
        }
        
        if (StrUtil.isEmpty(msisdn))
        {
            return null;
        }
        
        String indexPageSign = null;
        try
        {
            GetIndexPageSignRequest request = new GetIndexPageSignRequest();
            request.setMisidn(msisdn);
            GetIndexPageSignResponse response =
                (GetIndexPageSignResponse)PortalServer.getInstance().sendPostRequest("getIndexPageSign", request);
            if (response != null)
            {
                indexPageSign = response.getIndexPageSign();
            }
        }
        catch (PortalException e)
        {
            logger.warn("[PortalEngine] ResultCode of getIndexPageSign from Engine is " + e.getExceptionCode() + ".");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Exit PortalEngine.getIndexPageSign()");
        }
        return indexPageSign;
    }
    
    /**
     * 查询注册次数
     * 
     * @author t00130406
     * @param actionType
     * @param msisdn
     * @return
     * @throws PortalException
     */
    public void judgeCanRegister(String actionType, String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Enter PortalEngine.judgeCanRegister()");
        }
        
        RegUserActionCountRequest request = new RegUserActionCountRequest();
        request.setActionType(actionType);
        request.setMsisdn(msisdn);
        
        try
        {
            PortalServer.getInstance().sendPostRequest("judgeCanRegister", request);
        }
        catch (PortalException e)
        {
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Exit PortalEngine.judgeCanRegister()");
        }
    }
    
    /**
     * 注册次数加1
     * 
     * @author t00130406
     * @param actionType
     * @param msisdn
     */
    public void userRegisterAction(String actionType, String msisdn)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Enter PortalEngine.judgeCanRegister()");
        }
        
        RegRegisterLogRequest request = new RegRegisterLogRequest();
        request.setActionType(actionType);
        request.setMsisdn(msisdn);
        
        try
        {
            PortalServer.getInstance().sendPostRequest("userRegisterAction", request);
        }
        catch (PortalException e)
        {
            logger.error("[PortalEngine] ResultCode of userRegisterAction from Engine is " + e.getExceptionCode());
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("[PortalEngine] Exit PortalEngine.userRegisterAction()");
        }
    }
    
    /**
     * 获取中奖信息
     * 
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetPrizeInfoResponse getPrizeInfo(String msisdn, String begintime, String endtime, String start,
        String count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getPrizeInfo()");
        }
        GetPrizeInfoRequest request = new GetPrizeInfoRequest();
        request.setMsisdn(msisdn);
        request.setBeginTime(begintime);
        request.setEndTime(endtime);
        request.setStart(start);
        request.setCount(count);
        GetPrizeInfoResponse response =
            (GetPrizeInfoResponse)PortalServer.getInstance().sendPostRequest("getPrizeInfo", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getPrizeInfo()");
        }
        return response;
    }
    
    /**
     * 获取活跃度积分
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public MemScoreResponse getActivityInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getActivityInfo()");
        }
        MemScoreRequest request = new MemScoreRequest();
        request.setMsisdn(msisdn);
        MemScoreResponse response = (MemScoreResponse)PortalServer.getInstance().sendPostRequest("qryScore", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getActivityInfo()");
        }
        return response;
    }
    
    /**
     * 获取报到信息
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public DaySignUpResponse getDaySignUpInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getDaySignUpInfo()");
        }
        
        DaySignUpRequest request = new DaySignUpRequest();
        request.setMsisdn(msisdn);
        request.setPortalType(String.valueOf(Types.PORTAL_TERMINAL));
        Date curDate = new Date();
        request.setHitTime(DateUtil.format(curDate, "yyyyMMddHHmmss"));
        DaySignUpResponse response =
            (DaySignUpResponse)PortalServer.getInstance().sendPostRequest("daySignUp", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getDaySignUpInfo()");
        }
        
        return response;
    }
    
    /**
     * 获取积分规则信息
     * 
     * @param
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public MemScoreRuleResponse getScoreRuleInfo()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getScoreRuleInfo()");
        }
        
        MemScoreRuleRequest request = new MemScoreRuleRequest();
        MemScoreRuleResponse response =
            (MemScoreRuleResponse)PortalServer.getInstance().sendPostRequest("qryScoreRule", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getScoreRuleInfo()");
        }
        
        return response;
    }
    
    /**
     * 获取等级规则信息
     * 
     * @param
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public MemLevelResponse getLevelRuleInfo()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getLevelRuleInfo()");
        }
        
        MemLevelRequest request = new MemLevelRequest();
        MemLevelResponse response =
            (MemLevelResponse)PortalServer.getInstance().sendPostRequest("qryScoreLevelRule", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getLevelRuleInfo()");
        }
        
        return response;
    }
    
    /**
     * 获取杂志系列与杂志的关联信息
     * 
     * @author lkf42842
     * @param seriesId
     * @return
     * @throws PortalException
     */
    public GetMagazineSeriesInfoResponse getMagazineSeriesInfo(String seriesId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMagazineSeriesInfo()");
        }
        GetMagazineSeriesInfoRequest request = new GetMagazineSeriesInfoRequest();
        request.setSeriesId(seriesId);
        GetMagazineSeriesInfoResponse response =
            (GetMagazineSeriesInfoResponse)PortalServer.getInstance().sendPostRequest("getMagazineSeriesInfo", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMagazineSeriesInfo()");
        }
        return response;
    }
    
    /**
     * 获取杂志预定更新系列信息
     * 
     * @author lkf41851
     * @param seriesId
     */
    public GetMagazineSeriesDetailResponse getMagazineUpdateInfo(String seriesId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMagazineUpdateInfo");
        }
        GetMagazineSeriesDetailRequest request = new GetMagazineSeriesDetailRequest();
        request.setSeriesId(seriesId);
        
        GetMagazineSeriesDetailResponse response = (GetMagazineSeriesDetailResponse)PortalServer.getInstance()
            .sendPostRequest("getMagazineSeriesDetail", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMagazineUpdateInfo");
        }
        return response;
    }
    
    /**
     * 获取用户是否预定了某个内容
     * 
     * @author lKF42842
     * @param msisdn
     * @param contentId
     * @param itemType 内容的类型
     * @return
     */
    public GetUserPreSubBookInfoResponse getUserPreSubBookInfo(String msisdn, String contentId, String itemType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserPreSubBookInfo");
        }
        GetUserPreSubBookInfoRequest request = new GetUserPreSubBookInfoRequest();
        request.setMobile(msisdn);
        request.setPortalType("4");// 门户类型为4终端
        request.setContentType(itemType);
        request.setBookId(contentId);
        
        GetUserPreSubBookInfoResponse response =
            (GetUserPreSubBookInfoResponse)PortalServer.getInstance().sendPostRequest("getUserPreSubBookInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserPreSubBookInfo");
        }
        return response;
    }
    
    /**
     * 获取用户消息数量和预定图书更新数量
     * 
     * @author lkf41851
     * @param msisdn
     * @return
     * @throws PortalException
     */
    public GetUserNotifyCountResponse getUserNotifyCount(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserNotifyCount");
        }
        GetUserNotifyCountRequest request = new GetUserNotifyCountRequest();
        request.setMobile(msisdn);
        GetUserNotifyCountResponse response = null;
        response = (GetUserNotifyCountResponse)PortalServer.getInstance().sendPostRequest("getUserNotifyinfo", request);
        
        return response;
    }
    
    // modify by zKF39164 at 2012-5-10 for REQ-1256 begin
    /**
     * 共享内容到微博
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void shareContentToWeibo(String msisdn, String contentId, List<WeiboInfo> weiboList, String scenario,
        String channelCode, String sourceType)
        throws PortalException
    {
        ShareWeiboRequest request = new ShareWeiboRequest();
        request.setContentId(contentId);
        request.setMsisdn(msisdn);
        request.setWeiboList(weiboList);
        request.setPortalType(Types.PORTAL_TERMINAL + "");
        request.setScenario(scenario); // 发送场景
        request.setChannelCode(channelCode);
        request.setSourceType(sourceType);
        
        PortalServer.getInstance().sendPostRequest("shareWeibo", request);
    }
    
    // modify by zKF39164 at 2012-5-10 for REQ-1256 end
    
    /**
     * 解绑定微博
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public void unbindToWeibo(String msisdn, String weiboType, String channalCode)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.UnbindToWeibo()");
        }
        
        UnbindWeiboRequest request = new UnbindWeiboRequest();
        request.setWeiboType(weiboType);
        request.setMsisdn(msisdn);
        request.setChannelCode(channalCode);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        PortalServer.getInstance().sendPostRequest("unbindWeibo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.UnbindToWeibo()");
        }
    }
    
    /**
     * 获取微博token
     * 
     * @param
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public GetWeiboTokenResponse getWeiboToken(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getWeiboToken()");
        }
        
        GetWeiboTokenRequest request = new GetWeiboTokenRequest();
        request.setMsisdn(msisdn);
        request.setWeiboType(WeiboTypes.SINA);
        GetWeiboTokenResponse response =
            (GetWeiboTokenResponse)PortalServer.getInstance().sendPostRequest("getWeiboToken", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getWeiboToken()");
        }
        
        return response;
    }
    
    /**
     * 根据杂志Id获取杂志预订系列Id
     * 
     * 添加方法注释
     * 
     * @author zKF47559
     * @param bookId
     * @return
     * @throws PortalException
     */
    public GetMagazineSerialUpdateResponse getMagazineSerialUpdateResponse(String bookId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMagazineSerialUpdateResponse");
        }
        GetMagazineSerialUpdateRequest request = new GetMagazineSerialUpdateRequest();
        request.setBookId(bookId);
        GetMagazineSerialUpdateResponse response =
            (GetMagazineSerialUpdateResponse)PortalServer.getInstance().sendPostRequest("getMagazineSerialId", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMagazineSerialUpdateResponse");
        }
        return response;
    }
    
    /**
     * 获取实体书区块下已经选择的内容信息响应
     * 
     * @param blockId
     * @return
     * @see [类、类#方法、类#成员]
     */
    public String[] getPBBlockBooks(String blockId)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockId}};
            logger.debug("Enter PortalEngine.getBlockBooks()", appInfo);
        }
        
        GetBlockBooksResponse response = null;
        String[] bookIDs = null;
        try
        {
            GetBlockBooksRequest request = new GetBlockBooksRequest();
            request.setBlockId(blockId);
            response = (GetBlockBooksResponse)PortalServer.getInstance().sendPostRequest("getPBBlockBooks", request);
            
            List<String> bookIdList = new ArrayList<String>();
            if (null != response)
            {
                List<BookIdBean> list = response.getBookIdList();
                
                for (BookIdBean bookIdBean : list)
                {
                    bookIdList.add(bookIdBean.getBookId());
                }
                
                bookIDs = new String[bookIdList.size()];
                bookIDs = bookIdList.toArray(bookIDs);
            }
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockId}};
            logger.debug("Exit PortalEngine.getBlockBooks()", appInfo);
        }
        
        return bookIDs;
    }
    
    /**
     * 获取品牌列表，或根据ID获取品牌信息
     * 
     * @author zKF39164
     * @param breedId
     * @return response
     * @throws PortalException
     */
    public BreedInfoResponse getBreadInfoList(String breedId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBreadInfoList, breedId = " + breedId);
        }
        
        BreedRequst request = new BreedRequst();
        request.setBreedId(breedId);
        request.setSortType(SystemConstants.SORT_NEW_TYPE);
        // BreedInfoResponse response = (BreedInfoResponse)
        // PortalServer.getInstance().sendPostRequest("getBreedsList",
        // request);
        
        // 调用aserver的getBreedsList接口
        BreedInfoResponse response =
            (BreedInfoResponse)PortalServer.getInstance().sendPostRequest("getBreedsList", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getBreadInfoList, breedId = " + breedId);
        }
        
        return response;
    }
    
    /**
     * 用户打分
     * 
     * @author lKF42842
     * @param msisdn
     * @param contentId
     * @param mark
     */
    public BookMarkInfoResponse addBookScore(String msisdn, String contentId, String mark)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"contentId", contentId}, {"mark", mark}};
            logger.debug("Enter PortalEngine.addBookScore()", appInfos);
        }
        
        AddMarkReq request = new AddMarkReq();
        request.setMsisdn(msisdn);
        request.setScore(mark);
        request.setBookId(contentId);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        
        BookMarkInfoResponse response =
            (BookMarkInfoResponse)PortalServer.getInstance().sendPostRequest("addBookScore", request);
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"contentId", contentId}, {"mark", mark}};
            logger.debug("Exit PortalEngine.addBookScore()", appInfos);
        }
        return response;
    }
    
    /**
     * 获取平均分和参与打分人数
     * 
     * @author lKF42842
     * @param contentId
     */
    public BookMarkInfoResponse getAvgScoreAndTotalPersons(String contentId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", contentId}};
            logger.debug("Enter PortalEngine.getAvgScoreAndTotalPersons()", appInfo);
        }
        GetAvgScoreAndTotalPerSonsReq request = new GetAvgScoreAndTotalPerSonsReq();
        request.setBookId(contentId);
        BookMarkInfoResponse response =
            (BookMarkInfoResponse)PortalServer.getInstance().sendPostRequest("getAvgScoreAndTotalPersons", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", contentId}};
            logger.debug("Exit PortalEngine.getAvgScoreAndTotalPersons()", appInfo);
        }
        return response;
    }
    
    /**
     * 获取我的评分
     * 
     * @author lKF42842
     * @param contentId
     * @param msisdn
     * @return
     */
    public GetMyBookScoreResponse getMyBookScore(String contentId, String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"contentId", contentId}};
            logger.debug("Enter PortalEngine.getMyBookScore()", appInfos);
        }
        GetMyBookScoreReq request = new GetMyBookScoreReq();
        request.setBookId(contentId);
        request.setMsisdn(msisdn);
        GetMyBookScoreResponse response =
            (GetMyBookScoreResponse)PortalServer.getInstance().sendPostRequest("getMyBookScore", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"contentId", contentId}};
            logger.debug("Exit PortalEngine.getMyBookScore()", appInfos);
        }
        return response;
    }
    
    /**
     * 获取杂志章节信息
     * 
     * @author lKF42842
     * @param bookID
     * @return
     */
    public GetMagazineChapterInfoResponse getMagazineChapterInfo(String bookID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", bookID}};
            logger.debug("Enter PortalEngine.getMagazineChapterInfo()", appInfo);
        }
        GetMagazineChapterInfoRequest request = new GetMagazineChapterInfoRequest();
        request.setBookId(bookID);
        // GetMagazineChapterInfoResponse response =
        // (GetMagazineChapterInfoResponse) PortalServer.getInstance()
        // .sendPostRequest("getMagazineChapterInfo", request);
        
        // 调用aserver的getManazineChapterInfo接口
        GetMagazineChapterInfoResponse response = (GetMagazineChapterInfoResponse)PortalServer.getInstance()
            .sendPostRequest("getMagazineChapterInfo", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"contentId", bookID}};
            logger.debug("Exit PortalEngine.getMagazineChapterInfo()", appInfo);
        }
        return response;
    }
    
    // modify by zKF47559 at 2011-10-19 for REQ-748 begin
    /**
     * 调用iserver addUserNotes接口添加用户读书笔记
     * 
     * 添加方法注释
     * 
     * @author zKF47559
     * @version CMR09 2011-10-17
     * @throws PortalException
     * @since V100R001C01LCM009
     */
    public void addUserNote(String mobile, String contentId, String noteContent, String chapterId, String startPosition,
        String endPosition, String clientVerType, String quote, String content)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"contentId=", contentId}, {"noteContent=", noteContent},
                {"chapterId=", chapterId}, {"startPosition=", startPosition}, {"clientVerType=", clientVerType},
                {"quoteCount=", quote}};
            logger.debug("Enter PortalEngine.addUserNote()", appinfo);
        }
        
        AddUserNoteReq request = new AddUserNoteReq();
        request.setMobile(mobile);
        request.setContentId(contentId);
        request.setNoteContent(noteContent);
        request.setChapterId(chapterId);
        request.setStartposition(startPosition);
        request.setEndposition(endPosition);
        request.setClientVerType(clientVerType);
        request.setQuote(quote);
        request.setContent(content);
        PortalServer.getInstance().sendPostRequest("addUserNotes", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"contentId=", contentId}, {"noteContent=", noteContent},
                {"chapterId=", chapterId}, {"startPosition=", startPosition}, {"clientVerType=", clientVerType},
                {"quoteCount=", quote}};
            logger.debug("Exit PortalEngine.addUserNote()", appinfo);
        }
    }
    
    /**
     * 调用iserver addSingleUserNote接口添加用户读书笔记，并返回值
     * 
     * @author zKF47559
     * @version CMR09 2011-10-17
     * @throws PortalException
     * @since V100R001C01LCM009
     */
    public GetSingleUserNoteRsp addUserNote2(String mobile, String contentId, String noteContent, String chapterId,
        String startPosition, String endPosition, String clientVerType, String quote, String content, String addTime)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile", mobile}, {"contentId", contentId}, {"noteContent", noteContent},
                {"chapterId", chapterId}, {"startPosition", startPosition}, {"clientVerType", clientVerType},
                {"quoteCount", quote}, {"addTime", addTime}};
            logger.debug("Enter PortalEngine.addUserNote2()", appinfo);
        }
        
        AddUserNoteReq request = new AddUserNoteReq();
        request.setMobile(mobile);
        request.setContentId(contentId);
        request.setNoteContent(noteContent);
        request.setChapterId(chapterId);
        request.setStartposition(startPosition);
        request.setEndposition(endPosition);
        request.setClientVerType(clientVerType);
        request.setQuote(quote);
        request.setContent(content);
        request.setUserNoteTime(addTime);
        GetSingleUserNoteRsp response =
            (GetSingleUserNoteRsp)PortalServer.getInstance().sendPostRequest("addSingleUserNote", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile", mobile}, {"contentId", contentId}, {"noteContent", noteContent},
                {"chapterId", chapterId}, {"startPosition", startPosition}, {"clientVerType", clientVerType},
                {"quoteCount", quote}, {"addTime", addTime}};
            logger.debug("Exit PortalEngine.addUserNote2()", appinfo);
        }
        return response;
    }
    
    /**
     * 用户修改读书笔记
     * 
     * @param msisdn 手机号码
     * @param contentId 内容id
     * @param noteId 笔记id
     * @param noteContent 内容
     * @param chapterId 章节id
     * @param position 偏移量
     * @param clientVerType 版本类型
     * @param quoteCount 引文大小
     * @throws PortalException iservlet异常
     */
    public void updateUserNote(String mobile, String contentId, String noteId, String noteContent, String chapterId,
        String startPosition, String endPosition, String clientVerType, String quote, String content, String addTime)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo =
                {{"mobile=", mobile}, {"contentId", contentId}, {"noteContent", noteContent}, {"noteId", noteId},
                    {"chapterId", chapterId}, {"startPosition", startPosition}, {"endPosition", endPosition},
                    {"clientVerType", clientVerType}, {"quote", quote}, {"content", content}, {"addTime", addTime}};
            logger.debug("Enter PortalEngine.updateUserNote()", appinfo);
        }
        UpdateUserNoteReq request = new UpdateUserNoteReq();
        
        request.setMobile(mobile);
        request.setContentId(contentId);
        request.setNoteId(noteId);
        request.setNoteContent(noteContent);
        
        // 设置新增加的请求字段
        request.setChapterId(chapterId);
        request.setClientVerType(clientVerType);
        request.setStartPosition(startPosition);
        request.setEndPosition(endPosition);
        request.setQuote(quote);
        request.setContent(content);
        request.setUserNoteTime(addTime);
        PortalServer.getInstance().sendPostRequest("updateUserNote", request);
        if (logger.isDebugEnable())
        {
            String[][] appinfo =
                {{"mobile=", mobile}, {"contentId", contentId}, {"noteContent", noteContent}, {"noteId", noteId},
                    {"chapterId", chapterId}, {"startPosition", startPosition}, {"endPosition", endPosition},
                    {"clientVerType", clientVerType}, {"quote", quote}, {"content", content}, {"addTime", addTime}};
            logger.debug("Exit PortalEngine.updateUserNote()", appinfo);
        }
    }
    
    /**
     * 
     * 批量提交笔记
     * 
     * @author wWX180488
     * @param NodeInfoList 笔记实体集合
     */
    public void AddBatchUserNotes(List<AddBatchNoteInfo> NodeInfoList)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"NodeInfoList", NodeInfoList.toString()}};
            logger.debug("Enter PortalEngine.AddBatchUserNotes()", appinfo);
        }
        AddBatchUserNotesReq request = new AddBatchUserNotesReq();
        
        request.setUserNoteLists(NodeInfoList);
        PortalServer.getInstance().sendPostRequest("addBatchUserNotes", request);
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"NodeInfoList", NodeInfoList.toString()}};
            logger.debug("Exit PortalEngine.AddBatchUserNotes()", appinfo);
        }
    }
    
    /**
     * 用户删除读书笔记
     * 
     * 添加方法注释
     * 
     * @author zKF47559
     * @version CMR09 2011-10-19
     * @since V100R001C01LCM009
     */
    public void deleteUserNote(String mobile, String type, String contentId, String noteId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"type=", type}, {"contentId=", contentId}, {"noteId=", noteId}};
            logger.debug("Enter PortalEngine.deleteUserNote()", appinfo);
        }
        DeleteUserNotesReq request = new DeleteUserNotesReq();
        request.setMobile(mobile);
        request.setType(type);
        request.setContentId(contentId);
        request.setNoteId(noteId);
        PortalServer.getInstance().sendPostRequest("deleteUserNotes", request);
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"type=", type}, {"contentId=", contentId}, {"noteId=", noteId}};
            logger.debug("Exit PortalEngine.deleteUserNote()", appinfo);
        }
    }
    
    /**
     * 用户查看读书笔记
     * 
     * 添加方法注释
     * 
     * @author zKF47559
     * @version CMR09 2011-10-19
     * @throws PortalException
     * @since V100R001C01LCM009
     */
    public GetContentNotesRsp getContentNotes(String mobile, String contentId, String start, String count)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"contentId=", contentId}, {"start=", start}, {"count=", count}};
            logger.debug("Enter PortalEngine.getContentNotes()", appinfo);
        }
        GetContentNotesReq request = new GetContentNotesReq();
        request.setMobile(mobile);
        request.setContentId(contentId);
        request.setStart(start);
        request.setCount(count);
        GetContentNotesRsp response =
            (GetContentNotesRsp)PortalServer.getInstance().sendPostRequest("getContentNotes", request);
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"contentId=", contentId}, {"start=", start}, {"count=", count}};
            logger.debug("Exit PortalEngine.getContentNotes()", appinfo);
        }
        return response;
    }
    
    /**
     * 查看用户所有读书笔记
     * 
     * 添加方法注释
     * 
     * @author zKF47559
     * @version CMR09 2011-10-20
     * @since V100R001C01LCM009
     */
    public GetUserNotesRsp getUserNotes(String mobile, String start, String count, String noteCount,
        String clientVerType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"start=", start}, {"count=", count}, {"noteCount=", noteCount},
                {"clientVerType=", clientVerType}};
            logger.debug("Enter PortalEngine.getUserNotes()", appinfo);
        }
        GetUserNotesReq request = new GetUserNotesReq();
        request.setMobile(mobile);
        request.setStart(start);
        request.setCount(count);
        request.setNoteCount(noteCount);
        request.setClientVerType(clientVerType);
        GetUserNotesRsp response = (GetUserNotesRsp)PortalServer.getInstance().sendPostRequest("getUserNotes", request);
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"mobile=", mobile}, {"start=", start}, {"count=", count}, {"noteCount=", noteCount},
                {"clientVerType=", clientVerType}};
            logger.debug("Exit PortalEngine.getUserNotes()", appinfo);
        }
        return response;
    }
    
    // modify by zKF47559 at 2011-10-20 for REQ-748 end
    
    // modify by hKF48608 at Oct 27, 2011 for WORK-5661 begin
    /**
     * 获取图书所属专区列表
     * 
     * @param bookID 书项Id
     * @param start 开始位置
     * @param count 每页记录数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return BookItem [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetCatalogListResponse getCatalogListByBookId(String bookId, String start, String count)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"bookId=", bookId}, {"start=", start}, {"count=", count}};
            logger.debug("Enter PortalEngine.getUserNotes()", appinfo);
        }
        
        GetCatalogListRequest request = new GetCatalogListRequest();
        request.setBookId(bookId);
        request.setStart(start);
        request.setCount(count);
        
        // 生成请求报文，并发送http请求
        GetCatalogListResponse response =
            (GetCatalogListResponse)PortalServer.getInstance().sendPostRequest("getCatalogListByBookId", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appinfo = {{"bookId=", bookId}, {"start=", start}, {"count=", count}};
            logger.debug("Exit PortalEngine.getUserNotes()", appinfo);
        }
        
        return response;
        
    }
    
    // modify by hKF48608 at Oct 27, 2011 for WORK-5661 end
    
    /**
     * 提交在线人数到server
     * 
     * @author lkf41851
     * @param key
     * @param num
     * @throws PortalException
     */
    public void submitReaderNum(String key, String num)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.submitReaderNum()");
        }
        UpdateOnlineNumRequest request = new UpdateOnlineNumRequest();
        request.setOnlineNum(num);
        request.setSiteKey(key);
        PortalServer.getInstance().sendPostRequest("updateOnlineNum", request);
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.submitReaderNum()");
        }
    }
    
    /**
     * 得到在线人数
     * 
     * @author lkf41851
     * @return
     * @throws PortalException
     */
    public int getReaderNum()
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getReaderNum()");
        }
        String number = "";
        try
        {
            GetOnlineNumResponse response =
                (GetOnlineNumResponse)PortalServer.getInstance().sendPostRequest("getOnlineNum", null);
            if (response != null)
            {
                number = response.getOnlineNum();
            }
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getReaderNum() is error" + e);
            number = "";
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getReaderNum()");
        }
        return StringTools.toInt(number, 0);
    }
    
    // modify by zKF39164 at 2011-12-12 for REQ-851 begin
    /**
     * 获取广告信息，供广告图片区块使用
     * 
     * @author zKF39164
     * @param adId
     * @return
     */
    public AdvertisementImageResponse getAdImageInfo(String adId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAdImageInfo(), adId = " + adId);
        }
        
        AdvertisementImageRequest request = new AdvertisementImageRequest();
        request.setAdId(adId);
        
        AdvertisementImageResponse response = null;
        try
        {
            response =
                (AdvertisementImageResponse)PortalServer.getInstance().sendPostRequest("getAdImageList", request);
        }
        catch (PortalException e)
        {
            logger.error("query adImageList is error", e);
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getAdImageInfo()");
        }
        
        return response;
    }
    
    /**
     * 获取区块下已经选择的内容信息响应
     * 
     * @param blockId
     * @author zKF39164
     * @return
     * @see [类、类#方法、类#成员]
     */
    public List<CycleBook> getBlockCycleBooks(String blockID)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockID}};
            logger.debug("Enter PortalEngine.getBlockCycleBooks()", appInfo);
        }
        
        List<CycleBook> cycleBookList = null;
        try
        {
            GetBlockCycleBookListRequest request = new GetBlockCycleBookListRequest();
            request.setBlockId(blockID);
            
            // 请求Server
            GetBlockCycleBookListResponse response = (GetBlockCycleBookListResponse)PortalServer.getInstance()
                .sendPostRequest("getClientBlockCycleBookList", request);
            
            if (null != response)
            {
                cycleBookList = response.getCycleBookList();
            }
        }
        catch (PortalException e)
        {
            logger.error("query block books is fail!", new String[][] {{"blockID", blockID}}, e);
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"blockId", blockID}};
            logger.debug("Exit PortalEngine.getBlockCycleBooks()", appInfo);
        }
        
        return cycleBookList;
    }
    
    // modify by zKF39164 at 2011-12-12 for REQ-851 end
    
    // add by c00126000 at 2011-12-6 for REQ-826 begin
    /**
     * 根据TokenId获取用户手机号和扩展信息
     * 
     * @author c00126000
     * @param tokenId TokenID
     * @param ip IP地址
     * @param ipCheck 是否需要校验IP 1.校验 0.不校验
     * @return 用户Token信息
     */
    public UserTokenInfo getUserTokenInfo(String tokenId, String ip, String ipCheck)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserTokenInfo()", new String[][] {{"tokenId", tokenId}});
        }
        
        UserTokenInfo userTokenInfo = null;
        
        GetUserTokenRequest request = new GetUserTokenRequest();
        UserTokenInfo userTokeInfo = new UserTokenInfo();
        userTokeInfo.setTokenID(tokenId);
        userTokeInfo.setIp(ip);
        request.setUserToken(userTokeInfo);
        request.setIpCheck(ipCheck);
        GetUserTokenResponse response = null;
        try
        {
            response = (GetUserTokenResponse)PortalServer.getInstance().sendPostRequest("getUserToken", request);
            if (response != null)
            {
                userTokenInfo = response.getUserToken();
            }
        }
        catch (PortalException e)
        {
            logger.error("Failed to call getUserToken of Server",
                new String[][] {{"tokenId", tokenId}, {"errCode", e.getExceptionCode()}});
            if (IReadTools.isNotNeedPrintStack(e.getExceptionCode()))
            {
                logger.warn("", e);
            }
            else
            {
                logger.error("", e);
            }
        }
        catch (Exception e)
        {
            logger.error("Failed to call getUserToken of Server", new String[][] {{"tokenId", tokenId}}, e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserTokenInfo()", new String[][] {{"tokenId", tokenId}});
        }
        return userTokenInfo;
    }
    
    /**
     * 根据TokenId获取用户手机号和扩展信息
     * 
     * @author c00126000
     * @param tokenId TokenID
     * @return 用户Token信息
     */
    public GetLongTokenResponse getUserLongTokenInfo(String tokenId)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserLongTokenInfo()", new String[][] {{"tokenId", tokenId}});
        }
        
        GetLongTokenRequest request = new GetLongTokenRequest();
        request.setTokenId(tokenId);
        GetLongTokenResponse response = null;
        try
        {
            response = (GetLongTokenResponse)PortalServer.getInstance().sendPostRequest("getLongToken", request);
        }
        catch (PortalException e)
        {
            logger.error("Failed to call getUserToken of Server",
                new String[][] {{"tokenId", tokenId}, {"errCode", e.getExceptionCode()}});
            if (IReadTools.isNotNeedPrintStack(e.getExceptionCode()))
            {
                logger.warn("", e);
            }
            else
            {
                logger.error("", e);
            }
        }
        catch (Exception e)
        {
            logger.error("Failed to call getLongToken of Server", new String[][] {{"tokenId", tokenId}}, e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserLongTokenInfo()", new String[][] {{"tokenId", tokenId}});
        }
        return response;
    }
    
    /**
     * 添加用户Token
     * 
     * @author c00126000
     * @param msisdn 用户手机号
     * @param ip 来源IP地址
     * @param extendInfo 扩展信息
     * @return 用户TokenID
     * @throws PortalException
     */
    public String addUserToken(String msisdn, String ip, String accountName, String accountType, String extendInfo,
        String sessionId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.addUserToken()", new String[][] {{"ip", ip}, {"msisdn", msisdn}});
        }
        
        AddUserTokenRequest request = new AddUserTokenRequest();
        UserTokenInfo userToken = new UserTokenInfo();
        userToken.setIp(ip);
        userToken.setMsisdn(msisdn);
        userToken.setAccountName(accountName);
        userToken.setAccountType(accountType);
        userToken.setExtendInfo(extendInfo);
        userToken.setuSessionid(sessionId);
        request.setUserToken(userToken);
        
        AddUserTokenResponse addUserTokenResponse =
            (AddUserTokenResponse)PortalServer.getInstance().sendPostRequest("addUserToken", request);
        
        String tokenID = null;
        if (addUserTokenResponse != null && addUserTokenResponse.getUserToken() != null)
        {
            tokenID = addUserTokenResponse.getUserToken().getTokenID();
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.addUserToken()", new String[][] {{"ip", ip}, {"msisdn", msisdn}});
        }
        return tokenID;
    }
    
    /**
     * 修改用户Token扩展信息
     * 
     * @author c00126000
     * @param msisdn 手机号
     * @param tokenId TokenId
     * @param extendInfo 扩展信息
     * @throws PortalException
     */
    public void modifyUserTokenExtendInfo(String msisdn, String tokenId, String extendInfo)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.modifyUserTokenExtendInfo()",
                new String[][] {{"msisdn", msisdn}, {"tokenId", tokenId}, {"extendInfo", extendInfo}});
        }
        
        ModifyUserTokenRequest request = new ModifyUserTokenRequest();
        request.setMsisdn(msisdn);
        request.setTokenID(tokenId);
        request.setExtendInfo(extendInfo);
        
        PortalServer.getInstance().sendPostRequest("modifyUserToken", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.modifyUserTokenExtendInfo()",
                new String[][] {{"msisdn", msisdn}, {"tokenId", tokenId}, {"extendInfo", extendInfo}});
        }
    }
    
    /**
     * 保存微博Token信息
     * 
     * @author c00126000
     * @param weiboToken
     * @throws PortalException
     */
    public void addWeiboToken(WeiboToken weiboToken, String channalCode, String sourceType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.addWeiboToken()",
                new String[][] {{"msisdn", weiboToken.getMsisdn()}, {"weiboType", weiboToken.getWeiboType()},
                    {"accessToken", weiboToken.getAccessToken()}});
        }
        
        AddWeiboTokenRequest request = new AddWeiboTokenRequest();
        request.setMsisdn(weiboToken.getMsisdn());
        request.setWeiboType(weiboToken.getWeiboType());
        request.setOauthToken(weiboToken.getAccessToken());
        request.setOauthTokenSecret(weiboToken.getAccessTokenSecret());
        request.setWeiboUserId(weiboToken.getWeiboUID());
        request.setWeiboToken(weiboToken.getWeiboToken());
        request.setRefreshToken(weiboToken.getRefreshToken());
        request.setChannelCode(channalCode);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setSourceType(sourceType);
        PortalServer.getInstance().sendPostRequest("addWeiboToken", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.addWeiboToken()",
                new String[][] {{"channalCode", channalCode}, {"msisdn", weiboToken.getMsisdn()},
                    {"weiboType", weiboToken.getWeiboType()}, {"accessToken", weiboToken.getAccessToken()}});
        }
    }
    
    /**
     * 获取用户已绑定的微博列表
     * 
     * @author c00126000
     * @param msisdn 手机号码
     * @return 已绑定的微博列表
     */
    public List<String> getBindedWeiboList(String msisdn)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBindedWeiboList()", new String[][] {{"msisdn", msisdn}});
        }
        
        List<String> weiboList = null;
        GetBindedWeiboLstRequest req = new GetBindedWeiboLstRequest();
        req.setMsisdn(msisdn);
        GetBindedWeiboResponse rsp;
        try
        {
            rsp = (GetBindedWeiboResponse)PortalServer.getInstance().sendPostRequest("getBindedWeiboList", req);
            if (rsp != null)
            {
                weiboList = rsp.getWeiboLst();
            }
        }
        catch (PortalException e)
        {
            logger.error("Exit PortalEngine.getBindedWeiboList(), call getBindedWeiboList of server failed",
                new String[][] {{"msisdn", msisdn}},
                e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getBindedWeiboList()", new String[][] {{"msisdn", msisdn}});
        }
        return weiboList;
    }
    
    // add by c00126000 at 2011-12-6 for REQ-826 end
    
    /**
     * 获取书券确认信息
     * 
     * @author c00126000
     * @param msisdn 手机号码
     * @return 已绑定的微博列表
     */
    public void confirmTicketPurchase(ConfirmPayment confirmPayment)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.confirmTicketPurchase()",
                new String[][] {{"msisdn", confirmPayment.getMsisdn()},
                    {"transaction", confirmPayment.getTransaction()}, {"productId", confirmPayment.getProductId()},
                    {"ReceiptVersion", confirmPayment.getReceiptVersion()}});// cxn
        }
        
        AppStoreTicketPurchaseRequest req = new AppStoreTicketPurchaseRequest();
        req.setMisdn(confirmPayment.getMsisdn());
        req.setTransactionReceipt(confirmPayment.getTransaction());
        req.setProductId(confirmPayment.getProductId());
        // cxn
        req.setReceiptVersion(confirmPayment.getReceiptVersion());
        PortalServer.getInstance().sendPostRequest("confirmTicketPurchase", req);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.confirmTicketPurchase()");
        }
    }
    
    // modify by kf41851 at 2012-1-13 for REQ-975 begin
    /**
     * 获取用户所属的行业组
     * 
     * @author lkf41851
     * @param msisdn
     * @return
     */
    public String getIndustryGrougId(String msisdn)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getIndustryGrougId()");
        }
        String industryGroupID = "";
        GetUserIndustryGroupIdRequest request = new GetUserIndustryGroupIdRequest();
        request.setMsisdn(msisdn);
        try
        {
            // GetUserIndustryGroupIdResponse response =
            // (GetUserIndustryGroupIdResponse) PortalServer.getInstance()
            // .sendPostRequest("getUserIndustryGroupId", request);
            
            // 调用aserver的getUserIndustryGroupId接口
            GetUserIndustryGroupIdResponse response = (GetUserIndustryGroupIdResponse)PortalServer.getInstance()
                .sendPostRequest("getUserIndustryGroupId", request);
            
            if (null != response && response.getIndustryInfo() != null)
            {
                industryGroupID = response.getIndustryInfo().getGroupID();
            }
        }
        catch (PortalException e)
        {
            logger.error("getIndustryGrougId failed", e);
            return "";
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getIndustryGrougId()");
        }
        return industryGroupID;
    }
    
    // modify by kf41851 at 2012-1-13 for REQ-975 end
    
    // modify by kf41851 at 2012-1-13 for REQ-925 begin
    /**
     * 获取专区下图书上架时间map
     * 
     * @author lkf41851
     * @param catalogId
     * @return
     */
    public Map<String, String> getBookOnlineTime(String catalogId)
    {
        GetBooksOnLineTimeRequest request = new GetBooksOnLineTimeRequest();
        request.setCatalogId(catalogId);
        Map<String, String> map = null;
        try
        {
            // GetBooksOnLineTimeResponse response =
            // (GetBooksOnLineTimeResponse) PortalServer.getInstance()
            // .sendPostRequest("getBooksOnLineTime", request);
            
            // 调用aserver的getBooksOnLineTime接口
            GetBooksOnLineTimeResponse response = (GetBooksOnLineTimeResponse)PortalServer.getInstance()
                .sendPostRequest("getLimitBooksOnLineTime", request);
            
            if (response != null)
            {
                map = response.getBookOnlineTimeMap();
            }
            
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getBooksOnLineTime() is error ", e);
        }
        return map;
    }
    
    // modify by kf41851 at 2012-1-13 for REQ-925 end
    
    // modify by hKF48608 at Jan 17, 2012 for REQ-925 begin
    /**
     * 根据图书ID列表，批量获取用户系统书签
     * 
     * @author hKF48608 hexiuli
     * @param msisdn
     * @param books
     * @return
     */
    public GetBatchSysBookmarkResponse getSysBookmarks(String msisdn, List<String> bookIDList)
    {
        
        logger.debug("Enter PortalEngine.getSysBookmarks()");
        
        try
        {
            GetBatchBookmarkRequest request = new GetBatchBookmarkRequest();
            request.setMsisdn(msisdn);
            request.setBookIdList(bookIDList);
            GetBatchSysBookmarkResponse response =
                (GetBatchSysBookmarkResponse)PortalServer.getInstance().sendPostRequest("getSysBookmarks", request);
            
            logger.debug("Exit PortalEngine.getSysBookmarks()");
            
            return response;
        }
        catch (PortalException e)
        {
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getSysBookmarks() is null ", e);
            }
        }
        return null;
    }
    
    // modify by hKF48608 at Jan 17, 2012 for REQ-925 end
    
    // modify by lKF41851 at 2012-3-6 for REQ-1135 begin
    /**
     * 投月票
     * 
     * @author lKF41851
     * @param msisdn
     * @param contentid
     * @param type
     * @return
     */
    public SubmitMonthlyTicketRsp submitMonthlyTicket(String msisdn, String contentId, String type, String loginType,
        String itemType, String channelCode, String sourceType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.submitMonthlyTicket()");
        }
        SubmitMonthlyTicketRsp rsp = new SubmitMonthlyTicketRsp();
        PollBookMonthTicketRequest request = new PollBookMonthTicketRequest();
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setMsisdn(msisdn);
        request.setBookId(contentId);
        request.setType(type);
        request.setLoginType(loginType);
        request.setBookItemType(itemType);
        request.setChannelCode(channelCode);
        request.setSourceType(sourceType);
        PollBookMonthTicketResponse response =
            (PollBookMonthTicketResponse)PortalServer.getInstance().sendPostRequest("pollBookMonthTicket", request);
        if (response != null)
        {
            rsp.setContentId(contentId);
            rsp.setMonthlyTicketValue(response.getTicketCnt());
            rsp.setRankValue(response.getRankValue());
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.submitMonthlyTicket()");
        }
        return rsp;
    }
    
    /**
     * 批量获取图书月票数
     * 
     * @author lKF41851
     * @param bookid
     * @return
     */
    public GetBatchBookMonthTicketResponse getMonthlyTicketValue(String bookid)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMonthlyTicketValue()");
        }
        if (StrUtil.isEmpty(bookid))
        {
            return null;
        }
        GetBatchBookMonthTicketRequest request = new GetBatchBookMonthTicketRequest();
        List<String> bookIdList = new ArrayList<String>();
        bookIdList.add(bookid);
        request.setBookIdList(bookIdList);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        GetBatchBookMonthTicketResponse response = null;
        try
        {
            response = (GetBatchBookMonthTicketResponse)PortalServer.getInstance()
                .sendPostRequest("getBatchBookMonthTicket", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getMonthlyTicketValue() is error ", e);
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMonthlyTicketValue()");
        }
        return response;
    }
    
    /**
     * 批量获取图书月票数
     * 
     * @author lKF41851
     * @param bookid
     * @return
     */
    public GetBatchBookMonthTicketResponse getMonthlyTicketValueBySence(String bookid, String trigger)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMonthlyTicketValue()");
        }
        if (StrUtil.isEmpty(bookid))
        {
            return null;
        }
        GetBatchBookMonthTicketRequest request = new GetBatchBookMonthTicketRequest();
        List<String> bookIdList = new ArrayList<String>();
        bookIdList.add(bookid);
        request.setBookIdList(bookIdList);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setTriggerSence(trigger);
        GetBatchBookMonthTicketResponse response = null;
        try
        {
            response = (GetBatchBookMonthTicketResponse)PortalServer.getInstance()
                .sendPostRequest("getBatchBookMonthTicket", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getMonthlyTicketValue() is error ", e);
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMonthlyTicketValue()");
        }
        return response;
    }
    
    /**
     * 批量获取图书积分
     * 
     * @author lKF41851
     * @param bookIdList
     * @return
     */
    public Map<String, String> getBatchBookScore(List<String> bookIdList)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBatchBookScore()");
        }
        if (Util.isEmpty(bookIdList))
        {
            return null;
        }
        Map<String, String> bookScoreMap = new HashMap<String, String>();
        // 每次发送的书籍id个数
        int num = PortalCacheManager.getConfigInt("batch_query_bookscore_num", 50);
        // 需要请求server的次数
        int times = bookIdList.size() / num;
        for (int i = 0; i <= times; i++)
        {
            List<String> subList =
                bookIdList.subList(i * num, (i + 1) * num > bookIdList.size() ? bookIdList.size() : (i + 1) * num);
            if (Util.isEmpty(subList))
            {
                continue;
            }
            BatchGetBookScoreInfoReqest request = new BatchGetBookScoreInfoReqest();
            BatchBookMarkInfoResponse response = null;
            request.setBookIdList(subList);
            try
            {
                response =
                    (BatchBookMarkInfoResponse)PortalServer.getInstance().sendPostRequest("getBatchBookScore", request);
            }
            catch (PortalException e)
            {
                logger.error("PortalEngine.getBatchBookScore() is error ", e);
            }
            if (response == null || response.getBookScoreList() == null)
            {
                continue;
            }
            for (BookScoreInfo bookScore : response.getBookScoreList())
            {
                bookScoreMap.put(bookScore.getBookId(), bookScore.getAvgScore());
            }
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getBatchBookScore()");
        }
        return bookScoreMap;
    }
    
    // modify by lKF41851 at 2012-3-6 for REQ-1135 end
    
    /**
     * 获取客户端未读消息总数查询
     * 
     * @author wkf39172
     * @param msisdn
     * @return
     */
    public GetStaInMessageListResponse getClientStaInMessageCount(String msisdn)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getClientStaInMessageCount(), ", new String[][] {{"msisdn", msisdn}});
        }
        
        // 获取个人未读消息数量
        GetStaInMessageListRequest req = new GetStaInMessageListRequest();
        req.setRecMsisdn(msisdn);
        // modify by wkf39172 at 2012-3-15 for WORK-6851 begin
        req.setIsRead(SystemConstants.DigitalBool.FALSE);
        String excludeType = PortalCacheManager.getConfigValue("personal_msg_excludetype", "10,12,13,14,30,33,34");
        // 需要过滤掉以下类型
        req.setExcludeType(excludeType);
        
        // modify by wkf39172 at 2012-3-15 for WORK-6851 end
        GetStaInMessageListResponse rsp = null;
        try
        {
            
            rsp = (GetStaInMessageListResponse)PortalServer.getInstance().sendPostRequest("getClientStaInMessageCount",
                req);
        }
        catch (PortalException e)
        {
            
            logger.error("PortalEngine.getClientStaInMessageCount() is null ", e);
            
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.CountMBlogList(), ", new String[][] {{"msisdn", msisdn}});
        }
        
        return rsp;
        
    }
    
    // modify by wkf39172 at Jan 17, 2012 for REQ-1135 end
    
    /**
     * 获取包月送书券描述语
     * 
     * @author c00206213
     * @param msisdn 手机号
     * @param userAgent UA信息
     * @param clientVersion 客户端版本号
     * @param channelCode 渠道号
     * @param catalogId 专区ID
     * @return 包月送书券描述语
     */
    public GetSubDescExtResponse getSubscribeDescExt(String msisdn, String userAgent, String clientVersion,
        String channelCode, String catalogId)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getSubscribeDescExt(), ",
                new String[][] {{"msisdn", msisdn}, {"userAgent", userAgent}, {"clientVersion", clientVersion},
                    {"channelCode", channelCode}, {"catalogId", catalogId}});
        }
        
        // 手机号和包月专区ID不能为空
        if (StringTools.isEmpty(msisdn) || StringTools.isEmpty(catalogId))
            return null;
        
        GetSubDescExtRequest req = new GetSubDescExtRequest();
        req.setMsisdn(msisdn);
        req.setUserAgent(userAgent);
        req.setClientVersion(clientVersion);
        req.setChannelCode(channelCode);
        req.setCatalogId(catalogId);
        req.setPortalType(SystemConstants.PORTAL_TYPE);
        GetSubDescExtResponse rsp = null;
        try
        {
            // rsp = (GetSubDescExtResponse)
            // PortalServer.getInstance().sendPostRequest("getSubscribeDescExt",
            // req);
            
            // 调用aserver的getSubscribeDescExt接口
            rsp = (GetSubDescExtResponse)PortalServer.getInstance().sendPostRequest("getSubscribeDescExt", req);
        }
        catch (PortalException e)
        {
            String[][] info = new String[][] {{"msisdn", msisdn}, {"userAgent", userAgent},
                {"clientVersion", clientVersion}, {"channelCode", channelCode}, {"catalogId", catalogId}};
            logger.error("PortalEngine.getSubscribeDescExt() is null ", info, e);
        }
        
        return rsp;
    }
    
    /**
     * 获取杂志阅读区块轮询内容
     * 
     * @author c00206213
     * @param msisdn 手机号
     * @return 返回轮询内容列表
     */
    public List<MagazineCycleContentInfo> getMagazineCycleContent(List<String> magazineCycleContentIdList)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMagazineCycleContent()");
        }
        
        // id列表为空直接返回
        if (Util.isEmpty(magazineCycleContentIdList))
            return null;
        
        GetMagazineCycleContentInfoRequest req = new GetMagazineCycleContentInfoRequest();
        req.setMagazineCycleContentIdList(magazineCycleContentIdList);
        GetMagazineCycleContentInfoResponse rsp = null;
        try
        {
            rsp = (GetMagazineCycleContentInfoResponse)PortalServer.getInstance()
                .sendPostRequest("getMagazineCycleContent", req);
        }
        catch (PortalException e)
        {
            StringBuilder content = new StringBuilder(256);
            for (String id : magazineCycleContentIdList)
            {
                content.append(id).append(";");
            }
            logger.error("PortalEngine.getMagazineCycleContent() is null ! ResultCode = " + e.getExceptionCode()
                + ",ids=" + content.toString(), e);
        }
        
        return (Util.isEmpty(rsp) || Util.isEmpty(rsp.getMagazineCycleContentInfoList())) ? null
            : rsp.getMagazineCycleContentInfoList();
    }
    
    // add by lKF72567 at 2012-5-3 for REQ-1074 begin
    /**
     * 根据主播ID获取主播信息
     * 
     * @param speakID 主播ID
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ReaderInfo getSpeakerInfo(String speakID)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"speakID", speakID}};
            logger.debug("Enter PortalEngine.getSpeakerInfo()", appInfo);
        }
        if (null == speakID || "".equals(speakID.trim()))
        {
            logger.error("authorID is null");
            return null;
        }
        
        ReaderInfo readerInfo = null;
        try
        {
            
            // 创建request类
            GetReaderInfoRequest request = new GetReaderInfoRequest();
            request.setReaderId(speakID);
            
            // 运行server中getReaderInfo接口
            GetReaderInfoResponse response =
                (GetReaderInfoResponse)PortalServer.getInstance().sendPostRequest("getReaderInfo", request);
            
            if (response != null)
            {
                readerInfo = response.getReaderInfo();
            }
            
        }
        catch (PortalException e)
        {
            throw e;
        }
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"speakID", speakID}};
            logger.debug("Exit PortalEngine.getAuthorInfo()", appInfo);
        }
        return readerInfo;
    }
    
    /**
     * 根据主播ID查询主播的作品
     * 
     * @param speakId 主播ID
     * @param start 起始位置
     * @param pageSize 显示个数
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetAuthorBookInfoResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetReaderBookInfoListResponse getSpeakerBookIDs(String speakId, int start, int pageSize)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAuthorBookIDs()", new String[][] {{"speakId", speakId}});
        }
        try
        {
            GetReaderBookInfoListRequest request = new GetReaderBookInfoListRequest();
            request.setReaderId(speakId);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(pageSize));
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            
            GetReaderBookInfoListResponse response = (GetReaderBookInfoListResponse)PortalServer.getInstance()
                .sendPostRequest("getReaderBookInfoList", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getSpeakerBookIDs()", new String[][] {{"speakId", speakId}});
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    // add by lKF72567 at 2012-5-3 for REQ1074 end
    /**
     * 听书下载生成token
     * 
     * @param msisdn用户号码
     * @param contentId内容id
     * @param chapterId章节编号
     * @throws PortalException [参数说明]
     * @return getContentTokenResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ContentTokenResponse getContentTokenResponse(String msisdn, String contentId, String chapterId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getContentTokenResponse()",
                new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId}});
        }
        
        try
        {
            ContentTokenRequest request = new ContentTokenRequest();
            request.setMsisdn(msisdn);
            request.setContentId(contentId);
            request.setChapterId(chapterId);
            ContentTokenResponse response =
                (ContentTokenResponse)PortalServer.getInstance().sendPostRequest("requestContentToken", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getContentTokenResponse()",
                    new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId}});
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 听书下载生成token
     * 
     * @param msisdn用户号码
     * @param contentId内容id
     * @param chapterId章节编号
     * @throws PortalException [参数说明]
     * @return getContentTokenResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public BatchContentTokenResponse batchGetContentTokenResponse(String msisdn, String contentId,
        List<String> chapterIds)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.batchGetContentTokenResponse()",
                new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId}});
        }
        
        try
        {
            BatchContentTokenRequest request = new BatchContentTokenRequest();
            request.setMsisdn(msisdn);
            request.setContentId(contentId);
            request.setChapterIds(chapterIds);
            BatchContentTokenResponse response = (BatchContentTokenResponse)PortalServer.getInstance()
                .sendPostRequest("batchRequestContentToken", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.batchGetContentTokenResponse()",
                    new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId}});
            }
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 听书下载token鉴权
     * 
     * @param msisdn用户号码
     * @param contentId内容id
     * @param chapterId章节编号
     * @throws PortalException [参数说明]
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void contentTokenAuth(String msisdn, String contentId, String chapterId, String tokenId, String msgId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.contentTokenAuth()",
                new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId},
                    {"tokenId", tokenId}, {"msgId", msgId}});
        }
        try
        {
            ContentTokenAuthRequest request = new ContentTokenAuthRequest();
            request.setMsisdn(msisdn);
            request.setContentId(contentId);
            request.setChapterId(chapterId);
            request.setTokenId(tokenId);
            request.setMsgId(msgId);
            PortalServer.getInstance().sendPostRequest("contentTokenAuth", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.contentTokenAuth()",
                    new String[][] {{"msisdn", msisdn}, {"contentId", contentId}, {"contentId", contentId},
                        {"tokenId", tokenId}, {"msgId", msgId}});
            }
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 查询微博用户账号信息
     * 
     * @param req
     * @return [参数说明]
     * @return WeiboShowUserResponse [返回类型说明]
     * @see [类、类#方法、类#成员]
     * @author c00206213
     * @param req
     * @return
     */
    public WeiboUserInfo showUserWeibo(String userId, String oauthToken, String oauthTokenSecret, String weiboType,
        String refreshToken)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.contentTokenAuth()",
                new String[][] {{"userId", userId}, {"oauthToken", oauthToken}, {"oauthTokenSecret", oauthTokenSecret},
                    {"weiboType", weiboType}, {"refreshToken", refreshToken}});
        }
        
        ShowUserWeiboRequest req = new ShowUserWeiboRequest();
        req.setOauthToken(oauthToken);
        req.setOauthTokenSecret(oauthTokenSecret);
        req.setRefreshToken(refreshToken);
        req.setWeiboType(weiboType);
        req.setPortalType(SystemConstants.PORTAL_TYPE);
        
        WeiboShowUserResponse response = null;
        try
        {
            response = (WeiboShowUserResponse)PortalServer.getInstance().sendPostRequest("showUserWeibo", req);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.showUserWeibo failed!ResultCode = " + e.getExceptionCode(), e);
            logger.error("PortalEngine.showUserWeibo failed!",
                new String[][] {{"msisdn", req.getMsisdn()}, {"portalType", req.getPortalType()},
                    {"weiboType", req.getWeiboType()}, {"tid", req.getTid()}, {"uid", req.getUid()},
                    {"screenName", req.getScreenName()}, {"oauthToken", req.getOauthToken()},
                    {"oauthTokenSecret", req.getOauthTokenSecret()}, {"refreshToken", req.getRefreshToken()}});
        }
        
        WeiboUserInfo weiboUserInfo = (response == null ? null : response.getUserInfo());
        
        return weiboUserInfo;
    }
    
    /**
     * 
     * 根据区块ID获取区块类型
     * 
     * @author c00206213
     * @param blockID
     * @return
     */
    public int getBlockType(String blockID)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getBlockType()", new String[][] {{"blockId", blockID}});
        }
        
        if (StringTools.isEmpty(blockID))
        {
            dLog.error("PortalEngine.getBlockType() blockId is null!");
            return 0;
        }
        
        GetBlockTypeRequest request = new GetBlockTypeRequest();
        request.setBlockID(blockID);
        
        GetBlockTypeResponse response = null;
        try
        {
            response = (GetBlockTypeResponse)PortalServer.getInstance().sendPostRequest("getBlockType", request);
        }
        catch (PortalException e)
        {
            
            dLog.error("PortalEngine.getBlockType() request server failed!ResultCode = " + e.getExceptionCode(),
                new String[][] {{"BlockID", blockID}});
            return 0;
        }
        
        return Util.isEmpty(response) ? 0 : response.getBlockTypeId();
    }
    
    /**
     * 
     * 根据区块ID获取区块对象
     * 
     * @author c00206213
     * @param blockID
     * @return
     */
    public PortalBaseBlockInfo getCommonBlockInfo(String blockID, int blockType)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getCommonBlockInfo()",
                new String[][] {{"blockId", blockID}, {"blockType", String.valueOf(blockType)}});
        }
        
        if (StringTools.isEmpty(blockID) || !Util.isLong(blockID) || blockType < TerminalConstants.BLOCK_TYPE_ONE)
        {
            dLog.error("PortalEngine.getCommonBlockInfo() parameters is wrong!",
                new String[][] {{"blockId", blockID}, {"blockType", String.valueOf(blockType)}});
            return null;
        }
        
        BlockInfoRequest request = new BlockInfoRequest();
        request.setBlockID(blockID);
        
        CommonBlockInfoResponse response = null;
        try
        {
            response =
                (CommonBlockInfoResponse)PortalServer.getInstance().sendPostRequest("getCommonBlockInfo", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getCommonBlockInfo() request server failed!ResultCode = " + e.getExceptionCode(),
                new String[][] {{"blockId", blockID}, {"blockType", String.valueOf(blockType)}});
            return null;
        }
        
        if (Util.isEmpty(response) || Util.isEmpty(response.getPropMap()))
        {
            dLog.error("PortalEngine.getCommonBlockInfo() server response is null!",
                new String[][] {{"blockId", blockID}, {"blockType", String.valueOf(blockType)}});
            return null;
        }
        
        BlockEntity blockEntity = new BlockEntity();
        blockEntity.setBlockCopyId(response.getBlockCopyId());
        blockEntity.setBlockId(Integer.valueOf(blockID));
        blockEntity.setMap(response.getPropMap());
        
        PortalBaseBlockInfo blockInfo = BlockFactory.createBlockBean(blockType);
        if (!Util.isEmpty(blockInfo))
        {
            blockInfo.transform(blockEntity);
            return blockInfo;
        }
        
        return null;
    }
    
    /**
     * 
     * 根据区块ID获取区块对象
     * 
     * @author c00206213
     * @param blockID
     * @return
     */
    public Map<String, List<String>> getCatalogBreedList(String catalogId)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getCatalogBreedList()", new String[][] {{"catalogId", catalogId}});
        }
        
        if (StringTools.isEmpty(catalogId) || !Util.isLong(catalogId))
        {
            dLog.error("PortalEngine.getCatalogBreedList() parameters is wrong!",
                new String[][] {{"catalogId", catalogId}});
            return null;
        }
        
        GetCatalogBreedListRequest request = new GetCatalogBreedListRequest();
        request.setCatalogId(catalogId);
        
        GetCatalogBreedListResponse response = null;
        try
        {
            response =
                (GetCatalogBreedListResponse)PortalServer.getInstance().sendPostRequest("getCatalogBreedList", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getCatalogBreedList() request server failed!ResultCode = " + e.getExceptionCode(),
                new String[][] {{"catalogId", catalogId}});
            return null;
        }
        
        if (Util.isEmpty(response))
        {
            dLog.error("PortalEngine.getBlockType() server response is null!",
                new String[][] {{"catalogId", catalogId}});
            return null;
        }
        
        Map<String, List<String>> catalogBreedMap = new HashMap<String, List<String>>(2);
        catalogBreedMap.put(TerminalConstants.MAJOR_BREED, response.getMajorBreedList());
        catalogBreedMap.put(TerminalConstants.MINOR_BREED, response.getMinorBreedList());
        return catalogBreedMap;
    }
    
    /**
     * 
     * 根据阅读号批量获取用户名
     * 
     * @author c00206213
     * @param msisdnList
     * @return
     */
    public List<UserNameMsisdnInfo> getBatchUserNameByMsisdn(List<String> msisdnList)
    {
        if (Util.isEmpty(msisdnList))
        {
            return null;
        }
        
        GetBatchUserNameByMsisdnRequest request = new GetBatchUserNameByMsisdnRequest();
        request.setMsisdnList(msisdnList);
        GetBatchUserNameByMsisdnResponse response = null;
        try
        {
            response = (GetBatchUserNameByMsisdnResponse)PortalServer.getInstance()
                .sendPostRequest("getBatchUserNameByMsisdn", request);
        }
        catch (PortalException e)
        {
            dLog.error(
                "PortalEngine.getBatchUserNameByMsisdn() request server failed!ResultCode = " + e.getExceptionCode());
            return null;
        }
        
        if (Util.isEmpty(response) || Util.isEmpty(response.getUserNameMsisdnInfoList()))
        {
            return null;
        }
        return response.getUserNameMsisdnInfoList();
    }
    
    /**
     * 
     * 根据用户名批量获取阅读号
     * 
     * @author c00206213
     * @param msisdnList
     * @return
     */
    public List<UserNameMsisdnInfo> getBatchMsisdnByUserName(List<String> userNameList)
    {
        if (Util.isEmpty(userNameList))
        {
            return null;
        }
        
        GetBatchMsisdnByUserNameRequest request = new GetBatchMsisdnByUserNameRequest();
        request.setUserNameList(userNameList);
        GetBatchMsisdnByUserNameResponse response = null;
        try
        {
            response = (GetBatchMsisdnByUserNameResponse)PortalServer.getInstance()
                .sendPostRequest("getBatchMsisdnByUserName", request);
        }
        catch (PortalException e)
        {
            dLog.error(
                "PortalEngine.getBatchUserNameByMsisdn() request server failed!ResultCode = " + e.getExceptionCode());
            return null;
        }
        
        if (Util.isEmpty(response) || Util.isEmpty(response.getUserNameMsisdnInfoList()))
        {
            return null;
        }
        return response.getUserNameMsisdnInfoList();
    }
    
    /**
     * 非cmwap接入用户通用注册接口
     * 
     * @param registType
     * @param msisdn
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return RegUserRegisterResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public RegUserRegisterResponse regUserRegister(String registType, String accountName, String msisdn,
        String password, String clientHash, String clientVersion, String isCheckClientHash, String IMEI, String IMSI,
        String IDFA)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}, {"accountName", accountName}};
            logger.debug("Enter PortalEngine.regUserRegister()", appInfos);
        }
        
        try
        {
            // 构造CMNET注册对象
            UserInfo userProfile = new UserInfo();
            userProfile.setAccountName(accountName);
            userProfile.setMobile(msisdn);
            userProfile.setClientVersion(clientVersion);
            userProfile.setPassword(password);
            userProfile.setNickName(accountName);
            
            RegUserRegisterRequest request = new RegUserRegisterRequest();
            request.setUserInfo(userProfile);
            request.setRegistType(registType);
            request.setClientHash(clientHash);
            request.setIsCheckClientHash(isCheckClientHash);
            
            request.setIMSI(IMSI);
            request.setIMEI(IMEI);
            request.setIDFA(IDFA);
            
            RegUserRegisterResponse resp =
                (RegUserRegisterResponse)PortalServer.getInstance().sendPostRequest("regUserRegister", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}, {"accountName", accountName}};
                logger.debug("Exit PortalEngine.regUserRegister()", appInfos);
            }
            return resp;
        }
        catch (PortalException e)
        {
            String[][] appInfos = {{"registType", registType}, {"msisdn", msisdn}, {"accountName", accountName}};
            logger.error("client terminalRegister failed", appInfos, e);
            throw e;
        }
        catch (Throwable t)
        {
            throw new PortalException(MessageCode.PORTAL_ERROR, t.toString());
        }
    }
    
    /**
     * 设置用户密保问题
     * 
     * @param msisdn 手机号或账户
     * @param question 密保问题
     * @param answer 密保答案
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void setMySecurityQuestion(String msisdn, String question, String answer)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            dLog.debug("Enter PortalEngine.setMySecurityQuestion()", appInfos);
        }
        
        try
        {
            SetMySecurityQuestionRequest request = new SetMySecurityQuestionRequest();
            request.setMsisdn(msisdn);
            request.setQuestion(question);
            request.setAnswer(answer);
            
            PortalServer.getInstance().sendPostRequest("setMySecurityQuestion", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                dLog.debug("Exit PortalEngine.setMySecurityQuestion()", appInfos);
            }
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.setMySecurityQuestion() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 查询用户密保问题
     * 
     * @param msisdn 手机号或阅读号
     * @param username 非手机号的用户名
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetMySecurityQuestionResponse getMySecurityQuestion(String msisdn, String username)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            dLog.debug("Enter PortalEngine.getMySecurityQuestion()", appInfos);
        }
        
        try
        {
            GetMySecurityQuestionRequest request = new GetMySecurityQuestionRequest();
            request.setMsisdn(msisdn);
            request.setUsername(username);
            
            // 获取密保问题
            GetMySecurityQuestionResponse rsp = (GetMySecurityQuestionResponse)PortalServer.getInstance()
                .sendPostRequest("getMySecurityQuestion", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                dLog.debug("Exit PortalEngine.getMySecurityQuestion()", appInfos);
            }
            return rsp;
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getMySecurityQuestion() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 密保问题答案校验
     * 
     * @param msisdn 手机号或阅读号
     * @param answer 密保答案
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public ValidateMySecurityQuestionResponse validateMySecurityQuestion(String msisdn, String answer)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"answer", answer}};
            dLog.debug("Enter PortalEngine.validateMySecurityQuestion()", appInfos);
        }
        
        try
        {
            ValidateMySecurityQuestionRequest request = new ValidateMySecurityQuestionRequest();
            request.setMsisdn(msisdn);
            request.setAnswer(answer);
            
            // 校验密保问题
            ValidateMySecurityQuestionResponse rsp = (ValidateMySecurityQuestionResponse)PortalServer.getInstance()
                .sendPostRequest("validateMySecurityQuestion", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"answer", answer}};
                dLog.debug("Exit PortalEngine.validateMySecurityQuestion()", appInfos);
            }
            return rsp;
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.validateMySecurityQuestion() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 获取注册找回密码
     * 
     * @param 手机号或阅读号
     * @return 事务id
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public String proceedPwdBackBussiness(String msisdn, String accountName)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.modifyPassword()");
        }
        RegGetTransactionRequest request = new RegGetTransactionRequest();
        
        request.setMsisdn(msisdn);
        // 找回密码事务类型
        request.setTxType(Types.REG_TRANSACTION_PWDBACK);
        // 间隔时间
        request.setBetweenTime(TerminalConstants.BETWEENTIME_DEFAULT);
        
        request.setAccountName(accountName);
        
        // 账号类型
        String accountType = ServiceUtil.getAccountType(accountName);
        request.setAccountType(accountType);
        
        try
        {
            RegGetTransactionResponse rsp = (RegGetTransactionResponse)PortalServer.getInstance()
                .sendPostRequest("proceedPwdBackBussiness", request);
            
            if (dLog.isDebugEnabled())
            {
                dLog.debug("Exit PortalEngine.modifyPassword()");
            }
            // 返回事务id
            return rsp.getTxId();
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.proceedPwdBackBussiness() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * cmnet接入修改密码
     * 
     * @param 事务id
     * @param 手机号或阅读号
     * @param 新密码
     * @return 修改密码状态
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public String checkAndModifyPwd(String transactionId, String msisdn, String newPwd, String accountName)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.modifyPassword()");
        }
        RegPwdMdfCheckRequest request = new RegPwdMdfCheckRequest();
        
        request.setMsisdn(msisdn);
        // 重设密码事务类型
        request.setActionType(Types.REG_PWDRESET);
        // 事务id
        request.setTransactionId(transactionId);
        // 新密码
        request.setNewPwd(newPwd);
        
        request.setAccountType("1");
        
        request.setAccountName(accountName);
        
        try
        {
            RegPwdMdfCheckResponse rsp =
                (RegPwdMdfCheckResponse)PortalServer.getInstance().sendPostRequest("checkAndModifyPwd", request);
            
            if (dLog.isDebugEnabled())
            {
                dLog.debug("Exit PortalEngine.modifyPassword()");
            }
            // 修改密码状态码
            return rsp.getPwdStatusCode();
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.checkAndModifyPwd() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 检查账户名是否存在
     * 
     * @param accountName 账号名
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public void chkAccountInUse(String accountName)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"accountName", accountName}};
            dLog.debug("Enter PortalEngine.chkAccountInUse()", appInfos);
        }
        
        try
        {
            ChkAccountInUseRequest request = new ChkAccountInUseRequest();
            request.setUsername(accountName);
            
            PortalServer.getInstance().sendPostRequest("chkAccountInUse", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"accountName", accountName}};
                dLog.debug("Exit PortalEngine.chkAccountInUse()", appInfos);
            }
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.chkAccountInUse() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 查询咪咕账号信息
     * 
     * @param accountName 账号名
     * @throws PortalException [参数说明]
     * 
     * @return String [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public MiguPassportInfoInquireRsp miguPassportInfoInquire(String accountName, String sourceIp, String remoteIp)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"accountName=", accountName}, {"sourceIp=", sourceIp}, {"remoteIp=", remoteIp}};
            dLog.debug("Enter PortalEngine.miguPassportInfoInquire()", appInfos);
        }
        
        // 存储手机号用户名
        MiguPassportInfoInquireReq request = new MiguPassportInfoInquireReq();
        request.setMsisdn(accountName);
        try
        {
            // 调用接口，获得相应response
            MiguPassportInfoInquireRsp rsp = (MiguPassportInfoInquireRsp)PortalServer.getInstance()
                .sendPostRequest("miguPassportInfoInquire", request);
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"accountName", accountName}};
                dLog.debug("Exit PortalEngine.miguPassportInfoInquire()", appInfos);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.miguPassportInfoInquire() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 查询充值记录列表信息
     * 
     * @author lKF72567
     * @param msisdn 手机号或阅读号
     * @param startDate 开始时间
     * @param endDate 结束时间
     * @param start 开始位置
     * @param count 查询数量
     * @throws PortalException
     */
    public GetTicketRecRecordResponse getTicketRecRecord(String msisdn, String startDate, String endDate, int start,
        int count)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"startDate", startDate}, {"endDate", endDate}};
            dLog.debug("Enter PortalEngine.getTicketRecRecord()", appInfos);
        }
        
        try
        {
            GetTicketRecRecordRequest request = new GetTicketRecRecordRequest();
            
            request.setPortalType("4");
            request.setMsisdn(msisdn);
            
            request.setStartDate(startDate);
            request.setEndDate(endDate);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            
            GetTicketRecRecordResponse rsp =
                (GetTicketRecRecordResponse)PortalServer.getInstance().sendPostRequest("getTicketRecRecord", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"startDate", startDate}, {"endDate", endDate}};
                dLog.debug("Exit PortalEngine.getTicketRecRecord()", appInfos);
            }
            return rsp;
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getTicketRecRecord() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * <根据ip获取省市信息>
     * 
     * @param ip
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return GetAreaCodeByIpAddressResponse [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public GetAreaCodeByIpAddressResponse getRegionByIp(String ip)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"ip", ip}};
            logger.debug("Enter PortalEngine.getRegionByIp()", appInfos);
        }
        try
        {
            GetAreaCodeByIpAddressRequest request = new GetAreaCodeByIpAddressRequest();
            request.setIpAddress(ip);
            GetAreaCodeByIpAddressResponse rsp = (GetAreaCodeByIpAddressResponse)PortalServer.getInstance()
                .sendPostRequest("getAreaCodeByIpAddress", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"ip", ip}};
                logger.debug("Exit PortalEngine.getRegionByIp()", appInfos);
            }
            return rsp;
        }
        catch (RuntimeException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 根据节点ID查询节点节点适配地域名称列表
     * 
     * @param nodeID
     * @return [参数说明]
     * 
     * @return CatalogInfo [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public List<NameInfo> getRegionNameList(String nodeID)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"nodeID", nodeID}};
            logger.debug("Enter PortalEngine.getWapNodeInfo()", appInfo);
        }
        GetCatalogInfoRequest request = new GetCatalogInfoRequest();
        request.setNodeId(nodeID);
        try
        {
            // GetCatalogInfoResponse response = (GetCatalogInfoResponse)
            // PortalServer.getInstance()
            // .sendPostRequest("getCatalogInfo", request);
            
            // 调用aserver的getCatalogInfo接口
            GetCatalogInfoResponse response =
                (GetCatalogInfoResponse)PortalServer.getInstance().sendPostRequest("getCatalogInfo", request);
            
            if (null == response)
            {
                return null;
            }
            NodeInfo nodeInfo = response.getNodeInfo();
            if (null == nodeInfo)
            {
                return null;
            }
            List<NameInfo> nameInfoList = nodeInfo.getAdaptNames();
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.getWapNodeInfo()", appInfo);
            }
            return nameInfoList;
        }
        catch (PortalException e)
        {
            logger.error("", e);
        }
        return null;
    }
    
    /**
     * BI推荐用户图书接口
     * 
     * @author lKF72567
     * @param recType 推荐方式
     * @param msisdn 手机号或阅读号
     * @param catalogId 专区id
     * @param start 开始位置
     * @param count 查询数量
     * @throws PortalException
     */
    public GetBIRecommendBooksResponse getBIRecommendBooks(String recType, String msisdn, String catalogId, int start,
        int count)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            String[][] appInfos = {{"msisdn", msisdn}, {"catalogId", catalogId}, {"recType", recType}};
            dLog.debug("Enter PortalEngine.getBIRecommendBooks()", appInfos);
        }
        
        try
        {
            GetBIRecommendBooksRequest request = new GetBIRecommendBooksRequest();
            // 推荐方式 1-普通专区推荐，2-包月专区推荐，3-按理由推荐，4-按作家推荐， 5-协同过滤推荐
            request.setRecType(recType);
            request.setMsisdn(msisdn);
            
            request.setCatalogId(catalogId);
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
            
            GetBIRecommendBooksResponse rsp =
                (GetBIRecommendBooksResponse)PortalServer.getInstance().sendPostRequest("getBIRecommendBooks", request);
            
            if (dLog.isDebugEnabled())
            {
                String[][] appInfos = {{"msisdn", msisdn}, {"catalogId", catalogId}, {"recType", recType}};
                dLog.debug("Exit PortalEngine.getBIRecommendBooks()", appInfos);
            }
            return rsp;
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getBIRecommendBooks() request server failed!", e);
            throw e;
        }
    }
    
    /**
     * 获取亲情网资费提示语
     * 
     * @author tWX149479
     * @param msisdn 手机号码
     * @param catalogId 专区id
     * @param bookId 图书id
     * @return 亲情网资费提示语响应
     */
    public GetKinshipSubDescResponse getKinShipDesc(String msisdn, String catalogId, String bookId)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getKinShipText",
                new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"bookId", bookId}});
        }
        GetKinshipSubDescResponse response = null;
        if (!Util.isEmpty(msisdn))
        {
            GetKinshipSubDescRequest request = new GetKinshipSubDescRequest();
            request.setMsisdn(msisdn);
            request.setCatalogId(catalogId);
            request.setBookId(bookId);
            request.setPortalType(TerminalCodes.PORTAL_TYPE);
            try
            {
                // response = (GetKinshipSubDescResponse)
                // PortalServer.getInstance().sendPostRequest("getKinshipSubDesc",
                // request);
                
                // 调用aserver的getKinshipSubDesc接口
                response =
                    (GetKinshipSubDescResponse)PortalServer.getInstance().sendPostRequest("getKinshipSubDesc", request);
            }
            catch (PortalException e)
            {
                dLog.error(" PortalEngine.getKinShipText() error! " + e.getMessage());
                return null;
            }
        }
        if (dLog.isDebugEnabled())
        {
            dLog.debug("End PortalEngine.getKinShipText",
                new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"bookId", bookId}});
        }
        return response;
    }
    
    /**
     * 
     * 根据用户名获取阅读号
     * 
     * @author lWX149482
     * @param username 用户名
     * @return 返回阅读号
     */
    public String getReadNumByUsername(String username)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getReadNumByUsername", new String[][] {{"msisdn", username}});
        }
        GetReadNumByUsernameRequest request = new GetReadNumByUsernameRequest();
        request.setUsername(username);
        GetReadNumByUsernameResponse response = new GetReadNumByUsernameResponse();
        try
        {
            response = (GetReadNumByUsernameResponse)PortalServer.getInstance().sendPostRequest("getReadNumByUsername",
                request);
            if (response == null)
            {
                return null;
            }
        }
        catch (PortalException e)
        {
            dLog.error(" PortalEngine.getReadNumByUsername() error! " + e.getMessage(),
                new String[][] {{"msisdn", username}});
            return null;
        }
        if (dLog.isDebugEnabled())
        {
            dLog.debug("End PortalEngine.getReadNumByUsername");
        }
        return response.getReadNum();
    }
    
    /**
     * 
     * 手机报欢迎页
     * 
     * @author lWX149482
     * @return 返回手机报列表
     */
    public List<MoblieNewsPaperInfo> getMoblieNewsPaperInfo()
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getMoblieNewsPaperInfo");
        }
        MoblieNewsPaperResponse resp = null;
        try
        {
            NewspaperWelcomeRequest request = new NewspaperWelcomeRequest();
            resp =
                (MoblieNewsPaperResponse)PortalServer.getInstance().sendPostRequest("getMoblieNewsPaperInfo", request);
            if (resp == null)
            {
                return null;
            }
        }
        catch (PortalException e)
        {
            dLog.error(" PortalEngine.getMoblieNewsPaperInfo() error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMoblieNewsPaperInfo()");
        }
        
        return resp.getNewsPaperList();
    }
    
    /**
     * 
     * 预定更新
     * 
     * @param msisdn 手机号码
     * @param bookId 图书
     * @param catalogId 专区id
     * @param type 操作类型
     * @author lWX149482
     * @throws PortalException
     */
    public void userPreSubscription(String msisdn, String bookId, String catalogId, String type)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.userPreSubscription()",
                new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"bookId", bookId}, {"type", type}});
        }
        try
        {
            UserPreSubscriptionRequest request = new UserPreSubscriptionRequest();
            request.setBookId(bookId);
            request.setMobile(msisdn);
            request.setCatalogId(catalogId);
            request.setOperationType(type);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            PortalServer.getInstance().sendPostRequest("userPreSubscription", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.userPreSubscription() error! ",
                new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"bookId", bookId}, {"type", type}});
            throw e;
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine.userPreSubscription()");
        }
    }
    
    /**
     * 获取所有书单列表信息
     * 
     * @author lwx149482
     * @return 返回所有书单列表信息响应
     */
    public List<BookListInfo> getActivityBooklists()
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getActivityBooklists");
        }
        String action = "getActivityBooklists";
        String url = PortalServer.getInstance().getEngineURL(action);
        BookListsResponse response = null;
        try
        {
            // 发送请求报文
            String resXml = HttpTools.getInstance().sendHttpRequestByGet(url, action);
            
            XStream xstream = PortalServer.getInstance().getXstream(action);
            
            response = (BookListsResponse)xstream.fromXML(resXml);
            if (response == null)
            {
                return null;
            }
        }
        catch (PortalException e)
        {
            dLog.error(" PortalEngine.getActivityBooklists error! ", e);
            return null;
        }
        if (dLog.isDebugEnabled())
        {
            dLog.debug("End PortalEngine.getActivityBooklists");
        }
        return response.getBookLists();
    }
    
    /**
     * 
     * 手机报欢迎页轮询信息
     * 
     * @author lWX149482
     * @return 返回手机报轮询信息
     */
    public WelcomePollingResponse getWelcomePollingResponse()
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine.getWelcomePollingResponse");
        }
        WelcomePollingResponse resp = null;
        try
        {
            NewspaperWelcomeRequest request = new NewspaperWelcomeRequest();
            resp = (WelcomePollingResponse)PortalServer.getInstance().sendPostRequest("getWelcomePolling", request);
            if (resp == null)
            {
                return null;
            }
        }
        catch (PortalException e)
        {
            dLog.error(" PortalEngine.getWelcomePollingResponse error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getWelcomePollingResponse()");
        }
        
        return resp;
    }
    
    /**
     * 
     * 查询推荐消息
     * 
     * @author cKF74481
     * @param msisdn 手机号
     * @param portalType 门户类型
     * @param timestamp 时间戳
     * @param recommendType 关联类型
     * @param clientVersion 客户端版本号
     * @param channelCode 渠道代码
     * @return 关联推荐响应信息
     */
    public RecommendMsgResponse getRecommendMsgList(String msisdn, String portalType, String timestamp,
        String recommendType, String clientVersion, String channelCode)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getRecommendMsgList");
        }
        RecommendMsgResponse resp = null;
        try
        {
            RecommendMsgRequest request = new RecommendMsgRequest();
            request.setMsisdn(msisdn);
            request.setPortalType(portalType);
            request.setTimestamp(timestamp);
            request.setRecommendType(recommendType);
            request.setClientVersion(clientVersion);
            request.setChannelCode(channelCode);
            resp = (RecommendMsgResponse)PortalServer.getInstance().sendPostRequest("getRecommendMsgList", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getRecommendMsgList error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getRecommendMsgList()");
        }
        
        return resp;
    }
    
    /**
     * 
     * 获取预制图书活动信息
     * 
     * @author tWX190302
     * @param msisdn
     * @param portalType
     * @param timestamp
     * @param recommendType
     * @param clientVersion
     * @param channelCode
     * @return
     */
    public PreSetBookActiveResponse getPreSetBookList()
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getPreSetBookList");
        }
        PreSetBookActiveResponse resp = null;
        try
        {
            PreSetBooksRequest request = new PreSetBooksRequest();
            resp =
                (PreSetBookActiveResponse)PortalServer.getInstance().sendPostRequest("getRecommendBookList", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getPreSetBookList error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getPreSetBookList()");
        }
        
        return resp;
    }
    
    /**
     * 调用统一认证获取手机验证码
     * 
     * @author tangfei 2016-3-22
     */
    public GetSmsVerifyCodeForMiguResp getNewSMSVerifyCode(String mobile, String businessId, String identityId,
        String sourceIp, String remoteIp)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getNewSMSVerifyCode() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getNewSMSVerifyCode(), params = ",
                new String[][] {{"mobile", mobile}, {"businessId", businessId}, {"identityId", identityId},
                    {"identityId", identityId}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        
        GetSmsVerifyCodeForMiguResp response;
        try
        {
            GetSmsVerifyCodeForMiguReq request = new GetSmsVerifyCodeForMiguReq();
            request.setMsisdn(mobile);
            request.setBusinessid(businessId);
            request.setIdentityId(identityId);
            response = (GetSmsVerifyCodeForMiguResp)PortalServer.getInstance()
                .sendPostRequest("getSmsVerifyCodeForMigu", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getNewSMSVerifyCode warn:", e);
            throw e;
        }
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.getNewSMSVerifyCode() ******");
        }
        return response;
    }
    
    /**
     * 二级账户关联账号绑定
     * 
     * @author tangfei 2016-3-22
     */
    public UpgradeMobileAccountResponse upgradeMobileAccount(String mobile, String sessionID, String businessId,
        String validCode, String identityId, String password, String clientVersion, String accountName, String sourceIp,
        String remoteIp)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.upgradeMobileAccount clientVersion=" + clientVersion);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.upgradeMobileAccount(), params = ",
                new String[][] {{"identityId", identityId}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        
        UpgradeMobileAccountResponse response;
        try
        {
            UpgradeMobileAccountRequest request = new UpgradeMobileAccountRequest();
            request.setMobile(mobile);
            request.setSessionID(sessionID);
            request.setBusinessid(businessId);
            request.setValidCode(validCode);
            request.setIdentityId(identityId);
            request.setAccountName(accountName);
            
            String clientPassword = getVersionPasswd(clientVersion);
            if (null != password)
            {
                password = Util.decryptPWD(password, clientVersion + clientPassword); // 获得新密码
                if (logger.isDebugEnable())
                {
                    logger.debug("upgradeMobileAccount password:" + password + " ,clientVersion:" + clientVersion
                        + " ,clientPassword:" + clientPassword);
                }
                request.setPassword(AESCodec.encrypt(password, AESCodec.KEY)); // 将解密后的密码再次加密传给aserver
            }
            else
            {
                request.setPassword("");
            }
            
            response = (UpgradeMobileAccountResponse)PortalServer.getInstance().sendPostRequest("upgradeMobileAccount",
                request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.upgradeMobileAccount error! " + e.getMessage());
            throw e;
        }
        catch (Exception e)
        {
            throw new PortalException(String.valueOf(TerminalCodes.SIGN_FAIL), "encrypt password error!");
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.upgradeMobileAccount()");
        }
        
        return response;
    }
    
    /**
     * 
     * 发送短信验证码
     * 
     * @author yWX151302
     * 
     */
    public SendEliteVerifyCodeResponse getSMSVerifyCode(String msisdn, String verifyCodeType, String sourceIp,
        String remoteIp)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getSMSVerifyCode() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getSMSVerifyCode(), params = ",
                new String[][] {{"msisdn", msisdn}, {"verifyCodeType", verifyCodeType}, {"sourceIp", sourceIp},
                    {"remoteIp", remoteIp}});
        }
        
        SendEliteVerifyCodeResponse response = null;
        
        try
        {
            SendEliteVerifyCodeRequest request = new SendEliteVerifyCodeRequest();
            request.setMsisdn(msisdn);
            request.setVerifyCodeType(verifyCodeType);
            request.setType(CLIENT);
            response =
                (SendEliteVerifyCodeResponse)PortalServer.getInstance().sendPostRequest("getSMSVerifyCode", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getSMSVerifyCode warn:", e);
            throw e;
        }
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.getSMSVerifyCode() ******");
        }
        return response;
        
    }
    
    /**
     * 
     * 校验验证码是否正确
     * 
     * @author yWX151302
     * 
     */
    public String validSMSVerifyCode(String msisdn, String verifyCodeType, String verifyCode, String sourceIp,
        String remoteIp)
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.validSMSVerifyCode() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.validSMSVerifyCode(), params = ",
                new String[][] {{"msisdn", msisdn}, {"verifyCodeType", verifyCodeType}, {"verifyCode", verifyCode},
                    {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        
        String exceptionCode = "";
        
        try
        {
            ValidSMSVerifyCodeRequest request = new ValidSMSVerifyCodeRequest();
            request.setMsisdn(msisdn);
            request.setVerifyCodeType(verifyCodeType);
            request.setVerifyCode(verifyCode);
            PortalServer.getInstance().sendPostRequest("validSMSCode", request);
        }
        catch (PortalException e)
        {
            exceptionCode = e.getExceptionCode();
            logger.error("PortalEngine.validSMSVerifyCode() warn:" + e.getMessage());
            return exceptionCode;
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.validSMSVerifyCode() ******");
        }
        
        return exceptionCode;
        
    }
    
    /**
     * 
     * 绑定支付移动手机号
     * 
     * @author yWX151302
     * 
     */
    public void bindPayMsisdn(String account, String payMsisdn, int portalType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.bindPayMsisdn");
        }
        
        try
        {
            BindPayMsisdnRequest request = new BindPayMsisdnRequest();
            request.setAccount(account);
            request.setPayMsisdn(payMsisdn);
            request.setPortalType(String.valueOf(portalType));
            PortalServer.getInstance().sendPostRequest("bindPayMsisdn", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.bindPayMsisdn error! " + e.getMessage());
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.bindPayMsisdn()");
        }
        
    }
    
    /**
     * 
     * 解除绑定支付移动手机号
     * 
     * @author yWX151302
     * 
     */
    public void unbindPayMsisdn(String identityId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.unbindPayMsisdn");
        }
        
        try
        {
            UnbindPayMsisdnRequest request = new UnbindPayMsisdnRequest();
            request.setAccount(identityId);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            PortalServer.getInstance().sendPostRequest("unbindPayMsisdn", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.unbindPayMsisdn error! " + e.getMessage());
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.unbindPayMsisdn()");
        }
        
    }
    
    /**
     * 
     * appstore包月订购确认
     * 
     * @author yWX151302
     * 
     */
    public void confirmAppStoreSubscribe(String mobile, String certificate, String productId, String clientVersion,
        String idfa, String subCircle, String isRecharge, String subType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.confirmAppStoreSubscribe");
        }
        
        try
        {
            SubscribeRequest subReq = new SubscribeRequest();
            subReq.setMobile(mobile);
            subReq.setProductId(productId);
            subReq.setAccessType(Types.PORTAL_TERMINAL + "");
            subReq.setClientVersion(clientVersion);
            subReq.setChannelCode(Constants.DEFALUT_CHANNELCODE);
            subReq.setPayType(PaymentMode.APPSTORE_PAY);
            subReq.setCertificate(certificate);
            subReq.setTerminalUniqueId(idfa);
            subReq.setCycles(subCircle);
            subReq.setRenewOption(isRecharge);
            subReq.setSubType(subType);
            
            PortalServer.getInstance().sendPostRequest("subscribe", subReq);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.confirmAppStoreSubscribe error! " + e.getMessage());
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.confirmAppStoreSubscribe()");
        }
        
    }
    
    /**
     * 
     * 获取关联推荐信息
     * 
     * @author gWX150454
     * @param msisdn
     * @param portalType
     * @param bookId
     * @param userAreaCode
     * @param channelCode
     * @param userAgent
     * @param clientVersion
     * @param remoteIP
     * @return
     */
    public RecommendRelevanceResponse getRecommendRelevance(String msisdn, String portalType, String bookId,
        String clientVersion, String userAgent, String channelCode, String userAreaCode, String remoteIP)
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getRecommendRelevance() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getRecommendRelevance(), params = ",
                new String[][] {{"msisdn", msisdn}, {"portalType", portalType}, {"bookId", bookId},
                    {"clientVersion", clientVersion}, {"userAgent", userAgent}, {"channelCode", channelCode},
                    {"userAreaCode", userAreaCode}, {"remoteIP", remoteIP}});
        }
        
        RecommendRelevanceResponse resp = null;
        try
        {
            resp = ThreadLocalContext.getRecommendRelevanceFromContext(msisdn, bookId, portalType);
            if (resp != null)
            {
                return resp;
            }
            
            RecommendRelevanceRequest request = new RecommendRelevanceRequest();
            request.setMobile(msisdn);
            request.setBookid(bookId);
            request.setProtType(portalType);
            
            /*
             * ST环境aserver没有portType=4(client门户)的数据， rec_test_pass_book配置在ptl_parameter表，value中的书籍会被指定portType=1( Wap门户)
             * String passBook = PortalCacheManager.getConfigValue("rec_test_pass_book");
             * request.setProtType((Util.isNotEmpty(passBook) && passBook.contains(bookId)) ?
             * SystemConstants.PORTAL_TYPE_CMWAP_CDTLOG : SystemConstants.PORTAL_TYPE);
             */
            
            // IREAD-18468关联推荐增加请求参数
            request.setClientVersion(clientVersion);
            request.setUserAgent(userAgent);
            request.setChannelCode(channelCode);
            // 根据游客ip获取地域信息，获取不到则默认全国
            if (IReadTools.isGuestLogin(msisdn) || IReadTools.isReadNumber(msisdn))
            {
                GetAreaCodeByIpAddressResponse region = IReadTools.getRegionByIp(remoteIP);
                if (region != null)
                {
                    if (StrUtil.isNotEmpty(region.getCityId()))
                    {
                        request.setUserAreaCode(region.getCityId());
                    }
                    else if (StrUtil.isNotEmpty(region.getProvinceId()))
                    {
                        request.setUserAreaCode(region.getProvinceId());
                    }
                    else
                    {
                        request.setUserAreaCode(Types.DEFAULT_PROVINCEID);
                    }
                }
                else
                {
                    request.setUserAreaCode(Types.DEFAULT_PROVINCEID);
                }
            }
            resp =
                (RecommendRelevanceResponse)PortalServer.getInstance().sendPostRequest("recommendRelevance", request);
            ThreadLocalContext.putRecommendRelevanceIntoContext(msisdn, bookId, portalType, resp);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getRecommendRelevance error! " + e.getMessage());
            return null;
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.getRecommendRelevance() ******");
        }
        
        return resp;
    }
    
    /**
     * 获取用户等级信息
     * 
     * @author dell
     * @param msisdn 手机号码
     * @param bookId 图书id
     * @param portalType 门户类型
     * @return
     */
    public RecommendMemberInfoResponse getMemberRecommend(String msisdn, String bookId, String portalType)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMemberRecommend msisdn = " + msisdn + " bookId = " + bookId
                + " portalType = " + portalType);
        }
        RecommendMemberInfoResponse resp = null;
        try
        {
            resp = ThreadLocalContext.getRecommendMemberFromContext(msisdn, bookId, portalType);
            if (resp != null)
            {
                return resp;
            }
            
            RecommendMemberInfoRequest request = new RecommendMemberInfoRequest();
            request.setMsisnId(msisdn);
            request.setBookId(bookId);
            
            resp =
                (RecommendMemberInfoResponse)PortalServer.getInstance().sendPostRequest("getRecommendMember", request);
            ThreadLocalContext.putRecommendMemberIntoContext(msisdn, bookId, portalType, resp);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getMemberRecommend error! " + e + " msisdn = " + msisdn + " bookId = " + bookId
                + " portalType = " + portalType);
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getMemberRecommend msisdn = " + msisdn + " bookId = " + bookId
                + " portalType = " + portalType);
        }
        
        return resp;
    }
    
    /**
     * 
     * 获取包月权益
     * 
     * @author gWX150454
     * @param msisdn
     * @param portalType
     * @param bookId
     * @return
     */
    public GetEquityInfoResponse getEquityInfo(String msisdn, String chargeMode)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getEquityInfo");
        }
        GetEquityInfoResponse resp = null;
        try
        {
            resp = ThreadLocalContext.getEquityFromContext(msisdn, chargeMode);
            if (resp != null)
            {
                return resp.getCatalogList() == null ? null : resp;
            }
            
            GetEquityInfoRequest request = new GetEquityInfoRequest();
            request.setMsisdn(msisdn);
            request.setChargeMode(chargeMode);
            resp = (GetEquityInfoResponse)PortalServer.getInstance().sendPostRequest("getEquityInfo", request);
            if (resp == null)
            {
                ThreadLocalContext.putEquityIntoContext(msisdn, chargeMode, new GetEquityInfoResponse());
            }
            else
            {
                ThreadLocalContext.putEquityIntoContext(msisdn, chargeMode, resp);
            }
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getRecommendRelevance error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getRecommendRelevance()");
        }
        
        return resp;
    }
    
    /**
     * 
     * 
     * 获取用户的支付方式列表
     * 
     * @param msisdn
     * @param portalType
     * @param bookId
     * @return
     */
    public GetUserPaymentWayResponse getUserPaymentWay(String msisdn, String orderType)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getUserPaymentWay");
        }
        
        GetUserPaymentWayResponse resp = SessionTools.getUserPaymentWayBySession(msisdn, orderType);
        
        if (resp != null)
        {
            return resp;
        }
        
        try
        {
            GetUserPaymentWayRequest request = new GetUserPaymentWayRequest();
            request.setMsisdn(msisdn);
            request.setOrderType(orderType);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            resp = (GetUserPaymentWayResponse)PortalServer.getInstance().sendPostRequest("getUserPaymentWay", request);
            
            SessionTools.putUserPaymentWayBySession(msisdn, orderType, resp);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getUserPaymentWay error! " + e.getMessage());
            return null;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getUserPaymentWay()");
        }
        
        return resp;
    }
    
    /**
     * 
     * 保存AOI侧的TOKEN值与阅读号的映射关系
     * 
     * @author wWX180488
     * @param clientVersion 版本号
     * @param channelCode 渠道编号
     * @param msisdn 手机号
     * @param token token
     * @throws PortalException iserver异常
     */
    public void saveAOIToken(String clientVersion, String channelCode, String msisdn, String token,
        String terminalUniqueId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.saveAOIToken");
        }
        
        try
        {
            SaveAOITokenRequest request = new SaveAOITokenRequest();
            request.setToken(token);
            request.setMsisdn(msisdn);
            request.setChannelCode(channelCode);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(terminalUniqueId);
            PortalServer.getInstance().sendPostRequest("saveAOIToken", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.saveAOIToken error! " + e.getMessage());
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.saveAOIToken()");
        }
        
    }
    
    /**
     * 获取插件管理列表
     * 
     * @author sWX164165
     * @param
     */
    
    public GetPluginListResponse getPluginList(String clientVersion, String msisdn)
        throws PortalException
    
    {
        logger.debug("Enter PortalEngine.getPluginList()");
        
        GetPluginListRequest request = new GetPluginListRequest();
        request.setVersion(clientVersion);
        request.setMsisdn(msisdn);
        GetPluginListResponse response =
            (GetPluginListResponse)PortalServer.getInstance().sendPostRequest("getPluginList", request);
        
        logger.debug("Exit PortalEngine.getPluginList()");
        return response;
    }
    
    /**
     * 备份云书架信息
     * 
     * @author sWX164165
     * @param
     */
    public void BakCloudBookShelf(List<CloudBookmark> bakCloudBookShelfInfo, String msisdn, String isOnlineOrDownload,
        String isFinish, String uploadTime)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.BakCloudBookShelf()");
        
        BakCloudBookShelfRequest request = new BakCloudBookShelfRequest();
        request.setBookmarkList(bakCloudBookShelfInfo);
        request.setMsisdn(msisdn);
        request.setOnlineOrdownload(isOnlineOrDownload);
        request.setIsfinish(isFinish);
        request.setUploadTime(uploadTime);
        try
        {
            PortalServer.getInstance().sendPostRequest("bakCloudBookShelf", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.BakCloudBookShelf error! " + e.getMessage());
            throw e;
        }
        
        logger.debug("Exit PortalEngine.BakCloudBookShelf()");
    }
    
    public SyncCloudBookShelfResponse synCloudBookShelf(String msisdn, int start, int count, String onlineOrdownload,
        String contentType)
        throws PortalException
    {
        logger.debug("Enter SynCloudBookShelf()");
        
        SyncCloudBookShelfRequest request = new SyncCloudBookShelfRequest();
        request.setMsisdn(msisdn);
        request.setOnlineOrdownload(onlineOrdownload);
        request.setContentType(contentType);
        
        // 下载时才需要携带
        if (StrUtil.isEq(onlineOrdownload, DOWNLOAD))
        {
            request.setStart(String.valueOf(start));
            request.setCount(String.valueOf(count));
        }
        
        SyncCloudBookShelfResponse rsp = null;
        try
        {
            rsp = (SyncCloudBookShelfResponse)PortalServer.getInstance().sendPostRequest("syncCloudBookShelf", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.SynCloudBookShelf error! " + e.getMessage());
            throw e;
        }
        
        logger.debug("Exit SynCloudBookShelf()");
        return rsp;
    }
    
    /**
     * 第三方登录鉴权
     * 
     * @author mWX177641
     * @param stoken 自动登录鉴权token
     * @param counter 计数器
     * @param clientVersion 客户端版本
     * @param tpAuthToken 第三方鉴权token
     * @param tpToken 第三方下发的token
     * @param tokenId 门户下发的token
     * @param channel 渠道编码
     * @return 第三方鉴权响应消息
     * @throws PortalException
     */
    public ThirdPartyAccountAuthenticateRsp loginWithThirdPartyToken(String stoken, int counter, String clientVersion,
        String tpAuthToken, String tokenId, String tpToken, String channel)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.loginWithThirdPartyToken()");
        
        // 组装请求消息
        ThirdPartyAccountAuthenticateReq request = new ThirdPartyAccountAuthenticateReq();
        request.setChannel(channel);
        request.setCounter(String.valueOf(counter));
        request.setStoken(stoken);
        request.setVersion(clientVersion);
        request.setTokenId(tokenId);
        request.setTpAuthToken(tpAuthToken);
        request.setTpToken(tpToken);
        request.setPortalType(CDRConst.PORTALTYPE_CLIENT);
        
        // 调用server接口获取鉴权信息
        ThirdPartyAccountAuthenticateRsp response = (ThirdPartyAccountAuthenticateRsp)PortalServer.getInstance()
            .sendPostRequest("thirdPartyAccountAuthenticate", request);
        
        logger.debug("Exit PortalEngine.loginWithThirdPartyToken()");
        
        return response;
    }
    
    /**
     * 与 loginWithThirdPartyToken 功能相同，但返回用户信息。 added by chengbo for req-3559
     * 
     * @author chengbo
     * @param stoken 自动登录鉴权token
     * @param counter 计数器
     * @param clientVersion 客户端版本
     * @param tpAuthToken 第三方鉴权token
     * @param tpToken 第三方下发的token
     * @param tokenId 门户下发的token
     * @param channel 渠道编码
     * @param isReturnUserInfo 是否需要返回用户信息，true为返回
     * @return 第三方鉴权响应消息
     * @throws PortalException
     */
    public ThirdPartyAccountAuthenticateRsp loginWithThirdPartyToken2(String stoken, int counter, String clientVersion,
        String tpAuthToken, String tokenId, String tpToken, String channel, boolean isReturnUserInfo)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.loginWithThirdPartyToken2()");
        
        // 组装请求消息
        ThirdPartyAccountAuthenticateReq request = new ThirdPartyAccountAuthenticateReq();
        request.setChannel(channel);
        request.setCounter(String.valueOf(counter));
        request.setStoken(stoken);
        request.setVersion(clientVersion);
        request.setTokenId(tokenId);
        request.setTpAuthToken(tpAuthToken);
        request.setTpToken(tpToken);
        request.setPortalType(CDRConst.PORTALTYPE_CLIENT);
        if (isReturnUserInfo)
        {
            request.setIsReturnUserInfo("1");
        }
        
        // 调用server接口获取鉴权信息
        ThirdPartyAccountAuthenticateRsp response = (ThirdPartyAccountAuthenticateRsp)PortalServer.getInstance()
            .sendPostRequest("thirdPartyAccountAuthenticate", request);
        
        logger.debug("Exit PortalEngine.loginWithThirdPartyToken2()");
        
        return response;
    }
    
    /**
     * 查询对接个推的图片信息
     * 
     * @param recommendMsgId 消息Id
     * @return
     * @throws PortalException [参数说明]
     * 
     * @return List [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public RecommendMsgPicResponse getImageList(String recommendMsgId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"recommendMsgId", recommendMsgId}};
                logger.debug("Enter PortalEngine.getImageList()", appInfo);
            }
            
            DownloadRecommendMsgPicReq request = new DownloadRecommendMsgPicReq();
            request.setRecommendMsgId(recommendMsgId);
            
            RecommendMsgPicResponse response =
                (RecommendMsgPicResponse)PortalServer.getInstance().sendPostRequest("getRecommendMsgPicList", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"recommendMsgId", recommendMsgId}};
                logger.debug("Exit PortalEngine.getImageList()", appInfo);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getImageList error! " + e.getMessage());
            throw e;
        }
    }
    
    /**
     * 
     * 获取内容适配规则信息列表
     * 
     * @author qWX190896
     * @return 内容适配规则列表
     */
    public List<ContentAdapterRuleInfo> getContentAdapterRuleList()
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getContentAdapterRuleList()");
        }
        
        List<ContentAdapterRuleInfo> contentAdapterRuleList = null;
        try
        {
            ContentAdapterRuleResponse response = (ContentAdapterRuleResponse)PortalServer.getInstance()
                .sendPostRequest("getContentAdapterRuleList", null);
            if (null != response)
            {
                contentAdapterRuleList = response.getContentAdapterRuleInfoList();
            }
        }
        catch (PortalException e)
        {
            logger.error("", e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getContentAdapterRuleList()");
        }
        
        return contentAdapterRuleList;
    }
    
    /**
     * 视频能力适配
     */
    public AdapterTerminalMediaCapacityResponse adapterTerminalMediaCapacity(String operatingSystem, String screenWidth,
        String screenHeight, String userAgent, String isIntegrateHLS, String bearType,
        List<TerminalMediaInfo> terminalMediaInfoList, List<DefaultMediaUrlInfo> defaultMediaInfoList, String videoId)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.adapterTerminalMediaCapacity()");
        }
        AdapterTerminalMediaCapacityRequest request = new AdapterTerminalMediaCapacityRequest();
        request.setOperatingSystem(operatingSystem);
        request.setAccessType(PortalTypes.TERMINAL);
        request.setScreenWidth(screenWidth);
        request.setScreenHeight(screenHeight);
        request.setUserAgent(userAgent);
        request.setIsIntegrateHLS(isIntegrateHLS);
        request.setBearType(bearType);
        request.setTerminalMediaInfoList(terminalMediaInfoList);
        request.setDefaultMediaUrlList(defaultMediaInfoList);
        // videoId 字段 不为空的时候透传给server接口
        if (!StrUtil.isEmpty(videoId))
        {
            request.setVideoId(videoId);
        }
        logger.debug("videoId:" + videoId);
        
        AdapterTerminalMediaCapacityResponse response = null;
        try
        {
            response = (AdapterTerminalMediaCapacityResponse)PortalServer.getInstance()
                .sendPostRequest("adapterTerminalMediaCapacity", request);
        }
        catch (PortalException e)
        {
            logger.error("PoratalEngine.adapterTerminalMediaCapacity error!" + e.getMessage());
            // throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.adapterTerminalMediaCapacity()");
        }
        return response;
    }
    
    /**
     * 获取图片适配规则
     * 
     * @author zWX198032
     * @return
     */
    public GetAdaptPictureRuleResponse getAdaptPictureRule()
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getAdaptPictureRule()");
        }
        
        GetAdaptPictureRuleRequest request = new GetAdaptPictureRuleRequest();
        GetAdaptPictureRuleResponse response = null;
        
        response =
            (GetAdaptPictureRuleResponse)PortalServer.getInstance().sendPostRequest("getAdaptPictureRule", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.getAdaptPictureRule()");
        }
        return response;
        
    }
    
    /**
     * 
     * 获取下载记录或领取微信赠书记录
     * 
     * @author tWX190908
     * @param msisdn 阅读号
     * @return
     * @throws PortalException
     */
    public GetDownloadRecordResponse getClientDownloadEntryRecord(String msisdn, String qryType)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getClientDownloadEntryRecord()", appInfo);
        }
        
        GetDownloadRecordResponse response = null;
        try
        {
            GetDownloadRecordRequest request = new GetDownloadRecordRequest();
            request.setMsisdn(msisdn);
            request.setQryType(qryType);
            
            response = (GetDownloadRecordResponse)PortalServer.getInstance()
                .sendPostRequest("getClientDownloadEntryRecord", request);
            
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getClientDownloadEntryRecord() error! ", e);
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"msisdn", msisdn}};
            logger.debug("Exit PortalEngine.getClientDownloadEntryRecord()", appInfo);
        }
        
        return response;
    }
    
    /**
     * 
     * 获取短地址
     * 
     * @author xWX180487
     * @param longUrl 长地址
     * @return 短地址
     * @throws PortalException
     */
    public String getShortUrl(String longUrl)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.getShortUrl()");
        
        GetShortUrlRequest shortUrlRequest = new GetShortUrlRequest();
        shortUrlRequest.setLongUrl(longUrl);
        
        GetShortUrlResponse response =
            (GetShortUrlResponse)PortalServer.getInstance().sendPostRequest("getShortUrl", shortUrlRequest);
        
        logger.debug("Exit PortalEngine.getShortUrl()");
        return null != response ? response.getShortUrl() : null;
    }
    
    /**
     * 
     * 获取事务ID
     * 
     * @author xWX180487
     * @param msisdn 手机号
     * @param recommendType 推荐类型
     * @param recommendWay 推荐方式
     * @param contentId 图书ID
     * @return 事务ID
     * @throws PortalException
     */
    public String getTransaction(String msisdn, String recommendType, String recommendWay, String contentId)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.getTransaction()");
        
        GetTransactionRequest request = new GetTransactionRequest();
        request.setSrcMdn(msisdn);
        request.setMarketType(recommendType);
        request.setRecommendWay(recommendWay);
        request.setContentId(contentId);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        
        GetTransactionResponse response =
            (GetTransactionResponse)PortalServer.getInstance().sendPostRequest("getTransaction", request);
        
        logger.debug("Exit PortalEngine.getTransaction()");
        return null != response ? response.getTsId() : null;
    }
    
    /**
     * 
     * 图书分享
     * 
     * @author shanlingling
     * @param msisdn 手机号
     * @param contentId 图书ID
     * @throws PortalException
     */
    public void sendBeforeShareMsg(String msisdn, String contentId)
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.sendBeforeShareMsg() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.sendBeforeShareMsg(), params = ",
                new String[][] {{"msisdn", msisdn}, {"contentId", contentId}});
        }
        
        try
        {
            SendBeforeShareMsgRequest request = new SendBeforeShareMsgRequest();
            request.setSrcMdn(msisdn);
            request.setBookId(contentId);
            
            PortalServer.getInstance().sendPostRequest("sendBeforeShareMsg", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.sendBeforeShareMsg() warn:", e);
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.sendBeforeShareMsg() ******");
        }
    }
    
    /**
     * 
     * 校验用户是否为阅读用户
     * 
     * @author lWX180672
     * @param msisdnList 手机号列表
     * @param isEncrypt 是否加密
     * @return 校验后用户信息
     * @throws PortalException 异常信息
     */
    public CheckReaderUserResponse checkReaderUser(List<String> msisdnList, boolean isEncrypt)
        throws PortalException
    {
        CheckReaderUserRequest request = new CheckReaderUserRequest();
        if (isEncrypt)
        {
            request.setEncryptedMsisdnList(msisdnList);
        }
        else
        {
            request.setMsisdnList(msisdnList);
        }
        CheckReaderUserResponse response = null;
        try
        {
            response = (CheckReaderUserResponse)PortalServer.getInstance().sendPostRequest("checkReaderUser", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.checkReaderUser() request server failed!ResultCode = " + e.getExceptionCode());
            throw e;
        }
        return response;
    }
    
    /**
     * 通过SDK分享内容到微信、朋友圈、新浪微博结果的反馈接口
     * 
     * @author qWX145165
     * @param msisdn 手机号
     * @param timestamp 时间戳
     * @param shareChannel 分享渠道
     * @param shareObjStr 分享类型
     * @param productidStr 单机包id
     * @throws PortalException
     */
    public void feedbackShare(String msisdn, String timestamp, String shareChannel, String shareObjStr,
        String productidStr, String objType, String scene)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine feedbackShare",
                new String[][] {{"msisdn", msisdn}, {"timestamp", timestamp}, {"shareChannel", shareChannel},
                    {"shareObj", shareObjStr}, {"productid", productidStr}, {"scene", scene}});
        }
        
        try
        {
            FeedbackShareRequest request = new FeedbackShareRequest();
            request.setMsisdn(msisdn);
            request.setTimestamp(timestamp);
            request.setShareChannel(shareChannel);
            request.setObjType(objType);
            request.setShareObj(shareObjStr);
            request.setScene(scene);
            
            if (!StrUtil.isEmpty(productidStr))
            {
                request.setProductid(productidStr);
            }
            
            PortalServer.getInstance().sendPostRequest("feedbackShare", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine feedbackShare, failed", e.getExceptionCode());
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine feedbackShare");
        }
    }
    
    /**
     * 
     * 推荐反馈
     * 
     * @author sWX149481
     * @param transId 事务id
     * @param msisdns 被推荐人号码
     * @return 推荐反馈成功号码
     */
    public FeedbackTransactionResponse feedbackTransaction(String transId, String msisdns)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine feedbackTransaction",
                new String[][] {{"msisdns", msisdns}, {"transId", transId}});
        }
        
        FeedbackTransactionRequest request = new FeedbackTransactionRequest();
        request.setRecommendedMsisdn(msisdns);
        request.setTsId(transId);
        
        FeedbackTransactionResponse response = null;
        
        try
        {
            response =
                (FeedbackTransactionResponse)PortalServer.getInstance().sendPostRequest("feedbackTransaction", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine feedbackTransaction failed", e.getExceptionCode());
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine feedbackTransaction");
        }
        
        return response;
    }
    
    /**
     * 
     * 根据不同类型获取不同的账号
     * 
     * @author dKF66516
     * @param userId 身份id
     * @param accountType 账号类型
     * @return
     */
    public String getAccount(String userId, String accountType)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine getNewMsisdn userId---->" + userId + "----accountType----->" + accountType);
        }
        GetUserInfoRequest request = new GetUserInfoRequest();
        request.setAccountType(accountType);
        request.setMobile(userId);
        GetUserInfoResponse response = null;
        String account = null;
        
        try
        {
            response = (GetUserInfoResponse)PortalServer.getInstance().sendPostRequest("getUserInfo", request);
            if (null != response && null != response.getUserInfo())
            {
                account = response.getUserInfo().getAccountName();
            }
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine getUserInfo failed", e);
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine getNewMsisdn userId---->" + userId + "----accountType----->" + accountType);
        }
        
        return account;
    }
    
    /**
     * 
     * 根据不同类型获取不同的账号
     * 
     * @author dKF66516
     * @param userId 身份id
     * @param accountType 账号类型
     * @return
     */
    public GetUserInfoResponse getUserInfoByIdentityID(String userId)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine getUserInfoByIdentityID userId---->" + userId);
        }
        GetUserInfoRequest request = new GetUserInfoRequest();
        request.setMobile(userId);
        GetUserInfoResponse response = null;
        
        try
        {
            response = (GetUserInfoResponse)PortalServer.getInstance().sendPostRequest("getUserInfo", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine getUserInfo failed", e);
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine getUserInfoByIdentityID userId---->" + userId);
        }
        
        return response;
    }
    
    /**
     * 
     * 根据用户名获取用户信息
     * 
     * @author dKF66516
     * @param userId 身份id
     * @param accountType 账号类型
     * @return
     */
    public UserInfo getUserInfoByAccount(String accountName, String accountType)
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine getUserInfoByAccount accountName---->" + accountName
                + "----accountType----->" + accountType);
        }
        GetUserInfoByAccountRequest request = new GetUserInfoByAccountRequest();
        request.setAccountType(accountType);
        request.setAccountName(accountName);
        GetUserInfoByAccountResponse response = null;
        
        UserInfo userInfo = null;
        try
        {
            response = (GetUserInfoByAccountResponse)PortalServer.getInstance().sendPostRequest("getUserInfoByAccount",
                request);
            if (null != response && null != response.getUserInfo())
            {
                userInfo = response.getUserInfo();
            }
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine getUserInfoByAccount failed", e);
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine getUserInfoByAccount accountName---->" + accountName + "----accountType----->"
                + accountType);
        }
        
        return userInfo;
    }
    
    /**
     * 根据手机号查询identityID
     * 
     * @param msisdn 手机号
     * @return identityID
     */
    public String getIdentityIDByMsisdn(String msisdn)
    {
        return getIdentityIDByMsisdn(msisdn, DefineConstant.ACCOUNTTYPE_MOBILE);
    }
    
    /**
     * 根据手机号查询identityID
     * 
     * @param msisdn 手机号
     * @param accountType 帐号类型
     * @return identityID
     * 
     */
    public String getIdentityIDByMsisdn(String msisdn, String accountType)
    {
        String identityID = null;
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine getIdentityIDByMsisdn msisdn---->" + msisdn);
        }
        
        GetIdentityIDByAccountRequest request = new GetIdentityIDByAccountRequest();
        request.setAccountName(msisdn);
        request.setAccountType(accountType);
        
        GetIdentityIDByAccountResponse response = null;
        
        try
        {
            response = (GetIdentityIDByAccountResponse)PortalServer.getInstance()
                .sendPostRequest("getIdentityIDByAccount", request);
            if (null != response && StringTools.isNotEmpty(response.getIdentityID()))
            {
                identityID = response.getIdentityID();
            }
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine getUserInfoByAccount failed", e);
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine getIdentityIDByMsisdn msisdn---->" + msisdn);
        }
        
        return identityID;
    }
    
    /**
     * 查询获取MMtoken
     * 
     * @author
     * @param msisdn 用户手机号码
     * @param tokenType token类型
     * @return mmtoken
     * 
     * @throws PortalException PortalException
     */
    public GetMMTokenResponse getMMToken(String msisdn, String tokenType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getMMToken()");
        }
        GetMMTokenRequest request = new GetMMTokenRequest();
        request.setMsisdn(msisdn);
        request.setTokenType(tokenType);
        
        GetMMTokenResponse response =
            (GetMMTokenResponse)PortalServer.getInstance().sendPostRequest("getMMToken", request);
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine.getMMToken");
        }
        return response;
    }
    
    /**
     * 
     * 重置用户密码次数校验
     * 
     * @author tWX190908
     * @param msisdn 手机号
     * @throws PortalException server的异常
     */
    public void validPwdResetTimes(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.validPwdResetTimes()");
        }
        
        try
        {
            ValidPwdResetTimesReq request = new ValidPwdResetTimesReq();
            request.setMsisdn(msisdn);
            PortalServer.getInstance().sendPostRequest("validPwdResetTimes", request);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.validPwdResetTimes error! " + e.getMessage());
            
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.validPwdResetTimes()");
        }
    }
    
    /**
     * 调用SERVER MM鉴权接口
     * 
     * @param msisdn 手机号
     * @param mmToken MM平台token
     * @return 登录令牌
     * @throws PortalException
     */
    public String mmUserAuthenticate(String msisdn, String mmToken)
        throws PortalException
    {
        logger.debug("Enter PortalEngine.mmUserAuthenticate()");
        
        MMUserAuthenticateRequest request = new MMUserAuthenticateRequest();
        request.setMsisdn(msisdn);
        request.setMmToken(mmToken);
        request.setType("APP");
        
        MMUserAuthenticateResponse response =
            (MMUserAuthenticateResponse)PortalServer.getInstance().sendPostRequest("mmUserAuthenticate", request);
        
        logger.debug("Exit PortalEngine.mmUserAuthenticate()");
        return null != response ? response.getLogonToken() : null;
    }
    
    /**
     * 
     * 批量获取图书标签
     * 
     * @author lWX238669
     * @param msisdns 手机号集合
     * @return bookIds 手机和图书ID的映射集合
     * @throws PortalException 调用iserver异常
     */
    public Map<String, String> getBatchBookMark(List<String> msisdns)
        throws PortalException
    {
        Map<String, String> bookIds = new HashMap<String, String>();
        
        if (!StrUtil.isEmpty(msisdns))
        {
            for (String msisdn : msisdns)
            {
                GetBookmarkRequest request = new GetBookmarkRequest();
                request.setMobile(msisdn);
                request.setBookmarkType(DefineConstant.BOOKSHELF_MARK);
                request.setContentType(DefineConstant.CONTENT_BOOK);
                request.setPortalType(DefineConstant.PORTAL_TYPE_TERMINAL);
                request.setStart("1");
                request.setCount("1");
                
                try
                {
                    String bookId = null;
                    GetBookmarkResponse response =
                        (GetBookmarkResponse)PortalServer.getInstance().sendPostRequest("getBookmark", request);
                    
                    if (null != response)
                    {
                        List<BookmarkInfo> bookMarks = response.getBookmarkList();
                        
                        if (ValidatorUtil.isNotEmpty(bookMarks))
                        {
                            bookId = bookMarks.get(0).getBookId();
                        }
                    }
                    
                    bookIds.put(msisdn, bookId);
                }
                catch (PortalException e)
                {
                    if (StrUtil.isEq(e.getExceptionCode(), BOOKMARK_RECORD_NOT_FOUND))
                    {
                        continue;
                    }
                    
                    dLog.error(
                        "PortalEngine.getBatchBookMark() request server failed!ResultCode = " + e.getExceptionCode());
                    throw e;
                }
            }
        }
        
        return bookIds;
    }
    
    /**
     * 
     * 批量获取用户互动信息
     * 
     * @author lWX238669
     * @param msisdnList 阅读号号列表
     * @return 校验后用户信息
     * @throws PortalException 异常信息
     */
    public GetBatchUserSnsResponse getBatchUserSns(List<String> msisdnList)
        throws PortalException
    {
        GetBatchUserSnsRequest request = new GetBatchUserSnsRequest();
        request.setMsisdnList(msisdnList);
        GetBatchUserSnsResponse response = null;
        try
        {
            response = (GetBatchUserSnsResponse)PortalServer.getInstance().sendPostRequest("getBatchUserSns", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine.getBatchUserSns() request server failed!ResultCode = " + e.getExceptionCode());
            throw e;
        }
        return response;
    }
    
    /**
     * 
     * 推广app激活
     * 
     * @author mWX169736
     * @param msisdn 手机号码
     * @param idfa idfa号
     * @param clientVersion 客户端版本号
     * @param mac mac地址
     * @param ip 激活地址
     * @param loginType 登陆类型
     * @paramloginType 登录类型
     * @throws PortalException
     */
    public void spreadAppActive(String msisdn, String idfa, String clientVersion, String mac, String ip,
        String loginType)
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.spreadAppActive()");
        }
        
        if (StrUtil.isEmpty(msisdn))
        {
            logger.error("spreadAppActive msisdn is null,idfa=" + idfa);
            return;
        }
        
        try
        {
            SpreadAppActiveRequest request = new SpreadAppActiveRequest();
            request.setIdfa(idfa);
            request.setClientVersion(clientVersion);
            request.setMac(mac);
            request.setIp(ip);
            request.setMsisdn(msisdn);
            request.setLoginType(loginType);
            PortalServer.getInstance().sendPostRequest("spreadAppActive", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.spreadAppActive error!", e);
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.spreadAppActive()");
        }
    }
    
    /**
     * 
     * @param msisdn
     * @param idfa
     * @param clientVersion
     * @param mac
     * @param ip
     * @param loginType
     * @param f
     * @throws PortalException
     */
    public void spreadAppActive(String msisdn, String idfa, String clientVersion, String mac, String ip,
        String loginType, String imei, String channel, String clientBrand, String imsi, String model, String osVersion,
        String activeType, String ext1, String ext2, String ext3)
        throws PortalException
    {
        
        SpreadAppActiveRequest request = new SpreadAppActiveRequest();
        request.setIdfa(idfa);
        request.setClientVersion(clientVersion);
        request.setMac(mac);
        request.setIp(ip);
        request.setMsisdn(msisdn);
        request.setClientType(model);
        request.setLoginType(loginType);
        request.setImei(imei);
        request.setImsi(imsi);
        request.setChannel(channel);
        request.setClientBrand(clientBrand);
        request.setOsVersion(osVersion);
        if (activeType.equals("0"))
        {
            request.setFlat("1");
        }
        else if (activeType.equals("1"))
        {
            request.setFlat("2");
        }
        request.setExt1(ext1);
        request.setExt2(ext2);
        request.setExt3(ext3);
        
        PortalServer.getInstance().sendPostRequest("spreadAppActive", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.spreadAppActive()");
        }
    }
    
    /**
     * 
     * 保存批次信息
     * 
     * @author lWX238669
     * @param bookId 图书ID
     * @param chapterIdList 章节列表
     * @param width 宽度
     * @param formatType 格式
     * @return SaveDownloadBatchInfoResponse
     * @throws PortalException
     */
    public SaveDownloadBatchInfoResponse saveDownloadBatchInfo(String bookId, List<String> chapterIdList, String width,
        String formatType)
        throws PortalException
    {
        try
        {
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"bookId", bookId}, {"chapterIdList", chapterIdList.toString()},
                    {"width", width}, {"formatType", formatType}};
                logger.debug("Enter PortalEngine.saveDownloadBatchInfo", appInfos);
            }
            
            SaveDownloadBatchInfoRequest req = new SaveDownloadBatchInfoRequest();
            req.setBookId(bookId);
            req.setChapterIdList(chapterIdList);
            req.setWidth(width);
            req.setFormatType(formatType);
            
            SaveDownloadBatchInfoResponse rsp =
                (SaveDownloadBatchInfoResponse)PortalServer.getInstance().sendPostRequest("saveDownloadBatchInfo", req);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"bookId", bookId}, {"chapterIdList", chapterIdList.toString()},
                    {"width", width}, {"formatType", formatType}};
                logger.debug("Enter PortalEngine.batchContentAuthenticate()", appInfos);
            }
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 
     * 获取图书所有章节列表
     * 
     * @author lWX238669
     * @param bookId 图书ID
     * @return GetBookChapterIdsRsp
     * @throws PortalException
     */
    public GetBookChapterIdsRsp getBookChapterIds(String bookId)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"bookId", bookId}};
                logger.debug("Enter PortalEngine.getBookChapterIds", appInfos);
            }
            GetBookInfoRequest req = new GetBookInfoRequest();
            req.setBookId(bookId);
            GetBookChapterIdsRsp rsp =
                (GetBookChapterIdsRsp)PortalServer.getInstance().sendPostRequest("getBookChapterIds", req);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"bookId", bookId}};
                logger.debug("Enter PortalEngine.getBookChapterIds", appInfos);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 
     * 调用实时打包服务器
     * 
     * @author lWX238669
     * @param bookId
     * @return
     * @throws PortalException
     */
    public AddtoPackageResponse addToPackage(String batchId, String bookId, List<String> chapterIDList, String width,
        String format, String isSync)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"batchId", batchId}, {"bookId", bookId}};
                logger.debug("Enter PortalEngine.addtoPackage", appInfos);
            }
            AddtoPackageRequest req = new AddtoPackageRequest();
            
            String chapterIds = listToString(chapterIDList, SEPARATOR);
            
            req.setBatchId(batchId);
            req.setBookId(bookId);
            req.setChapterIds(chapterIds);
            req.setFormatType(format);
            req.setIsSync(isSync);
            req.setWidth(width);
            AddtoPackageResponse rsp =
                (AddtoPackageResponse)PortalServer.getInstance().sendPostRequest("addToPackage", req);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"batchId", batchId}, {"bookId", bookId}};
                logger.debug("Exit PortalEngine.addtoPackage", appInfos);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 
     * 获取批次信息
     * 
     * @author x00228628
     * @param request
     * @return
     * @throws PortalException
     */
    public GetDownloadBatchInfoResponse getDownloadBatchInfo(GetDownloadBatchInfoRequest request)
        throws PortalException
    {
        GetDownloadBatchInfoResponse batchInfo = new GetDownloadBatchInfoResponse();
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("getDownloadBatchInfo from iserver. getDownloadBatchInfoRequest = " + request);
            }
            batchInfo = (GetDownloadBatchInfoResponse)PortalServer.getInstance().sendPostRequest("getDownloadBatchInfo",
                request);
            if (logger.isDebugEnable())
            {
                logger.debug("getDownloadBatchInfo from iserver. batchInfo = " + batchInfo);
            }
        }
        catch (PortalException e)
        {
            logger.error("getDownloadBatchInfo got exception");
        }
        return batchInfo;
    }
    
    /**
     * 
     * 第三方注册
     * 
     * @author lWX238669
     * @param request 请求对象
     * @return 响应
     * @throws PortalException
     */
    public RegUserByThirdPartyResponse regUserByThirdParty(RegUserByThirdPartyRequest request)
        throws PortalException
    {
        
        try
        {
            if (logger.isDebugEnable())
            {
                logger.debug("Enter PortalEngine.regUserByThirdParty" + request);
            }
            
            RegUserByThirdPartyResponse rsp =
                (RegUserByThirdPartyResponse)PortalServer.getInstance().sendPostRequest("regUserByThirdParty", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.regUserByThirdParty" + rsp);
            }
            
            return rsp;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 将字符串列表转换成由字符拼接的字符串
     * 
     * @param list 要转换的字符串列表
     * @param separator 分隔符
     * @return 转换后的字符串
     */
    public String listToString(List<String> list, String separator)
    {
        return org.apache.commons.lang.StringUtils.join(list.toArray(), separator);
    }
    
    /**
     * 
     * 随机账号绑定
     * 
     * @author sWX237456
     * @param identityId 随机账号
     * @param accountName 绑定账号
     * @param accountType 绑定账号类型
     * @param verifyCode 验证码
     * @exception PortalException
     * @return
     */
    public BindAccountByTouristRsp bindAccountByTourist(String identityId, String accountName, String accountType,
        String verifyCode)
        throws PortalException
    {
        
        BindAccountByTouristReq request = new BindAccountByTouristReq();
        request.setAccountName(accountName);
        request.setAccountType(accountType);
        request.setIdentityId(identityId);
        request.setVerifyCode(verifyCode);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.bindAccountByTourist() request=" + request);
        }
        
        try
        {
            
            BindAccountByTouristRsp response =
                (BindAccountByTouristRsp)PortalServer.getInstance().sendPostRequest("bindAccountByTourist", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.bindAccountByTourist() response=" + response);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 获取章节文件信息 tangfei 2016-04-20
     * 
     * @param bookId 书籍ID
     * @param itemType 书籍类型
     * @param chapterIds 章节ID列表
     */
    public List<ChapterFile> getBatchChapterFile(String bookId, String itemType, String[] chapterIds)
    {
        
        if (Util.isEmpty(chapterIds))
        {
            logger.error("chapterIds is null");
            return null;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] info =
                {{"bookId", bookId}, {"itemType", itemType}, {"chapterIds", Arrays.deepToString(chapterIds)}};
            logger.debug("Enter getBatchChapterFile()", info);
        }
        
        GetBatchAllFormatChapterFileRequest request = new GetBatchAllFormatChapterFileRequest();
        request.setBookId(bookId);
        request.setBookItemType(itemType);
        request.setChapterIdLst(Arrays.asList(chapterIds));
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        try
        {
            Object obj = PortalServer.getInstance().sendPostRequest("getBatchAllFormatChapterFile", request);
            if ((null == obj) || !(obj instanceof GetBatchAllFormatChapterFileResponse))
            {
                logger.error("Response type is unexpected");
                return null;
            }
            GetBatchAllFormatChapterFileResponse response = (GetBatchAllFormatChapterFileResponse)obj;
            
            if (logger.isDebugEnable())
            {
                String[][] info =
                    {{"bookId", bookId}, {"itemType", itemType}, {"chapterIds", Arrays.deepToString(chapterIds)}};
                logger.debug("Exit getBatchChapterFile()", info);
            }
            return response.getChapterFileLst();
        }
        catch (PortalException e)
        {
            logger.warn("getBatchChapterFile failure", e);
            return null;
        }
    }
    
    /**
     * 获取章节文件信息 tangfei 2016-04-20
     * 
     * @param bookId 书籍ID
     * @param contentType 书籍类型
     * @param chapterIds 章节ID列表
     */
    public List<ChapterFile> getChapterFile(String bookId, String contentType, String chapterId)
        throws PortalException
    {
        
        if (Util.isEmpty(chapterId))
        {
            logger.error("chapterIds is null");
            return null;
        }
        
        if (logger.isDebugEnable())
        {
            String[][] info = {{"bookId", bookId}, {"contentType", contentType}, {"chapterId", chapterId}};
            logger.debug("Enter getChapterFile()", info);
        }
        
        GetBatchAllFormatChapterFileRequest request = new GetBatchAllFormatChapterFileRequest();
        request.setBookId(bookId);
        request.setBookItemType(contentType);
        request.setChapterIdLst(Arrays.asList(chapterId));
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        try
        {
            Object obj = PortalServer.getInstance().sendPostRequest("getBatchAllFormatChapterFile", request);
            if ((null == obj) || !(obj instanceof GetBatchAllFormatChapterFileResponse))
            {
                logger.error("Response type is unexpected");
                return null;
            }
            GetBatchAllFormatChapterFileResponse response = (GetBatchAllFormatChapterFileResponse)obj;
            
            if (logger.isDebugEnable())
            {
                String[][] info = {{"bookId", bookId}, {"contentType", contentType}, {"chapterId", chapterId}};
                logger.debug("Exit getChapterFile()", info);
            }
            return response.getChapterFileLst();
        }
        catch (PortalException e)
        {
            logger.error("getBatchChapterFile failure", e);
            throw e;
        }
    }
    
    /**
     * 根据书籍ID、书籍类型、章节ID列表批量获取指定章节列表对应的章节信息
     * 
     * @param contentId 书籍ID
     * @param contentType 书籍类型
     * @param chapterIdLst 章节ID列表
     * @param formatType
     * 
     * @return [参数说明]
     * 
     * @return Map<String,List<ChapterFileInfo>> [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public Map<String, Map<String, List<ChapterFileInfo>>> getBatchAllFormatChapterFileMap(String contentId,
        String contentType, List<String> chapterIdLst)
    {
        if (Util.isEmpty(chapterIdLst))
        {
            logger.error("chapterIdLst is null");
            return null;
        }
        Map<String, Map<String, List<ChapterFileInfo>>> map = new HashMap<String, Map<String, List<ChapterFileInfo>>>();
        
        if (logger.isDebugEnable())
        {
            // 只有记录日志才定义日志数组对象(提高性能)
            String[][] enterAppInfo = {{"bookId", contentId}, {"contentType", contentType},
                {"chapterIdLst", Arrays.deepToString(chapterIdLst.toArray(new String[0]))}};
            
            logger.debug("Enter getBatchAllFormatChapterFileMap()", enterAppInfo);
        }
        
        Map<String, List<ChapterFileInfo>> chapterMap = null;
        Map<String, List<ChapterFileInfo>> newChapterMap = null;
        
        try
        {
            GetBatchAllFormatChapterFileRequest request = new GetBatchAllFormatChapterFileRequest();
            request.setBookId(contentId);
            request.setBookItemType(contentType);
            request.setChapterIdLst(chapterIdLst);
            request.setPortalType(SystemConstants.PORTAL_TYPE);
            Object obj = PortalServer.getInstance().sendPostRequest("getBatchAllFormatChapterFile", request);
            if ((null == obj) || !(obj instanceof GetBatchAllFormatChapterFileResponse))
            {
                logger.error("Response type is unexpected");
                return null;
            }
            
            GetBatchAllFormatChapterFileResponse response = (GetBatchAllFormatChapterFileResponse)obj;
            List<ChapterFile> chapterFileLst = response.getChapterFileLst();
            if (Util.isEmpty(chapterFileLst))
            {
                logger.warn("getBatchAllFormatChapterFileList failure");
                return null;
            }
            
            chapterMap = new HashMap<String, List<ChapterFileInfo>>();
            newChapterMap = new HashMap<String, List<ChapterFileInfo>>();
            for (ChapterFile chapterFile : chapterFileLst)
            {
                if (!Util.isEmpty(chapterFile))
                {
                    chapterMap.put(chapterFile.getChapterId(), chapterFile.getChapterFileInfoLst());
                    newChapterMap.put(chapterFile.getChapterId(), chapterFile.getNewChapterFileInfoLst());
                }
            }
            map.put("old", chapterMap);
            map.put("new", newChapterMap);
            
        }
        catch (PortalException e)
        {
            // IRD-32799 现网日志优化
            logger.warn("getBatchAllFormatChapterFileList failure", e);
            return null;
        }
        
        if (logger.isDebugEnable())
        {
            // 只有记录日志才定义日志数组对象(提高性能)
            String[][] exitAppInfo = {{"bookId", contentId}, {"contentType", contentType},
                {"chapterIdLst", Arrays.deepToString(chapterIdLst.toArray(new String[0]))}};
            
            logger.debug("Exit getBatchAllFormatChapterFileMap()", exitAppInfo);
        }
        
        return map;
    }
    
    /**
     * 
     * 批量章节鉴权接口
     * 
     * @author weiqj
     * @param mobile 手机标识
     * @param bookId 书籍id
     * @param chapterIdList 章节id,按章鉴权是使用，非按章鉴权时不填
     * @param accessType 门户类型(1:WAP,2:WWW,3:移动电子书,4:手机客户端,5:客服中心,6:BOSS,7:短信平台,8:Mobile Market,9:实体卡,10:平台赠送,11:平板电脑)
     * @param loginType 登录方式(1:CMWAP,2:短信直连,3:非CMWAP登录，特指用户名密码。默认为1)
     * @param sourceType 运营频道类型 1:书籍运营频道 2:漫画运营频道 3:杂志运营频道 4:互动运营频道 5:听书运营频道 14:uues 书籍 15:行业企业书屋 16:行业移动学习
     * @param isOnline 是否在线阅读：0表示不是在线阅读即不会适配到限时免费，10006表示在线阅读即会适配到限时免费。不传默认是10006
     * @param currentChapterID 当前章节id用来处理server，话单为空问题
     * @return List [返回类型说明]
     * @throws PortalException
     */
    public BatchChaptersAuthenticateResponse batchChaptersAuthenticate(String mobile, String bookId,
        List<String> chapterIdList, String accessType, String loginType, String sourceType, String isOnline,
        String currentChapterID)
    {
        
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.getBatchChaptersAuthenticateList()");
        }
        
        // 手机标识、书籍id、门户类型不能为空不能为空
        if (StrUtil.isEmpty(mobile) || StrUtil.isEmpty(bookId) || StrUtil.isEmpty(accessType))
        {
            logger.error("batchChaptersAuthenticate mobile=" + mobile + "bookId" + bookId + "accessType" + accessType);
            return null;
        }
        // 章节id不能为空
        if (ValidatorUtil.isNull(chapterIdList) || chapterIdList.size() == 0)
        {
            logger.error("batchChaptersAuthenticate chapterIdList is null,chapterIdList=" + chapterIdList);
            return null;
        }
        
        // 内容鉴权结果
        BatchChaptersAuthenticateResponse response = null;
        List<BatchChaptersAuthenticateResult> list = null;
        try
        {
            
            BatchChaptersAuthenticateRequest request = new BatchChaptersAuthenticateRequest();
            request.setMobile(mobile);
            request.setBookId(bookId);
            request.setChapterIdList(chapterIdList);
            request.setAccessType(accessType);
            request.setLoginType(loginType);
            request.setSourceType(sourceType);
            request.setIsOnline(isOnline);
            request.setChannelCode(ThreadLocalContext.getChannelCodeIntoContext());
            request.setCurrentChapterID(currentChapterID);
            
            // 发送请求，调aServer【batchChaptersAuthenticate 】接口
            response = (BatchChaptersAuthenticateResponse)PortalServer.getInstance()
                .sendPostRequest("batchChaptersAuthenticate", request);
            
            // 得到 内容鉴权结果,因为server不反回24550错误吗，在此处对结果码进行转换，将24500且下架的图书返回码设置为2045（直接转换成cportal的错误码类型）
            list = response.getBatchChaptersAuthenticateList();
            if (list != null)
            {
                for (int i = 0; i < list.size(); i++)
                {
                    BatchChaptersAuthenticateResult batchChaptersAuthenticateResult = list.get(i);
                    if (batchChaptersAuthenticateResult == null)
                    {
                        continue;
                    }
                    BookItem bookItem = PortalCacheManager.getBookInfo(bookId);
                    if (bookItem != null && TerminalConstants.BOOK_STAT_OFF_LOADING.equals(bookItem.getStatus()))
                    {
                        if (batchChaptersAuthenticateResult.getResultCode() == TerminalCodes.CONTENT_AUTHENTICATE_FAIL)
                        {
                            batchChaptersAuthenticateResult.setResultCode(TerminalCodes.BOOK_IN_AUDITING);
                        }
                        if (batchChaptersAuthenticateResult.getResultCode() == ResultCode.SUCCESS)
                        {
                            String[] listType = {"1", "2", "7", "16", "17", "19", "20"};
                            boolean bool =
                                StrUtil.containSubStr(batchChaptersAuthenticateResult.getAuthenticatePtype(), listType);
                            if (!bool)
                            {
                                batchChaptersAuthenticateResult.setResultCode(TerminalCodes.BOOK_IN_AUDITING);
                            }
                        }
                    }
                    
                }
            }
            
            // 将批量鉴权结果放置到ThreadLocal中
            ThreadLocalContext.putChaptersAuthenticateResult(list);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.batchChaptersAuthenticate()");
                
            }
        }
        catch (PortalException e)
        {
            logger.error(
                "batchChaptersAuthenticate error! mobile=" + mobile + "bookId" + bookId + "accessType" + accessType, e);
        }
        return response;
    }
    
    /**
     * 
     * TODO 支付宝微支付解绑接口
     * 
     * @author patrick
     * @param msisdn
     * @param isForce
     * @return
     * @throws PortalException
     */
    public UnsignAliwpayResponse alipayAccountUnbind(String msisdn, String isForce)
        throws PortalException
    {
        try
        {
            // 构造请求报文xml
            UnsignAliwpayRequest request = new UnsignAliwpayRequest();
            request.setMsisdn(msisdn);
            request.setIsForce(isForce);
            UnsignAliwpayResponse resp =
                (UnsignAliwpayResponse)PortalServer.getInstance().sendPostRequest("unsignAlipayAgreement", request);
            
            return resp;
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 获取客户端是否允许听书预加载
     * 
     * @author wzh 2015-09-30
     * @param clientVersion
     * @return ClientAllowPrestrainResponse
     * @throws PortalException
     */
    public ClientAllowPrestrainResponse clientAllowPrestrain(String clientVersion)
        throws PortalException
    {
        try
        {
            ClientAllowPrestrainRequest request = new ClientAllowPrestrainRequest();
            ClientAllowPrestrainResponse response = new ClientAllowPrestrainResponse();
            request.setClientVersion(clientVersion);
            response = (ClientAllowPrestrainResponse)PortalServer.getInstance().sendPostRequest("clientAllowPrestrain",
                request);
            
            return response;
            
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
        
    }
    
    /**
     * 
     * miguToken鉴权
     * 
     * @author shixianpei
     * @param miguToken
     * @return MiguTokenAuthenticateResponse
     * @throws PortalException
     */
    public MiguTokenAuthenticateResponse miguTokenAuthenticate(String miguToken, String identityId, String sourceIp,
        String remoteIp)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos =
                {{"miguToken", miguToken}, {"identityId", identityId}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}};
            logger.debug("Enter PortalEngine.miguTokenAuthenticate()", appInfos);
        }
        MiguTokenAuthenticateRequest request = new MiguTokenAuthenticateRequest();
        request.setToken(miguToken);
        MiguTokenAuthenticateResponse response = null;
        try
        {
            // 发送http请求
            response = (MiguTokenAuthenticateResponse)PortalServer.getInstance()
                .sendPostRequest("miguTokenAuthenticate", request);
        }
        catch (PortalException e)
        {
            logger.error("miguToken authenticate error;", e);
            throw e;
        }
        return response;
    }
    
    /**
     * service端校验弱密码
     * 
     * @author yangrui
     * @param passWord
     * @return FeeblePasswordResponse
     */
    public FeeblePasswordResponse checkWeakPassWord(String passWord)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.checkWeakPassWord(), passWord = " + passWord);
        }
        FeeblePasswordRequest request = new FeeblePasswordRequest();
        request.setPassword(passWord);
        FeeblePasswordResponse response = null;
        try
        {
            response =
                (FeeblePasswordResponse)PortalServer.getInstance().sendPostRequest("verifyFeeblePassword", request);
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine checkWeakPassWord is error", e);
            throw e;
        }
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.checkWeakPassWord()");
        }
        return response;
    }
    
    /**
     * 根据订单号查询订单信息
     * 
     * @author wzh 2016-01-04
     * @param orderId
     * @param identifyid
     * @return QueryOrderRsp
     * @throws PortalException
     */
    public QueryOrderRsp getqueryOrder(String orderId, String identifyid)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter getqueryOrder ");
        }
        try
        {
            QueryOrderReq request = new QueryOrderReq();
            QueryOrderRsp response = null;
            request.setOrderId(orderId);
            request.setMsisdn(identifyid);
            // 根据订单号查询订单信息
            response = (QueryOrderRsp)PortalServer.getInstance().sendPostRequest("queryOrder", request);
            if (logger.isDebugEnable())
            {
                logger.debug("Exit getqueryOrder QueryOrderInfoResponse is " + response.toString());
            }
            return response;
        }
        catch (PortalException e)
        {
            logger.error(e.toString());
            throw e;
        }
    }
    
    /**
     * 提供批量删除笔记 TODO 添加方法注释
     * 
     * @author admini
     * @param mobile
     * @param contentId
     * @param chapterId
     * @param noteidList
     * @throws PortalException
     */
    public void batchDeleteNotes(String mobile, String contentId, String chapterId, List<String> noteidList)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"mobile", mobile}, {"contentId", contentId}, {"chapterId", chapterId}};
                logger.debug("Enter PortalEngine.batchDeleteNotes()", appInfo);
            }
            
            DeleteNotesRequest request = new DeleteNotesRequest();
            request.setContentId(contentId);
            request.setChaperId(chapterId);
            request.setMobile(mobile);
            request.setNoteidList(noteidList);
            PortalServer.getInstance().sendPostRequest("batchDeleteNotes", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"mobile", mobile}, {"contentId", contentId}, {"chapterId", chapterId}};
                logger.debug("Enter PortalEngine.batchDeleteNotes()", appInfo);
            }
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine batchDeleteNotes is error", e);
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期图书按次订购
     * 
     * @author wzh
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销产品ID
     * @param bookID 图书ID
     * @param nodeID 目录ID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public SdkOrderObjResponse subscribeBookByTimesObj(String msisdn, String productID, String promotionID,
        String bookID, String nodeID, String channelCode, String clientVersion, String sourceIp, String clientDiscount,
        String sLoginType, String bearType, String sourceType, boolean isCheckMem, String supportPayType, String idfa,
        String transId, FeeElement feeElement, String continuousToken)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeBookByTimesObj()", appInfo);
            }
            // 新增返回的sdkObjResponse
            SdkOrderObjResponse sdkOrderObjResp = new SdkOrderObjResponse();
            
            OrderObjResponse orderObjResp = new OrderObjResponse();
            // 完成订购
            orderObjResp = this.subscribeByTimesObj("",
                msisdn,
                productID,
                promotionID,
                bookID,
                "",
                BookContants.ORDER_BY_TIMES_TYPE_BOOK,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                isCheckMem,
                supportPayType,
                idfa,
                transId,
                feeElement,
                continuousToken);
            
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeBookByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeBookByTimesObj()", appInfo);
            }
            
            sdkOrderObjResp.setResultCode(TerminalCodes.SUCCESS);
            sdkOrderObjResp.setPaymentId(orderObjResp.getPaymentId());
            String payAmount = "0";
            if (null != orderObjResp.getPayChannels())
            {
                List<PayChannelInfo> payChannelList = orderObjResp.getPayChannels();
                if (null != payChannelList)
                {
                    for (PayChannelInfo payChannelInfo : payChannelList)
                    {
                        // 205 阳光计划二期支付方式 215 阳光计划二期绑定账号支付方式 204 咪咕一级支付SDK支付
                        if (TerminalConstants.MIGU_BILLS_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_SDK_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_BINDPHONE_PAYTYPE.equals(payChannelInfo.getChannelType()))
                        {
                            payAmount = payChannelInfo.getPayAmount();
                        }
                    }
                }
            }
            sdkOrderObjResp.setPayAmount(payAmount);
            sdkOrderObjResp.setContinuousToken(orderObjResp.getContinuousToken());
            
            return sdkOrderObjResp;
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期单次订购所有章节
     * 
     * @author wzh
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param chapterID
     * @param nodeID
     * @param channelCode
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public SdkOrderObjResponse subscribeAllChapterObj(String msisdn, String productID, String promotionID,
        String bookID, String nodeID, String channelCode, String chapterId, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, String supportPayType,
        String idfa, String transId, FeeElement feeElement, String continuousToken)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeAllChapterObj()", appInfo);
            }
            // 新增返回的sdkObjResponse
            SdkOrderObjResponse sdkOrderObjResp = new SdkOrderObjResponse();
            
            OrderObjResponse orderObjResp = new OrderObjResponse();
            // 完成订购
            orderObjResp = this.subscribeByTimesObj("",
                msisdn,
                productID,
                promotionID,
                bookID,
                chapterId,
                BookContants.ORDER_BY_TIMES_TYPE_ALLCHAPTER,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                false,
                supportPayType,
                idfa,
                transId,
                feeElement,
                continuousToken);
            
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeAllChapterObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeAllChapterObj()", appInfo);
            }
            
            sdkOrderObjResp.setResultCode(TerminalCodes.SUCCESS);
            sdkOrderObjResp.setPaymentId(orderObjResp.getPaymentId());
            String payAmount = "0";
            if (null != orderObjResp.getPayChannels())
            {
                List<PayChannelInfo> payChannelList = orderObjResp.getPayChannels();
                if (null != payChannelList)
                {
                    for (PayChannelInfo payChannelInfo : payChannelList)
                    {
                        // 205 阳光计划二期支付方式 215 阳光计划二期绑定账号支付方式 204 咪咕一级支付SDK支付
                        if (TerminalConstants.MIGU_BILLS_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_SDK_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_BINDPHONE_PAYTYPE.equals(payChannelInfo.getChannelType()))
                        {
                            payAmount = payChannelInfo.getPayAmount();
                        }
                    }
                }
            }
            sdkOrderObjResp.setPayAmount(payAmount);
            sdkOrderObjResp.setContinuousToken(orderObjResp.getContinuousToken());
            
            return sdkOrderObjResp;
            
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期单次按章订购
     * 
     * @author wzh
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param chapterID
     * @param nodeID
     * @param channelCode
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public SdkOrderObjResponse subscribeChapterByTimesObj(String isFirstExpenses, String msisdn, String productID,
        String promotionID, String bookID, String chapterID, String nodeID, String channelCode, String clientVersion,
        String sourceIp, String clientDiscount, String sLoginType, String bearType, String sourceType,
        boolean isCheckMem, String supportPayType, String idfa, String transId, FeeElement feeElement,
        String continuousToken)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"chapterID", chapterID}, {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeChapterByTimesObj()", appInfo);
            }
            
            // 新增返回的sdkObjResponse
            SdkOrderObjResponse sdkOrderObjResp = new SdkOrderObjResponse();
            
            OrderObjResponse orderObjResp = new OrderObjResponse();
            // 完成订购
            orderObjResp = this.subscribeByTimesObj(isFirstExpenses,
                msisdn,
                productID,
                promotionID,
                bookID,
                chapterID,
                BookContants.ORDER_BY_TIMES_TYPE_CHAPTER,
                nodeID,
                channelCode,
                "",
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                isCheckMem,
                supportPayType,
                idfa,
                transId,
                feeElement,
                continuousToken);
            
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeChapterByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"chapterID", chapterID}, {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeChapterByTimesObj()", appInfo);
            }
            
            sdkOrderObjResp.setResultCode(TerminalCodes.SUCCESS);
            sdkOrderObjResp.setPaymentId(orderObjResp.getPaymentId());
            String payAmount = "0";
            if (null != orderObjResp.getPayChannels())
            {
                List<PayChannelInfo> payChannelList = orderObjResp.getPayChannels();
                if (null != payChannelList)
                {
                    for (PayChannelInfo payChannelInfo : payChannelList)
                    {
                        // 205 阳光计划二期支付方式 215 阳光计划二期绑定账号支付方式 204 咪咕一级支付SDK支付
                        if (TerminalConstants.MIGU_BILLS_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_SDK_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_BINDPHONE_PAYTYPE.equals(payChannelInfo.getChannelType()))
                        {
                            payAmount = payChannelInfo.getPayAmount();
                        }
                    }
                }
            }
            sdkOrderObjResp.setPayAmount(payAmount);
            sdkOrderObjResp.setContinuousToken(orderObjResp.getContinuousToken());
            
            return sdkOrderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期图书按分册订购<一句话功能简述>
     * 
     * @author wzh
     * @param msisdn
     * @param productID
     * @param promotionID
     * @param bookID
     * @param nodeID
     * @param channelCode
     * @param fasciculeID
     * @throws PortalException [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public SdkOrderObjResponse subscribeFasciculeByTimesObj(String msisdn, String productID, String promotionID,
        String bookID, String nodeID, String channelCode, String fasciculeID, String clientVersion, String sourceIp,
        String clientDiscount, String sLoginType, String bearType, String sourceType, String supportPayType,
        String idfa, String transId, FeeElement feeElement, String continuousToken)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeFasciculeByTimesObj()", appInfo);
            }
            
            // 新增返回的sdkObjResponse
            SdkOrderObjResponse sdkOrderObjResp = new SdkOrderObjResponse();
            
            OrderObjResponse orderObjResp = new OrderObjResponse();
            
            // 完成订购
            orderObjResp = this.subscribeByTimesObj("",
                msisdn,
                productID,
                promotionID,
                bookID,
                "",
                Types.CONTENT_TYPE_FASCICULE,
                nodeID,
                channelCode,
                fasciculeID,
                clientVersion,
                sourceIp,
                clientDiscount,
                sLoginType,
                bearType,
                sourceType,
                false,
                supportPayType,
                idfa,
                transId,
                feeElement,
                continuousToken);
            
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeFasciculeByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeFasciculeByTimesObj()", appInfo);
            }
            
            sdkOrderObjResp.setResultCode(TerminalCodes.SUCCESS);
            sdkOrderObjResp.setPaymentId(orderObjResp.getPaymentId());
            String payAmount = "0";
            if (null != orderObjResp.getPayChannels())
            {
                List<PayChannelInfo> payChannelList = orderObjResp.getPayChannels();
                if (null != payChannelList)
                {
                    for (PayChannelInfo payChannelInfo : payChannelList)
                    {
                        // 205 阳光计划二期支付方式 215 阳光计划二期绑定账号支付方式 204 咪咕一级支付SDK支付
                        if (TerminalConstants.MIGU_BILLS_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_SDK_PAYTYPE.equals(payChannelInfo.getChannelType())
                            || TerminalConstants.SUN_BINDPHONE_PAYTYPE.equals(payChannelInfo.getChannelType()))
                        {
                            payAmount = payChannelInfo.getPayAmount();
                        }
                    }
                }
            }
            sdkOrderObjResp.setPayAmount(payAmount);
            sdkOrderObjResp.setContinuousToken(orderObjResp.getContinuousToken());
            
            return sdkOrderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期按章批量订购<一句话功能简述>
     * 
     * @author wzh
     * @param msisdn
     * @param productId
     * @param promotionId
     * @param bookId
     * @param chapterIdList
     * @param accessType
     * @param catalogId
     * @param channelCode
     * @param isUseEquity 是否使用权益订购
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public OrderObjResponse batchSubscribeChapterByTimesObj(String msisdn, String productId, String promotionId,
        String bookId, List<String> chapterIdList, String catalogId, String channelCode, String clientVersion,
        String sourceIp, String clientDiscount, String sLoginType, String bearType, String isUseEquity,
        String calculatePriceType, FeeElement feeElement, String supportPayType, String idfa, String transId)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productId}, {"bookID", bookId},
                    {"chapterIDs", chapterIdList.toString()}, {"catalogId", catalogId}};
                logger.debug("Enter PortalEngine.batchSubscribeChapterByTimesObj()", appInfo);
            }
            
            BatchOrderPurchaseRequest request = new BatchOrderPurchaseRequest();
            request.setMobile(msisdn);
            request.setProductId(productId);
            request.setPromotionId(promotionId);
            request.setBookId(bookId);
            request.setChapterIdList(chapterIdList);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setCatalogId(catalogId);
            request.setChannelCode(channelCode);
            request.setUaName(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            isUseEquity = StrUtil.isEq(isUseEquity, Types.FALSE) ? isUseEquity : Types.TRUE;
            request.setIsUseEquity(isUseEquity);
            request.setCalculatePriceType(calculatePriceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(transId);
            request.setFeeElement(feeElement);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 start 2015-08-27
            if (null != feeElement)
            {
                // 请求中多置入批价信息
                request.setFeeElement(feeElement);
            }
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 end 2015-08-27
            
            OrderObjResponse orderObjResp =
                (OrderObjResponse)PortalServer.getInstance().sendPostRequest("batchOrderObj", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("batchSubscribeChapterByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productId}, {"bookID", bookId},
                    {"chapterIDs", chapterIdList.toString()}, {"catalogId", catalogId}};
                logger.debug("Exit PortalEngine.batchSubscribeChapterByTimesObj()", appInfo);
            }
            
            return orderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 一级支付系统与咪咕币对接 和阳光计划二期按次订购接口，可以完成按次订购图书和按次订购章节
     * 
     * @author wzh
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销ID
     * @param bookID 图书ID
     * @param chapterID 章节ID
     * @param orderType 订购类型 0 订购图书； 1 订购章节
     * @param nodeID 目录ID，可以是真实目录，也可以是虚拟目录，比如搜索
     * 
     * @return void [返回类型说明]
     * @throws PortalException
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public OrderObjResponse subscribeByTimesObj(String isFirstExpenses, String msisdn, String productID,
        String promotionID, String bookID, String chapterID, String orderType, String nodeID, String channelCode,
        String fasciculeID, String clientVersion, String sourceIp, String clientDiscount, String sLoginType,
        String bearType, String sourceType, boolean isCheckMem, String supportPayType, String idfa,
        String portalOrderId, FeeElement feeElement, String continuousToken)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeByTimesObj()", appInfo);
            }
            
            PurchaseRequest request = new PurchaseRequest();
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setBookId(bookID);
            request.setCatalogId(nodeID);
            request.setChapterId(chapterID);
            request.setContentType(orderType);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setPromotionId(promotionID);
            request.setChannelCode(channelCode);
            request.setFasciculeId(fasciculeID);
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setSourceType(sourceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(portalOrderId);
            request.setContinuousToken(continuousToken);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            
            // 支付方式为咪咕币且首次弹出资费页
            if (supportPayType.contains(TerminalConstants.MIGU_CURRENCY_PAYTYPE))
            {
                if (StrUtil.isEq(TerminalConstants.IS_FIRST_EXPENSES_OPEN, isFirstExpenses))
                {
                    request.setIsContinousPay(TerminalConstants.IS_NOT_CONTINOUS_PAY);
                }
                else
                {
                    request.setIsContinousPay(TerminalConstants.IS_CONTINOUS_PAY);
                }
                
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            if (StrUtil.matchs(orderType, BookContants.ORDER_BY_TIMES_TYPE_BOOK) && isCheckMem)
            {
                String useEquity = "";
                String isDownloadValid = DownloadEquityMemCache.getInstance().getDownloadEquity(msisdn, bookID);
                if (StrUtil.isEq(isDownloadValid, TerminalConstants.PURCHASE_PAY))
                {
                    useEquity = TerminalConstants.PURCHASE_PAY;
                }
                request.setUseEquity(useEquity);
            }
            
            OrderObjResponse orderObjResp =
                (OrderObjResponse)PortalServer.getInstance().sendPostRequest("purchaseObj", request);
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeByTimesObj()", appInfo);
            }
            return orderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 
     * 咪咕单点登录获取凭证
     * 
     * @author gyl
     * @param request
     * @param identityId *
     * @return
     * @throws PortalException
     */
    public String getMiguToken(HttpServletRequest request, String identityId)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getMiguToken() ******");
        }
        
        // 来源ip
        String sourceIp = IReadTools.getLocalAddress();
        
        // 远程ip
        String remoteIp = IReadTools.getWapWGIP(request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getMiguToken(), params = ",
                new String[][] {{"identityId", identityId}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
        }
        
        UserInfo userInfo = SessionTools.getUserInfo(request, identityId);
        String loginType = IReadTools.getLoginType(request);
        
        String miguToken = "";
        
        // 获取不到用户信息，返回miguToken为空
        if (Util.isEmpty(userInfo))
        {
            if (null == identityId || "".equals(identityId))
            {
                logger.error("PortalEngine.getMiguToken() warn: identityId is null");
                return miguToken;
            }
            // 如果session取出来的userinfo为空，则调接口获取并保存到会话中
            try
            {
                userInfo = PortalEngine.getInstance().getUserInfo(identityId);
                SessionTools.setUserInfo(request, userInfo);
            }
            catch (PortalException e)
            {
                logger.error("PortalEngine.getMiguToken() warn:getUserInfo is failed",
                    new String[][] {{"identityId", identityId}},
                    e);
            }
            
            if (Util.isEmpty(userInfo))
            {
                if (logger.isDebugEnable())
                {
                    logger.debug("PortalEngine.getMiguToken() userInfo is null");
                }
                return miguToken;
            }
        }
        
        String uSessionId = userInfo.getuSessionId();
        if (StrUtil.isEmpty(uSessionId))
        {
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getMiguToken() userInfo.uSessionId is null");
            }
            
            String accountName = userInfo.getAccountName();
            
            // uSessionId为空时，若loginType不为1,2,3,6或accountName不是手机号(因为miguImplicitAuth接口不支持非手机号码,无法通过邮箱号码取到uSessionId,需求方同意过滤掉非手机号)，返回miguToken为空，
            if ((StrUtil.isEq(IReadTools.CMWAP_LOGIN, loginType) || StrUtil.isEq(IReadTools.SMS_LOGIN, loginType)
                || StrUtil.isEq(IReadTools.USERNAME_LOGIN, loginType)
                || StrUtil.isEq(IReadTools.MIGUSDK_LOGIN, loginType)) && IReadTools.isMobile(accountName))
            {
                String passId = userInfo.getPassId();
                String miguImplicitSwitch =
                    PortalCacheManager.getConfigValue(PtlParameterConstants.PUB_MIGU_IMPLICIT_AUTH, Types.FALSE);
                
                // 是否打开隐式登录
                String openMiguImplicitLoginSwitch =
                    PortalCacheManager.getConfigValue(PtlParameterConstants.PUB_OPEN_MIGU_IMPLICIT_LOGIN, Types.FALSE);
                
                if (StrUtil.isNotEq(openMiguImplicitLoginSwitch, Types.TRUE) && StrUtil.isEmpty(passId))
                {
                    if (logger.isDebugEnable())
                    {
                        logger.debug(
                            "PortalEngine.getMiguToken() openMiguImplicitLoginSwitch open and userInfo.passId is null");
                    }
                    
                    return miguToken;
                }
                
                // 即使loginType是1,2,3,6且accountName是手机号，若开关关闭，返回miguToken为空
                if (StrUtil.isEmpty(passId) && StrUtil.isNotEq(miguImplicitSwitch, Types.TRUE))
                {
                    if (logger.isDebugEnable())
                    {
                        logger
                            .debug("PortalEngine.getMiguToken() userInfo.passId is null and miguImplicitSwitch closed");
                    }
                    
                    return miguToken;
                }
                
                // 根据accountName调server新增接口miguImplicitAuth获取uSessionId
                MiguImplicitAuthResponse rsp = miguImplicitAuth(accountName, sourceIp, remoteIp);
                
                if (Util.isNotEmpty(rsp))
                {
                    uSessionId = StrUtil.nvl(rsp.getUsessionId());
                    
                    // 非咪咕用户注册后，更新session中userInfo
                    userInfo.setuSessionId(uSessionId);
                    userInfo.setPassId(StrUtil.nvl(rsp.getPassId()));
                    SessionTools.setUserInfo(request, userInfo);
                    
                    if (logger.isDebugEnable())
                    {
                        logger.debug("PortalEngine.getMiguToken() after update userInfo : " + userInfo);
                    }
                }
                
            }
        }
        
        // 若server接口miguImplicitAuth没查到uSessionId，返回miguToken为空
        if (StrUtil.isEmpty(uSessionId))
        {
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getMiguToken() uSessionId is still null");
            }
            
            return miguToken;
        }
        
        try
        {
            // 最终还是通过uSessionId调用getMiguToken获取miguToken
            GetMiguTokenReq getMiguTokenReq = new GetMiguTokenReq();
            getMiguTokenReq.setIdentityid(identityId);
            getMiguTokenReq.setuSessionid(uSessionId);
            GetMiguTokenResp getMiguTokenResp =
                (GetMiguTokenResp)PortalServer.getInstance().sendPostRequest("getMiguToken", getMiguTokenReq);
            
            if (Util.isNotEmpty(getMiguTokenResp))
            {
                miguToken = StrUtil.nvl(getMiguTokenResp.getToken());
            }
        }
        catch (PortalException e)
        {
            logger.error("getMiguToken failed. resultCode:" + e.getExceptionCode());
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.getMiguToken() ******");
        }
        
        return miguToken;
    }
    
    /**
     * 
     * 咪咕隐式鉴权
     * 
     * @author gyl
     * @param accountName
     * @param sourceIp 来源ip
     * @param remoteIp 远程ip
     * @return
     */
    public MiguImplicitAuthResponse miguImplicitAuth(String accountName, String sourceIp, String remoteIp)
        throws PortalException
    {
        try
        {
            if (logger.isInfoEnable())
            {
                logger.info("****** Enter PortalEngine.miguImplicitAuth() ******");
            }
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.miguImplicitAuth(), params = ",
                    new String[][] {{"accountName", accountName}, {"sourceIp", sourceIp}, {"remoteIp", remoteIp}});
            }
            
            MiguImplicitAuthRequest miguImplicitAuthRequest = new MiguImplicitAuthRequest();
            miguImplicitAuthRequest.setMsisdn(accountName);
            MiguImplicitAuthResponse response = (MiguImplicitAuthResponse)PortalServer.getInstance()
                .sendPostRequest("miguImplicitAuth", miguImplicitAuthRequest);
            
            if (logger.isInfoEnable())
            {
                logger.info("****** Exit PortalEngine.miguImplicitAuth() ******");
            }
            return response;
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.miguImplicitAuth() warn:", e);
            throw e;
        }
    }
    
    /**
     * 
     * 查询专区对应省市编号列表
     * 
     * @author sundi
     * @param nodeId
     * @return
     * @throws PortalException
     */
    public GetCatalogProvincesAndCitiesRsp getCatalogProvincesAndCities(String nodeId)
        throws PortalException
    {
        GetCatalogProvincesAndCitiesRsp getCatalogProvincesAndCitiesResponse = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"nodeID", nodeId}};
                logger.debug("Enter PortalEngine.getCatalogProvincesAndCities()", appInfo);
            }
            
            GetCatalogProvincesAndCitiesReq getCatalogProvincesAndCitiesRequest = new GetCatalogProvincesAndCitiesReq();
            getCatalogProvincesAndCitiesRequest.setCatalogId(nodeId);
            getCatalogProvincesAndCitiesResponse = (GetCatalogProvincesAndCitiesRsp)PortalServer.getInstance()
                .sendPostRequest("getCatalogProvincesAndCities", getCatalogProvincesAndCitiesRequest);
            
            if (logger.isDebugEnable())
            {
                logger.debug("Exit PortalEngine.getCatalogProvincesAndCities(), getCatalogProvincesAndCitiesResponse= "
                    + getCatalogProvincesAndCitiesResponse.toString());
            }
            
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine getCatalogProvincesAndCities is error", e);
            throw e;
        }
        return getCatalogProvincesAndCitiesResponse;
    }
    
    /**
     * 查询用户账号等级信息接口
     * 
     * @param msisdn 用户手机号码
     * @return 用户信息
     * @throws PortalException
     */
    public GetUserlevelResponse getUserLevelInfo(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn", msisdn}};
            logger.debug("Enter PortalEngine.getUserLevel()", appInfos);
        }
        
        // Begin modify by hejianli 10167 at 2011-12-01 for update
        // 游客访问不查询用户信息
        if (IReadTools.isGuestLogin(msisdn))
        {
            return null;
        }
        
        try
        {
            GetUserlevelRequest request = new GetUserlevelRequest();
            
            request.setIdentifyID(msisdn);
            // 调用aserver的getUserInfo接口
            GetUserlevelResponse response =
                (GetUserlevelResponse)PortalServer.getInstance().sendPostRequest("getUserLevel", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfos = {{"msisdn", msisdn}};
                logger.debug("Exit PortalEngine.getUserLevel()", appInfos);
            }
            
            return response;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 
     * 获取token
     * 
     * @author cfh
     * @param sdeviceId
     * @param rand
     * @param tokenType
     * @return
     * @throws PortalException
     */
    public QueryAuthTokenRsp queryAuthToken(String sdeviceId, String rand, String tokenType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"sdeviceId = ", sdeviceId}, {"rand = ", rand}, {"tokenType = ", tokenType}};
            logger.debug("Enter PortalEngine.queryAuthToken()", appInfos);
        }
        QueryAuthTokenReq request = new QueryAuthTokenReq();
        request.setSdeviceId(sdeviceId);
        request.setRand(rand);
        request.setTokenType(tokenType);
        QueryAuthTokenRsp response = null;
        
        try
        {
            response = (QueryAuthTokenRsp)PortalServer.getInstance().sendPostRequest("queryAuthToken", request);
            
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.queryAuthToken is error,resultcode=" + e.getExceptionCode());
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.queryAuthToken()");
        }
        return response;
    }
    
    /**
     * 
     * 生成认证令牌token
     * 
     * @author cfh
     * @param sdeviceId
     * @param accountName
     * @param accountType
     * @param rand
     * @param createTime
     * @param tokenType
     * @return
     * @throws PortalException
     */
    public void creatAuthToken(String sdeviceId, String accountName, String accountType, String rand, String tokenType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"sdeviceId = ", sdeviceId}, {"accountName = ", accountName},
                {"accountType = ", accountType}, {"rand = ", rand}, {"tokenType = ", tokenType}};
            logger.debug("Enter PortalEngine.creatAuthToken()", appInfos);
        }
        CreateAuthTokenReq request = new CreateAuthTokenReq();
        request.setSdeviceId(sdeviceId);
        request.setAccountName(accountName);
        request.setAccountType(accountType);
        request.setRand(rand);
        request.setTokenType(tokenType);
        
        try
        {
            PortalServer.getInstance().sendPostRequest("createAuthToken", request);
            
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.creatAuthToken is error,resultcode=" + e.getExceptionCode());
            throw e;
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.creatAuthToken()");
        }
    }
    
    /**
     * 二维码登录鉴权接口
     * 
     * @param sdeviceId
     * @param rand
     * @param tokenType
     * @param stoken
     * @param counter
     * @param clientVersion
     * @param portalType
     * @param isReturnUserInfo
     * @throws PortalException
     */
    public LoginWithAuthTokenRsp loginWithAuthToken(String sdeviceId, String rand, String tokenType, String stoken,
        String counter, String clientVersion, String portalType, String isReturnUserInfo)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.loginWithAuthToken()");
        }
        
        LoginWithAuthTokenRsp response = null;
        
        LoginWithAuthTokenReq request = new LoginWithAuthTokenReq();
        request.setSdeviceId(sdeviceId);
        request.setRand(rand);
        request.setTokenType(tokenType);
        request.setStoken(stoken);
        request.setCounter(counter);
        request.setClientVersion(clientVersion);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        request.setIsReturnUserInfo("1");
        
        response = (LoginWithAuthTokenRsp)PortalServer.getInstance().sendPostRequest("loginWithAuthToken", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.loginWithAuthToken()");
        }
        
        return response;
    }
    
    /**
     * 获取用户头像信息
     * 
     * @param msisdn
     * @return
     * @throws PortalException
     */
    public QueryUserDefinedHeadResponse getUserHeadIcon(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"msisdn = ", msisdn}};
            logger.debug("****** Enter PortalEngine.getUserHeadIcon()! ******", appInfos);
        }
        QueryUserDefinedHeadResponse response = null;
        QueryUserDefinedHeadRequest request = new QueryUserDefinedHeadRequest();
        request.setIdentityID(msisdn);
        response =
            (QueryUserDefinedHeadResponse)PortalServer.getInstance().sendPostRequest("queryUserDefinedHead", request);
        if (logger.isDebugEnable())
        {
            logger.debug("****** Exit PortalEngine.getUserHeadIcon()! ******");
        }
        return response;
    }
    
    /**
     * 
     * 咪咕币余额查询
     * 
     * @author sundi
     * @param passid
     * @return
     * @throws PortalException
     */
    public MiguCurrencyQueryResponse miguCurrencyQuery(String passid)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.miguCurrencyQuery()", new String[][] {{"passid = ", passid}});
        }
        
        MiguCurrencyQueryResponse response = null;
        
        MiguCurrencyQueryRequest request = new MiguCurrencyQueryRequest();
        request.setPassid(passid);
        
        response = (MiguCurrencyQueryResponse)PortalServer.getInstance().sendPostRequest("miguCurrencyQuery", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.miguCurrencyQuery(),response=" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 查询用户自定义头像以及审核结果
     * 
     * @author sundi
     * @param msisdn
     * @return
     * @throws PortalException
     */
    public QueryUserDefinedHeadResponse queryUserDefinedHead(String msisdn)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            logger.debug("Enter PortalEngine.queryUserDefinedHead()", new String[][] {{"msisdn = ", msisdn}});
        }
        
        QueryUserDefinedHeadResponse response = null;
        
        QueryUserDefinedHeadRequest request = new QueryUserDefinedHeadRequest();
        request.setIdentityID(msisdn);
        
        response =
            (QueryUserDefinedHeadResponse)PortalServer.getInstance().sendPostRequest("queryUserDefinedHead", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.queryUserDefinedHead(),response=" + response);
        }
        
        return response;
    }
    
    /**
     * 获取是否弹出广告窗口
     * 
     * @author liuyang
     * @param mobile 手机标识
     * @param bookId 书籍ID
     * @param chapterId 章节ID
     * @param accessType 门户类型
     * @param channelCode 渠道编码
     * @throws PortalException
     */
    public AdvAuthenticateForBookResponse AdvAuthenticateForBook(String mobile, String bookId, String chapterId,
        String accessType, String sourceType, String channelCode)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"mobile = ", mobile}, {"bookId = ", bookId}, {"chapterId = ", chapterId},
                {"accessType = ", accessType}, {"sourceType = ", sourceType}, {"channelCode = ", channelCode}};
            logger.debug("Enter PortalEngine.AdvAuthenticateForBook()", appInfos);
        }
        
        AdvAuthenticateForBookResponse response = null;
        
        AdvAuthenticateForBookRequest request = new AdvAuthenticateForBookRequest();
        request.setMobile(mobile);
        request.setBookId(bookId);
        request.setChapterId(chapterId);
        request.setAccessType(accessType);
        request.setSourceType(sourceType);
        request.setChannelCode(channelCode);
        
        response = (AdvAuthenticateForBookResponse)PortalServer.getInstance().sendPostRequest("advAuthenticateForBook",
            request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.AdvAuthenticateForBook()");
        }
        return response;
    }
    
    /**
     * 
     * 微信支付免密代扣解约
     * 
     * @author shanlingling
     * @param identityId 身份ID
     * @param appId 公众号ID
     */
    public UnsignWeChatEntrustResponse unsignWeChatEntrust(String identityId, String appId)
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.unsignWeChatEntrust() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.unsignWeChatEntrust(), params = ",
                new String[][] {{"identityId", identityId}, {"appId", appId}});
        }
        
        UnsignWeChatEntrustResponse response = null;
        try
        {
            UnsignWeChatEntrustRequest request = new UnsignWeChatEntrustRequest();
            request.setIdentityId(identityId);
            request.setAppId(appId);
            
            response =
                (UnsignWeChatEntrustResponse)PortalServer.getInstance().sendPostRequest("unsignWeChatEntrust", request);
        }
        catch (PortalException e)
        {
            response = new UnsignWeChatEntrustResponse();
            response.setReturnCode(e.getExceptionCode());
            logger.error("PortalEngine.unsignWeChatEntrust() warn:", e);
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.unsignWeChatEntrust() ******");
        }
        return response;
    }
    
    /**
     * 
     * 查询用户权益
     * 
     * @author sundi
     * @param identityId
     * @param chargeMode
     * @return
     * @throws PortalException
     */
    public QueryMemberEquityResponse queryMemberEquity(String identityId, String chargeMode)
        throws PortalException
    {
        
        if (logger.isDebugEnable())
        {
            String[][] appInfos = {{"mobile = ", identityId}, {"chargeMode = ", chargeMode}};
            logger.debug("Enter PortalEngine.queryMemberEquity()", appInfos);
        }
        
        QueryMemberEquityResponse response = null;
        
        QueryMemberEquityRequest request = new QueryMemberEquityRequest();
        request.setIdentityId(identityId);
        request.setChargeMode(chargeMode);
        
        response = (QueryMemberEquityResponse)PortalServer.getInstance().sendPostRequest("queryMemberEquity", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("Exit PortalEngine.queryMemberEquity()");
        }
        return response;
    }
    
    /**
     * 检查热修复补丁升级接口
     * 
     * @author shanlingling
     * @param phone
     * @param clientVersion
     * @param clientAgent
     * @return
     * @throws PortalException
     */
    public CheckHotfixPatchUpdateRsp clientHotFixCheckUpdate(String phone, String clientVersion, String clientAgent)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.clientHotFixCheckUpdate() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.clientHotFixCheckUpdate(), params = ",
                new String[][] {{"phone", phone}, {"clientVersion", clientVersion}, {"clientAgent", clientAgent}});
        }
        CheckHotfixPatchUpdateRequest request = new CheckHotfixPatchUpdateRequest();
        request.setPhoneNumber(phone);
        request.setClientVersion(clientVersion);
        request.setUserAgent(clientAgent);
        
        CheckHotfixPatchUpdateRsp response =
            (CheckHotfixPatchUpdateRsp)PortalServer.getInstance().sendPostRequest("clientHotFixCheckUpdate", request);
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.clientHotFixCheckUpdate() ******");
        }
        return response;
    }
    
    /**
     * 
     * 查询图书月票数
     * 
     * @author wangzhuohui
     * @param contentId
     * @return
     * @throws PortalException
     */
    public BatchBookStatResponse getBatchBookStat(String contentId)
        throws PortalException
    {
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getBatchBookStat() ******");
        }
        
        BatchBookStatRequest request = new BatchBookStatRequest();
        // 查询图书月票数 (1点击数 2鲜花数 3收藏数 4评分 5月票数-缺省返回所有类型数据)
        request.setDataType("5");
        List<String> bookIdList = new ArrayList<String>();
        bookIdList.add(contentId);
        request.setBookIdList(bookIdList);
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getBatchBookStat()  getBatchBookStat request=" + request);
        }
        
        BatchBookStatResponse response = null;
        
        response = (BatchBookStatResponse)PortalServer.getInstance().sendPostRequest("getBatchBookStat", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("****** Exit PortalEngine.getBatchBookStat()  getBatchBookStat response=" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 查询图书分类类型
     * 
     * @author wangzhuohui
     * @param contentId
     * @return
     * @throws PortalException
     */
    public GetBatchBookProductInfoResponse getBatchBookProductInfo(String contentId)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getBatchBookProductInfo() ******");
        }
        GetBatchBookInfoRequest request = new GetBatchBookInfoRequest();
        List<String> bookIdList = new ArrayList<String>();
        bookIdList.add(contentId);
        request.setBookIdLst(bookIdList);
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getBatchBookProductInfo() getBatchBookProductInfo request=" + request);
        }
        
        GetBatchBookProductInfoResponse response = null;
        
        response = (GetBatchBookProductInfoResponse)PortalServer.getInstance()
            .sendPostRequest("getBatchBookProductInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug(
                "****** Exit PortalEngine.getBatchBookProductInfo()  getBatchBookProductInfo response=" + response);
        }
        
        return response;
    }
    
    /**
     * 名人名家搜索接口
     * 
     * @author yegaoyang
     * @param searchContent 搜索内容
     * @param searchType 搜索类型
     * @return
     * @throws PortalException
     */
    public SearchAuthorSNSResponse searchAuthorSNS(String searchContent, String searchType)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.searchAuthorSNS() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.searchAuthorSNS(), params = ",
                new String[][] {{"searchContent", searchContent}, {"searchType", searchType}});
        }
        SearchAuthorSNSRequest request = new SearchAuthorSNSRequest();
        request.setSearchContent(searchContent);
        request.setSearchType(searchType);
        
        SearchAuthorSNSResponse response =
            (SearchAuthorSNSResponse)PortalServer.getInstance().sendPostRequest("searchAuthorSNS", request);
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.searchAuthorSNS() ******");
        }
        return response;
    }
    
    /**
     * 计算视频URL摘要 <功能详细描述>
     * 
     * @param url
     * @return
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public String digestVideoUrl(String url)
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"url", String.valueOf(url)}};
            logger.debug("entry PortalEngine.digestVideoUrl()", appInfo);
        }
        
        String digestVideoUrl = null;
        
        // 请求消息对象
        DigestVideoUrlRequest req = new DigestVideoUrlRequest();
        req.setInitialUrl(url);
        
        try
        {
            // 响应消息对象
            DigestVideoUrlResponse rsp =
                (DigestVideoUrlResponse)PortalServer.getInstance().sendPostRequest("getDigestVideoUrl", req);
            if (null != rsp)
            {
                digestVideoUrl = rsp.getDigestVideoUrl();
            }
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.digestVideoUrl() failed!", e);
        }
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo = {{"url", String.valueOf(url)}};
            logger.debug("exit PortalEngine.digestVideoUrl()", appInfo);
        }
        
        return digestVideoUrl;
    }
    
    /**
     * 重写方法----一级支付系统与咪咕币对接 和阳光计划二期按章批量订购<一句话功能简述>
     * 
     * @author wzh
     * @param msisdn
     * @param productId
     * @param promotionId
     * @param bookId
     * @param chapterIdList
     * @param accessType
     * @param catalogId
     * @param channelCode
     * @param isUseEquity 是否使用权益订购
     * @param billChapters 下载产生的订购数
     * @throws PortalException
     * @see [类、类#方法、类#成员]
     */
    public OrderObjResponse batchSubscribeChapterByTimesObj(String msisdn, String productId, String promotionId,
        String bookId, List<String> chapterIdList, String catalogId, String channelCode, String clientVersion,
        String sourceIp, String clientDiscount, String sLoginType, String bearType, String isUseEquity,
        String calculatePriceType, FeeElement feeElement, String supportPayType, String idfa, String transId,
        String billChapters)
        throws PortalException
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productId}, {"bookID", bookId},
                    {"chapterIDs", chapterIdList.toString()}, {"catalogId", catalogId}};
                logger.debug("Enter PortalEngine.batchSubscribeChapterByTimesObj()", appInfo);
            }
            
            BatchOrderPurchaseRequest request = new BatchOrderPurchaseRequest();
            request.setMobile(msisdn);
            request.setProductId(productId);
            request.setPromotionId(promotionId);
            request.setBookId(bookId);
            request.setChapterIdList(chapterIdList);
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setCatalogId(catalogId);
            request.setChannelCode(channelCode);
            request.setUaName(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            isUseEquity = StrUtil.isEq(isUseEquity, Types.FALSE) ? isUseEquity : Types.TRUE;
            request.setIsUseEquity(isUseEquity);
            request.setCalculatePriceType(calculatePriceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(transId);
            request.setFeeElement(feeElement);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            
            // modify by hlf add
            request.setBillChapters(billChapters);
            
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 start 2015-08-27
            if (null != feeElement)
            {
                // 请求中多置入批价信息
                request.setFeeElement(feeElement);
            }
            // REQ-3688_连载中图书下载预打包需求全量下载鉴权性能优化 end 2015-08-27
            
            OrderObjResponse orderObjResp =
                (OrderObjResponse)PortalServer.getInstance().sendPostRequest("batchOrderObj", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("batchSubscribeChapterByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productId}, {"bookID", bookId},
                    {"chapterIDs", chapterIdList.toString()}, {"catalogId", catalogId}};
                logger.debug("Exit PortalEngine.batchSubscribeChapterByTimesObj()", appInfo);
            }
            
            return orderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 重写方法----一级支付系统与咪咕币对接 和阳光计划二期按次订购接口，可以完成按次订购图书和按次订购章节
     * 
     * @author wzh
     * @param msisdn 用户手机号码
     * @param productID 产品ID
     * @param promotionID 促销ID
     * @param bookID 图书ID
     * @param chapterID 章节ID
     * @param orderType 订购类型 0 订购图书； 1 订购章节
     * @param nodeID 目录ID，可以是真实目录，也可以是虚拟目录，比如搜索
     * 
     * @return void [返回类型说明]
     * @throws PortalException
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    public OrderObjResponse subscribeByTimesObj(String msisdn, String productID, String promotionID, String bookID,
        String chapterID, String orderType, String nodeID, String channelCode, String fasciculeID, String clientVersion,
        String sourceIp, String clientDiscount, String sLoginType, String bearType, String sourceType,
        boolean isCheckMem, String supportPayType, String idfa, String portalOrderId, FeeElement feeElement,
        String continuousToken, String billChapters)
        throws PortalException
    // 添加参数billChapters前,先判断是否有其他地方调用该方法,有就不能修改参数
    {
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Enter PortalEngine.subscribeByTimesObj()", appInfo);
            }
            
            PurchaseRequest request = new PurchaseRequest();
            // modify by hlf add
            request.setBillChapters(billChapters);
            
            request.setAccessType(SystemConstants.PORTAL_TYPE);
            request.setBookId(bookID);
            request.setCatalogId(nodeID);
            request.setChapterId(chapterID);
            request.setContentType(orderType);
            request.setMobile(msisdn);
            request.setProductId(productID);
            request.setPromotionId(promotionID);
            request.setChannelCode(channelCode);
            request.setFasciculeId(fasciculeID);
            request.setUserAgent(clientVersion);
            request.setSourceIp(sourceIp);// 来源IP
            request.setClientDiscount(clientDiscount);
            request.setLoginType(sLoginType);
            request.setBearType(bearType);
            request.setVisitType("");
            request.setSourceType(sourceType);
            request.setSupportPayType(supportPayType);
            request.setClientVersion(clientVersion);
            request.setTerminalUniqueId(idfa);
            request.setPortalOrderId(portalOrderId);
            request.setContinuousToken(continuousToken);
            request.setIsUseMemberEquity(ThreadLocalContext.getUseEquity());
            
            // modify by kf39172 at Jan 16, 2012 for REQ-934 begin
            boolean onlyTicketPay = ProductInfoManager.isOnlyTicketPay(clientVersion);
            if (onlyTicketPay)
            {
                request.setSupportPayType(TerminalConstants.PAY_TYPE_TICKET);
            }
            // modify by kf39172 at Jan 16, 2012 for REQ-934 end
            
            if (StrUtil.matchs(orderType, BookContants.ORDER_BY_TIMES_TYPE_BOOK) && isCheckMem)
            {
                String useEquity = "";
                String isDownloadValid = DownloadEquityMemCache.getInstance().getDownloadEquity(msisdn, bookID);
                if (StrUtil.isEq(isDownloadValid, TerminalConstants.PURCHASE_PAY))
                {
                    useEquity = TerminalConstants.PURCHASE_PAY;
                }
                request.setUseEquity(useEquity);
            }
            
            OrderObjResponse orderObjResp =
                (OrderObjResponse)PortalServer.getInstance().sendPostRequest("purchaseObj", request);
            if (logger.isDebugEnable())
            {
                logger.debug("subscribeByTimesObj orderObjResp is " + orderObjResp);
                String[][] appInfo = new String[][] {{"msisdn", msisdn}, {"productID", productID}, {"bookID", bookID},
                    {"nodeID", nodeID}};
                logger.debug("Exit PortalEngine.subscribeByTimesObj()", appInfo);
            }
            return orderObjResp;
        }
        catch (PortalException e)
        {
            throw e;
        }
    }
    
    /**
     * 
     * 查询图书对应的听书资源
     * 
     * @author wangzhuohui
     * @param contentId
     * @param queryType
     * @param relType
     * @return
     * @throws PortalException
     */
    public GetEssenceRelInfoResponse getEssenceRelInfo(String contentId, String queryType, String relType)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getEssenceRelInfo() ******");
        }
        GetEssenceRelInfoRequest request = new GetEssenceRelInfoRequest();
        request.setBookId(contentId);
        request.setQueryType(queryType);
        request.setRelType(relType);
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getEssenceRelInfo() getEssenceRelInfo request=" + request);
        }
        
        GetEssenceRelInfoResponse response = null;
        
        response = (GetEssenceRelInfoResponse)PortalServer.getInstance().sendPostRequest("getEssenceRelInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger.debug("****** Exit PortalEngine.getEssenceRelInfo()  getEssenceRelInfo response=" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 获取活动分享信息配置
     * 
     * @author guoyalong
     * @param shareObj
     * @return
     * @throws PortalException
     */
    public ActivitySharingInfoResponse getActivitySharingInfo(String shareObj)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getActivitySharingInfo() ******");
        }
        
        ActivitySharingInfoRequest request = new ActivitySharingInfoRequest();
        request.setShareObj(shareObj);
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getActivitySharingInfo() getActivitySharingInfo request=" + request);
        }
        
        ActivitySharingInfoResponse response =
            (ActivitySharingInfoResponse)PortalServer.getInstance().sendPostRequest("getActivitySharingInfo", request);
        
        if (logger.isDebugEnable())
        {
            logger
                .debug("****** Exit PortalEngine.getActivitySharingInfo() getActivitySharingInfo response=" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 获取图书预定更新开关状态
     * 
     * @author wangzhuohui
     * @param identifyId
     * @param contentId
     * @param contentType
     * @return
     * @throws PortalException
     */
    public GetUserPreSubscriptionResponse getUserPreSubscription(String identifyId, String contentId,
        String contentType)
        throws PortalException
    {
        if (logger.isDebugEnable())
        {
            String[][] appInfo =
                new String[][] {{"identifyId", identifyId}, {"contentId", contentId}, {"contentType", contentType}};
            logger.debug("****** Enter PortalEngine.getUserPreSubscription() ******", appInfo);
        }
        
        GetUserPreSubscriptionRequest request = new GetUserPreSubscriptionRequest();
        request.setMobile(identifyId);
        request.setBookId(contentId);
        request.setContentType(contentType);
        request.setPortalType(SystemConstants.PORTAL_TYPE);
        // 分页起始数
        request.setStart("1");
        // 每页记录
        request.setCount("10");
        // 预定类型，-1、内容预定、专区预定和品牌的并集，0、内容预定和专区预定的并集，空或1、内容预定，2、专区预定，3、品牌
        request.setScheduleType("1");
        
        GetUserPreSubscriptionResponse response = null;
        
        response = (GetUserPreSubscriptionResponse)PortalServer.getInstance().sendPostRequest("getUserPreSubscription",
            request);
        
        if (logger.isDebugEnable())
        {
            logger
                .debug("****** Exit PortalEngine.getUserPreSubscription() getUserPreSubscription response=" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 调用server的kindleSubscribe接口进行激活企业包月
     * 
     * @author hlf
     * @param dsn Dsn设备码
     * @param payType 支付类型
     * @param mobile 身份ID
     * @param accessType 门户类型
     * @return
     */
    public void getKindleSubscribe(String dsn, String identityId, String accessType)
        throws PortalException
    {
        LogTools.debugLog(logger,
            "****** Enter PortalEngine.getKindleSubscribe()******",
            new String[][] {{"dsn", dsn}, {"identityId", identityId}, {"accessType", accessType}});
        
        KindleSubscribeRequest request = new KindleSubscribeRequest();
        request.setDsnCode(dsn);
        request.setMobile(identityId);
        request.setAccessType(accessType);
        
        try
        {
            PortalServer.getInstance().sendPostRequest("kindleSubscribe", request);
        }
        catch (PortalException e)
        {
            LogTools.errorLog(logger,
                "PortalEngine.getKindleSubscribe() failed!",
                new String[][] {{"dsn", dsn}, {"identityId", identityId}},
                e);
            throw e;
        }
        LogTools.debugLog(logger, "****** Exit PortalEngine.getKindleSubscribe() ******");
    }
    
    /**
     * 调用server的BookAudioConvert接口获取文音转换信息
     * 
     * @author wangyu1
     * @param contentType
     * @param contentId
     * @param chapterId
     * @param offset
     * @return
     * @throws PortalException
     */
    public BookAudioConvertResponse getBookAudioConver(String contentType, String contentId, String chapterId,
        String offset)
        throws PortalException
    {
        try
        {
            if (logger.isInfoEnable())
            {
                logger.info("****** Enter PortalEngine.getBookAudioConver() ******");
            }
            BookAudioConvertRequest request = new BookAudioConvertRequest();
            request.setContentType(contentType);
            request.setContentId(contentId);
            request.setChapterId(chapterId);
            request.setOffSet(offset);
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.getBookAudioConver() getBookAudioConver request=" + request);
            }
            BookAudioConvertResponse response = null;
            
            response =
                (BookAudioConvertResponse)PortalServer.getInstance().sendPostRequest("bookAudioConvert", request);
            
            if (logger.isDebugEnable())
            {
                logger.debug("****** Exit PortalEngine.getBookAudioConver() getBookAudioConver response=" + response);
            }
            return response;
        }
        catch (PortalException e)
        {
            logger.error("getBookAudioConver error;", e);
            throw e;
        }
    }
    
    /**
     * 调用cservice queryStealBook 返回图书信息
     *
     * @author hehuan
     * @param request
     * @return
     * @throws PortalException
     */
    public QueryStealBookResponse queryStealBook(QueryStealBookRequest request)
        throws PortalException
    {
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Enter PortalEngine queryStealBook request---->" + request);
        }
        QueryStealBookResponse response = null;
        
        try
        {
            response = (QueryStealBookResponse)PortalServer.getInstance().sendPostRequest("queryStealBook", request);
        }
        catch (PortalException e)
        {
            dLog.error("PortalEngine queryStealBook failed", e);
            throw e;
        }
        
        if (dLog.isDebugEnabled())
        {
            dLog.debug("Exit PortalEngine queryStealBook response---->" + response);
        }
        
        return response;
    }
    
    /**
     * 
     * 判断用户是否能够继续下载包月专区下的图书
     *
     * @author wangzhuohui
     * @param msisdn
     * @param catalogId
     * @param contentId
     * @param contentType
     * @return
     * @throws PortalException
     */
    public GetCountOfDownloadResponse getUserCanDownload(String msisdn, String catalogId, String contentId,
        String contentType)
        throws PortalException
    {
        GetCountOfDownloadResponse getCountOfDownloadResponse = null;
        try
        {
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"catalogId", catalogId}, {"contentId", contentId},
                    {"contentType", contentType}};
                logger.debug("Enter PortalEngine.getUserCanDownload()", appInfo);
            }
            
            GetCountOfDownloadRequest request = new GetCountOfDownloadRequest();
            request.setMdn(msisdn);
            request.setCatalogId(catalogId);
            request.setContentId(contentId);
            
            boolean isVoice_type = Types.VOICE_TYPE.equals(contentType);
            
            if (isVoice_type)
            {
                // 听书类型给server传入类型
                request.setType(SystemConstants.VOICE_BOOK_TYPE_FOR_DOWNLOAD);
            }
            
            getCountOfDownloadResponse =
                (GetCountOfDownloadResponse)PortalServer.getInstance().sendPostRequest("getCountOfDownload", request);
            
            if (logger.isDebugEnable())
            {
                String[][] appInfo = {{"msisdn", msisdn}, {"catalogId", catalogId}, {"contentId", contentId},
                    {"contentType", contentType}};
                logger.debug("Exit PortalEngine.getUserCanDownload()", appInfo);
            }
        }
        catch (PortalException e)
        {
            logger.error("PortalEngine.getUserCanDownload() failed!",
                new String[][] {{"msisdn", msisdn}, {"catalogId", catalogId}, {"contentId", contentId},
                    {"contentType", contentType}},
                e);
            throw new PortalException();
        }
        return getCountOfDownloadResponse;
    }
    
    /**
     * 
     * TODO 获取关联推荐信息 BR002988添加
     *
     * @author lixiaozhen
     * @param msisdn
     * @param portalType
     * @param bookId
     * @param clientVersion
     * @param userAgent
     * @param channelCode
     * @param userAreaCode
     * @param remoteIP
     * @param osType
     * @param version
     * @param pageType
     * @return
     */
    public RecommendRelevanceResponse getRecommendRelevanceEx(String msisdn, String portalType, String bookId,
        String clientVersion, String userAgent, String channelCode, String userAreaCode, String remoteIP, String osType,
        String version)
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.getRecommendRelevanceEx() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.getRecommendRelevanceEx(), params = ",
                new String[][] {{"msisdn", msisdn}, {"portalType", portalType}, {"bookId", bookId},
                    {"clientVersion", clientVersion}, {"userAgent", userAgent}, {"channelCode", channelCode},
                    {"userAreaCode", userAreaCode}, {"remoteIP", remoteIP}, {"osType", osType}, {"version", version}});
        }
        
        RecommendRelevanceResponse resp = null;
        try
        {
            resp = ThreadLocalContext.getRecommendRelevanceFromContext(msisdn, bookId, portalType);
            if (resp != null)
            {
                return resp;
            }
            
            RecommendRelevanceRequest request = new RecommendRelevanceRequest();
            request.setMobile(msisdn);
            request.setBookid(bookId);
            request.setProtType(portalType);
            
            /*
             * ST环境aserver没有portType=4(client门户)的数据， rec_test_pass_book配置在ptl_parameter表，value中的书籍会被指定portType=1( Wap门户)
             * String passBook = PortalCacheManager.getConfigValue("rec_test_pass_book");
             * request.setProtType((Util.isNotEmpty(passBook) && passBook.contains(bookId)) ?
             * SystemConstants.PORTAL_TYPE_CMWAP_CDTLOG : SystemConstants.PORTAL_TYPE);
             */
            
            // IREAD-18468关联推荐增加请求参数
            request.setClientVersion(clientVersion);
            request.setUserAgent(userAgent);
            request.setChannelCode(channelCode);
            // 根据游客ip获取地域信息，获取不到则默认全国
            if (IReadTools.isGuestLogin(msisdn) || IReadTools.isReadNumber(msisdn))
            {
                GetAreaCodeByIpAddressResponse region = IReadTools.getRegionByIp(remoteIP);
                if (region != null)
                {
                    if (StrUtil.isNotEmpty(region.getCityId()))
                    {
                        request.setUserAreaCode(region.getCityId());
                    }
                    else if (StrUtil.isNotEmpty(region.getProvinceId()))
                    {
                        request.setUserAreaCode(region.getProvinceId());
                    }
                    else
                    {
                        request.setUserAreaCode(Types.DEFAULT_PROVINCEID);
                    }
                }
                else
                {
                    request.setUserAreaCode(Types.DEFAULT_PROVINCEID);
                }
            }
            
            // 终端类型， 1: AN，2：IOS，3：KD。从客户端获取之后进行转换。非1/2/3的情况则默认传android
            if (TerminalConstants.OSTYPE_ANDROID.equals(osType) || TerminalConstants.OSTYPE_IOS.equals(osType)
                || TerminalConstants.OSTYPE_KINDLE.equals(osType))
            {
                request.setOsType(osType);
            }
            else
            {
                request.setOsType(TerminalConstants.OSTYPE_ANDROID);
            }
            
            request.setVersion(version);
            request.setPageType(TerminalConstants.PAGE_TYPE);// pageType默认传2：资费页。ues那边会有空的情况
            
            resp =
                (RecommendRelevanceResponse)PortalServer.getInstance().sendPostRequest("recommendRelevanceEx", request);
            ThreadLocalContext.putRecommendRelevanceIntoContext(msisdn, bookId, portalType, resp);
        }
        catch (PortalException e)
        {
            logger.error(" PortalEngine.getRecommendRelevanceEx error! " + e.getMessage());
            return null;
        }
        
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.getRecommendRelevanceEx() ******");
        }
        
        return resp;
    }
    
    /**
     * 
     * 批量添加用户书签
     *
     * @author shanlingling
     * @param msisdn 阅读号
     * @param bookmarkList 要添加的书签列表
     * @return
     * @throws PortalException
     */
    public BatchAddBookmarkResponse batchAddUserBookmark(String msisdn,
        List<com.huawei.iread.terminal.type.bookmark.Bookmark> bookmarkList)
        throws PortalException
    {
        if (logger.isInfoEnable())
        {
            logger.info("****** Enter PortalEngine.batchAddUserBookmark() ******");
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.batchAddUserBookmark(), params = " + bookmarkList,
                new String[][] {{"msisdn", msisdn},
                    {"bookmarkList", bookmarkList == null ? null : bookmarkList.toString()}});
        }
        
        BatchAddBookmarkResponse resp = null;
        if (bookmarkList != null && bookmarkList.size() > 0)
        {
            List<BookmarkInfo> bookmarkInfoList = new ArrayList<BookmarkInfo>();
            BookmarkInfo bookmarkInfo = null;
            for (com.huawei.iread.terminal.type.bookmark.Bookmark bookmark : bookmarkList)
            {
                bookmarkInfo = new BookmarkInfo();
                bookmarkInfo.setMsisdn(msisdn);
                bookmarkInfo.setBookId(bookmark.getContentID());
                bookmarkInfo.setChapterId(bookmark.getChapterID());
                bookmarkInfo.setBookmarkType(bookmark.getBookmarkType());
                bookmarkInfo.setPosition(bookmark.getPosition());
                bookmarkInfo.setOperation(Types.ADD_BOOKMARK);
                bookmarkInfo.setUserBookmarkTime(DateUtil.transAddTimeForNoteOrMark(bookmark.getAddTime()));
                
                // 书签引文超出配置长度要截取
                String quote = bookmark.getQuote();
                if (StrUtil.isNotEmpty(quote) && quote.length() > PortalConst.BOOKMARK_QUOTE_SUBSTRING_LENGTH)
                {
                    quote = quote.substring(0, PortalConst.BOOKMARK_QUOTE_SUBSTRING_LENGTH);
                }
                bookmarkInfo.setQuote(quote);
                bookmarkInfoList.add(bookmarkInfo);
            }
            
            BatchAddBookmarkRequest request = new BatchAddBookmarkRequest();
            request.setMsisdn(msisdn);
            request.setBookmarkList(bookmarkInfoList);
            
            if (logger.isDebugEnable())
            {
                logger.debug("PortalEngine.batchAddUserBookmark(), BatchAddBookmarkRequest = " + request);
            }
            
            resp = (BatchAddBookmarkResponse)PortalServer.getInstance().sendPostRequest("batchAddBookmark", request);            
        }
        
        if (logger.isDebugEnable())
        {
            logger.debug("PortalEngine.batchAddUserBookmark(), BatchAddBookmarkResponse = " + resp);
        }
        if (logger.isInfoEnable())
        {
            logger.info("****** Exit PortalEngine.batchAddUserBookmark() ******");
        }
        return resp;
    }
    
    /**
     * 
     * 判断用户是否展示过期提示语
     *
     * @author wangzejun
     * @param start 查询起始记录顺序号
     * @param count 返回分页记录数
     * @param ticketStatus 1（书券已失效） 2（可使用）3（已使用）
     * @param identityId 身份ID
     * @return
     * @throws PortalException
     */
    public UserTicketsResponse getUserTicketsList(String start, String count, String ticketStatus, String identityId)
        throws PortalException
    {
        UserTicketsResponse userTicketsResponse = null;
        if (logger.isDebugEnable())
        {
            String[][] appInfo =
                {{"start", start}, {"count", count}, {"ticketStatus", ticketStatus}, {"identityId", identityId}};
            logger.debug("Enter PortalEngine.getUserTicketsList()", appInfo);
        }
        
        UserTicketsRequest request = new UserTicketsRequest();
        request.setStart(start);
        request.setCount(count);
        request.setTicketStatus(ticketStatus);
        request.setIdentifyId(identityId);
        
        userTicketsResponse =
            (UserTicketsResponse)PortalServer.getInstance().sendPostRequest("getUserTicketsList", request);
        
        if (logger.isDebugEnable())
        {
            String[][] appInfo =
                {{"start", start}, {"count", count}, {"ticketStatus", ticketStatus}, {"identityId", identityId}};
            logger.debug("Exit PortalEngine.getUserTicketsList()", appInfo);
        }
        return userTicketsResponse;
    }
    
}